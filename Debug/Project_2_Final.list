
Project_2_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008020  08008020  00018020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008474  08008474  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  08008474  08008474  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008474  08008474  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800847c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000214  08008690  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08008690  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df26  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f6  00000000  00000000  0002e163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00030760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bcf  00000000  00000000  000324a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdf4  00000000  00000000  0004c077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009120c  00000000  00000000  0005be6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  000ed0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	08008008 	.word	0x08008008

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	08008008 	.word	0x08008008

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fadf 	bl	8001594 <DELAY_TIM_Init>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fad9 	bl	80015aa <DELAY_TIM_Us>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fadf 	bl	80015d8 <DELAY_TIM_Ms>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	889b      	ldrh	r3, [r3, #4]
 800103c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f107 0208 	add.w	r2, r7, #8
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f002 f863 	bl	800311c <HAL_GPIO_Init>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	889b      	ldrh	r3, [r3, #4]
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f002 f845 	bl	800311c <HAL_GPIO_Init>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6898      	ldr	r0, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f002 f9ce 	bl	8003452 <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	889b      	ldrh	r3, [r3, #4]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f002 f9a7 	bl	8003424 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff98 	bl	8001022 <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffd0 	bl	800109a <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);
 80010fa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff6d 	bl	8000fde <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffaa 	bl	800105e <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80);
 800110a:	2150      	movs	r1, #80	; 0x50
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff66 	bl	8000fde <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd3 	bl	80010be <DS18B20_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <DS18B20_Start+0x44>
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e001      	b.n	8001128 <DS18B20_Start+0x48>
	else Response = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8001128:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff56 	bl	8000fde <DS18B20_DelayUs>

	return Response;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff6a 	bl	8001022 <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e02b      	b.n	80011ac <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 8001154:	78fa      	ldrb	r2, [r7, #3]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	fa42 f303 	asr.w	r3, r2, r3
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d012      	beq.n	800118a <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff5c 	bl	8001022 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff94 	bl	800109a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 8001172:	2101      	movs	r1, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff32 	bl	8000fde <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff6f 	bl	800105e <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8001180:	2132      	movs	r1, #50	; 0x32
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff2b 	bl	8000fde <DS18B20_DelayUs>
 8001188:	e00d      	b.n	80011a6 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff49 	bl	8001022 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff81 	bl	800109a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8001198:	2132      	movs	r1, #50	; 0x32
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff1f 	bl	8000fde <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff5c 	bl	800105e <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3301      	adds	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	ddd0      	ble.n	8001154 <DS18B20_Write+0x18>
		}
	}
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff48 	bl	800105e <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	e024      	b.n	800121e <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff24 	bl	8001022 <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 80011da:	2100      	movs	r1, #0
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff5c 	bl	800109a <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 80011e2:	2101      	movs	r1, #1
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fefa 	bl	8000fde <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff37 	bl	800105e <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff64 	bl	80010be <DS18B20_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d009      	beq.n	8001210 <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 80011fc:	2201      	movs	r2, #1
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	b25a      	sxtb	r2, r3
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4313      	orrs	r3, r2
 800120c:	b25b      	sxtb	r3, r3
 800120e:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 8001210:	2132      	movs	r1, #50	; 0x32
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fee3 	bl	8000fde <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b07      	cmp	r3, #7
 8001222:	ddd7      	ble.n	80011d4 <DS18B20_Read+0x18>
	}
	return Value;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff feb8 	bl	8000fc4 <DS18B20_DelayInit>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	float Temp;
	DS18B20_Start(DS18B20);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff3b 	bl	80010e0 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 800126a:	2101      	movs	r1, #1
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fec7 	bl	8001000 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001272:	21cc      	movs	r1, #204	; 0xcc
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff61 	bl	800113c <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 800127a:	2144      	movs	r1, #68	; 0x44
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff5d 	bl	800113c <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8001282:	21c8      	movs	r1, #200	; 0xc8
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff febb 	bl	8001000 <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff28 	bl	80010e0 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8001290:	2101      	movs	r1, #1
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff feb4 	bl	8001000 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001298:	21cc      	movs	r1, #204	; 0xcc
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff4e 	bl	800113c <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 80012a0:	21be      	movs	r1, #190	; 0xbe
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff4a 	bl	800113c <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff87 	bl	80011bc <DS18B20_Read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff82 	bl	80011bc <DS18B20_Read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	021a      	lsls	r2, r3, #8
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fcb9 	bl	8000c3c <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	60bb      	str	r3, [r7, #8]
	DS18B20->Temp = (float)(Temp/16);
 80012ce:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f7ff fdba 	bl	8000e4c <__aeabi_fdiv>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <Motor_Init_PWM>:
  * 		frequency: frequency of PWM
  * @retval None
  */

void Motor_Init_PWM(Motor_Name* Motor, TIM_HandleTypeDef* Timer, uint32_t Channel, 	uint32_t frequency, uint8_t duty)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
	Motor->Timer_PWM = Timer;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]
	Motor->Channel_PWM = Channel;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
	//Start Timer
	HAL_TIM_PWM_Start(Timer, Channel);
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f002 ff65 	bl	80041d8 <HAL_TIM_PWM_Start>
	Motor_Set_Duty(Motor, duty);
 800130e:	7e3b      	ldrb	r3, [r7, #24]
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f81c 	bl	8001350 <Motor_Set_Duty>
	Motor_Set_Frequency(Motor, frequency);
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f862 	bl	80013e4 <Motor_Set_Frequency>
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <Motor_Init_Encoder>:
  * @param	Timer,channel for Encoder
  *
  * @retval None
  */
void Motor_Init_Encoder(Motor_Name* Motor, TIM_HandleTypeDef* Timer, uint32_t Channel)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	Motor->Timer_Encoder = Timer;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	609a      	str	r2, [r3, #8]
	Motor->Channel_Encoder = Channel;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(Timer, Channel);
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f003 f88c 	bl	8004460 <HAL_TIM_Encoder_Start>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <Motor_Set_Duty>:
  * @brief Set duty cycle for PWM
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void Motor_Set_Duty(Motor_Name* Motor,uint8_t duty)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
	if(duty > DUTY_MAX)
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <Motor_Set_Duty+0x16>
		duty = DUTY_MAX;
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	70fb      	strb	r3, [r7, #3]
	if(duty <= DUTY_MIN)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2b0a      	cmp	r3, #10
 800136a:	d801      	bhi.n	8001370 <Motor_Set_Duty+0x20>
		duty = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	70fb      	strb	r3, [r7, #3]

	Motor->duty = duty;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	751a      	strb	r2, [r3, #20]
	uint16_t compare = (Motor->Timer_PWM->Init.Period + 1) * duty / 100;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <Motor_Set_Duty+0x90>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <Motor_Set_Duty+0x52>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	89fa      	ldrh	r2, [r7, #14]
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013a0:	e018      	b.n	80013d4 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d105      	bne.n	80013b6 <Motor_Set_Duty+0x66>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013b4:	e00e      	b.n	80013d4 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d105      	bne.n	80013ca <Motor_Set_Duty+0x7a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80013c8:	e004      	b.n	80013d4 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	51eb851f 	.word	0x51eb851f

080013e4 <Motor_Set_Frequency>:
  * @brief Set frequency for PWM
  * @param frequency(Hz); should  2 < f < 10000
  * @retval None
  */
void Motor_Set_Frequency(Motor_Name* Motor, uint32_t frequency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / ((period + 1)*frequency) - 1;
	Motor->frequency = frequency;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	611a      	str	r2, [r3, #16]
	uint32_t period = Motor->Timer_PWM->Init.Period;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	60fb      	str	r3, [r7, #12]
	uint32_t f_timer = HAL_RCC_GetHCLKFreq();
 80013fc:	f002 fc3c 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8001400:	60b8      	str	r0, [r7, #8]
	TIM2->PSC = f_timer / ((period + 1) * frequency) - 1;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001416:	3b01      	subs	r3, #1
 8001418:	6293      	str	r3, [r2, #40]	; 0x28
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <Motor_Get_Speed>:
  * @brief read speed
  * @param
  * @retval None
  */
uint16_t Motor_Get_Speed(Motor_Name* Motor)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	Motor->speed = speed;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <Motor_Get_Speed+0x40>)
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	82da      	strh	r2, [r3, #22]
	if(speed > SPEED_MAX)
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <Motor_Get_Speed+0x40>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800143c:	4293      	cmp	r3, r2
 800143e:	d903      	bls.n	8001448 <Motor_Get_Speed+0x24>
		speed = SPEED_MAX;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <Motor_Get_Speed+0x40>)
 8001442:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8001446:	801a      	strh	r2, [r3, #0]
	if(speed <= SPEED_MIN)
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <Motor_Get_Speed+0x40>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <Motor_Get_Speed+0x32>
		speed = SPEED_MIN;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <Motor_Get_Speed+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	801a      	strh	r2, [r3, #0]
	return speed;
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <Motor_Get_Speed+0x40>)
 8001458:	881b      	ldrh	r3, [r3, #0]
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	2000023c 	.word	0x2000023c

08001468 <HAL_SYSTICK_Callback>:
  * @brief update speed for motor through encoder
  * @param
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
	if(idx == SAMPLING_TIME)	//update speed after every sampling time
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_SYSTICK_Callback+0x4c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2bc8      	cmp	r3, #200	; 0xc8
 8001472:	d118      	bne.n	80014a6 <HAL_SYSTICK_Callback+0x3e>
	{
		pre_counter = __HAL_TIM_GET_COUNTER(Motor.Timer_Encoder);
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_SYSTICK_Callback+0x50>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_SYSTICK_Callback+0x54>)
 800147e:	6013      	str	r3, [r2, #0]
		speed = caculate_speed(pre_counter, old_counter);
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_SYSTICK_Callback+0x54>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_SYSTICK_Callback+0x58>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f81c 	bl	80014c8 <caculate_speed>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_SYSTICK_Callback+0x5c>)
 8001496:	801a      	strh	r2, [r3, #0]
		old_counter = pre_counter;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_SYSTICK_Callback+0x54>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_SYSTICK_Callback+0x58>)
 800149e:	6013      	str	r3, [r2, #0]
		idx = 0;
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_SYSTICK_Callback+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
	}
	idx++;
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_SYSTICK_Callback+0x4c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a01      	ldr	r2, [pc, #4]	; (80014b4 <HAL_SYSTICK_Callback+0x4c>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000230 	.word	0x20000230
 80014b8:	2000001c 	.word	0x2000001c
 80014bc:	20000234 	.word	0x20000234
 80014c0:	20000238 	.word	0x20000238
 80014c4:	2000023c 	.word	0x2000023c

080014c8 <caculate_speed>:

uint16_t caculate_speed(uint32_t pre_counter, uint32_t old_counter)
		{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
			if(pre_counter < old_counter)
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d205      	bcs.n	80014e6 <caculate_speed+0x1e>
			{
				pre_counter = pre_counter + Motor.Timer_Encoder->Init.Period;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <caculate_speed+0x40>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	607b      	str	r3, [r7, #4]
			}

			return (pre_counter - old_counter) * (1000 / SAMPLING_TIME) * 60 / 334; 	//number of pulses in one  minutes / 334 = rpm
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4a05      	ldr	r2, [pc, #20]	; (800150c <caculate_speed+0x44>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	09db      	lsrs	r3, r3, #7
 80014fc:	b29b      	uxth	r3, r3
		}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	2000001c 	.word	0x2000001c
 800150c:	621b97c3 	.word	0x621b97c3

08001510 <Temp_to_Duty>:
{
	return temp*SPEED_MAX/100; 		//100 độ C tương ứng với tốc độ max = 4600rpm
}
*/
uint8_t Temp_to_Duty(uint8_t temp)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	return temp;
 800151a:	79fb      	ldrb	r3, [r7, #7]
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
	...

08001528 <Manual_to_Duty>:
uint8_t Manual_to_Duty(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	  uint16_t manual = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	81fb      	strh	r3, [r7, #14]
	  HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f001 fa35 	bl	80029a8 <HAL_ADC_PollForConversion>
	  manual = HAL_ADC_GetValue(hadc);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f001 fb38 	bl	8002bb4 <HAL_ADC_GetValue>
 8001544:	4603      	mov	r3, r0
 8001546:	81fb      	strh	r3, [r7, #14]
	  //manual: 4000 -> 0 convert to
	  //duty:     10 -> 100
	  return (-0.0225*manual + 100);
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff5a 	bl	8000404 <__aeabi_i2d>
 8001550:	a30d      	add	r3, pc, #52	; (adr r3, 8001588 <Manual_to_Duty+0x60>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe ffbf 	bl	80004d8 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <Manual_to_Duty+0x68>)
 8001568:	f7fe fe00 	bl	800016c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fa88 	bl	8000a88 <__aeabi_d2uiz>
 8001578:	4603      	mov	r3, r0
 800157a:	b2db      	uxtb	r3, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	70a3d70a 	.word	0x70a3d70a
 800158c:	bf970a3d 	.word	0xbf970a3d
 8001590:	40590000 	.word	0x40590000

08001594 <DELAY_TIM_Init>:
 *      Author: acer
 */
#include "delay_timer.h"

void	DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f002 fd81 	bl	80040a4 <HAL_TIM_Base_Start>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <DELAY_TIM_Us>:

void 	DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t us)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 80015be:	bf00      	nop
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3f9      	bcc.n	80015c0 <DELAY_TIM_Us+0x16>
//        while (__HAL_TIM_GET_COUNTER(htim) < period);  // wait for the counter to reach the us input in the parameter
//        while (__HAL_TIM_GET_COUNTER(htim) < last_cnt - period);  // wait for the counter to reach the us input in the parameter
//    }
//

}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <DELAY_TIM_Ms>:

void	DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t ms)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
	while(ms--)
 80015e4:	e004      	b.n	80015f0 <DELAY_TIM_Ms+0x18>
	{
		DELAY_TIM_Us(htim, 1000);
 80015e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffdd 	bl	80015aa <DELAY_TIM_Us>
	while(ms--)
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	807a      	strh	r2, [r7, #2]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f5      	bne.n	80015e6 <DELAY_TIM_Ms+0xe>
	}
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8001608:	f000 f8f2 	bl	80017f0 <Lcd_configure>
			lcd_write_command(0x33);
 800160c:	2033      	movs	r0, #51	; 0x33
 800160e:	f000 f993 	bl	8001938 <lcd_write_command>
			lcd_write_command(0x32);
 8001612:	2032      	movs	r0, #50	; 0x32
 8001614:	f000 f990 	bl	8001938 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8001618:	2028      	movs	r0, #40	; 0x28
 800161a:	f000 f98d 	bl	8001938 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 800161e:	2001      	movs	r0, #1
 8001620:	f000 f98a 	bl	8001938 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001624:	200c      	movs	r0, #12
 8001626:	f000 f987 	bl	8001938 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 800162a:	2006      	movs	r0, #6
 800162c:	f000 f984 	bl	8001938 <lcd_write_command>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4906      	ldr	r1, [pc, #24]	; (800165c <Lcd_write_int+0x28>)
 8001644:	4618      	mov	r0, r3
 8001646:	f004 fa67 	bl	8005b18 <siprintf>
	Lcd_write_string(buffer);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f806 	bl	8001660 <Lcd_write_string>
}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	08008020 	.word	0x08008020

08001660 <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e009      	b.n	8001682 <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f97e 	bl	8001978 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	3301      	adds	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	7bfc      	ldrb	r4, [r7, #15]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7fe fd63 	bl	8000150 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	429c      	cmp	r4, r3
 800168e:	d3ee      	bcc.n	800166e <Lcd_write_string+0xe>
	}
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}

0800169a <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	460a      	mov	r2, r1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	4613      	mov	r3, r2
 80016a8:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f93d 	bl	8001938 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 80016be:	e00a      	b.n	80016d6 <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3340      	adds	r3, #64	; 0x40
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f931 	bl	8001938 <lcd_write_command>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <Lcd_display_menu>:
/*****
** Display string
******/

void Lcd_display_menu(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	Lcd_gotoxy(0, 0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ffd7 	bl	800169a <Lcd_gotoxy>
	//write Temperature
	Lcd_write_string("MODE:");
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <Lcd_display_menu+0x3c>)
 80016ee:	f7ff ffb7 	bl	8001660 <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2006      	movs	r0, #6
 80016f6:	f7ff ffd0 	bl	800169a <Lcd_gotoxy>
	Lcd_write_string("1. ByTemp");
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <Lcd_display_menu+0x40>)
 80016fc:	f7ff ffb0 	bl	8001660 <Lcd_write_string>

	//write Speed
	Lcd_gotoxy(0, 1);
 8001700:	2101      	movs	r1, #1
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ffc9 	bl	800169a <Lcd_gotoxy>
	Lcd_gotoxy(6, 1);
 8001708:	2101      	movs	r1, #1
 800170a:	2006      	movs	r0, #6
 800170c:	f7ff ffc5 	bl	800169a <Lcd_gotoxy>
	Lcd_write_string("2. Manual");
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <Lcd_display_menu+0x44>)
 8001712:	f7ff ffa5 	bl	8001660 <Lcd_write_string>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08008024 	.word	0x08008024
 8001720:	0800802c 	.word	0x0800802c
 8001724:	08008038 	.word	0x08008038

08001728 <Lcd_display>:
/*****
** Display temperature, speed
******/

void Lcd_display(uint8_t temperatute, uint16_t speed)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	80bb      	strh	r3, [r7, #4]
	static uint8_t pre_temperatute = -1;
	static uint16_t pre_speed = -1;
	if(pre_temperatute != temperatute)
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <Lcd_display+0xac>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	429a      	cmp	r2, r3
 8001740:	d01c      	beq.n	800177c <Lcd_display+0x54>
	{
		Lcd_gotoxy(0, 0);
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff ffa8 	bl	800169a <Lcd_gotoxy>
		//write Temperature
		Lcd_write_string("Temp :");
 800174a:	4823      	ldr	r0, [pc, #140]	; (80017d8 <Lcd_display+0xb0>)
 800174c:	f7ff ff88 	bl	8001660 <Lcd_write_string>
		Lcd_gotoxy(6, 0);
 8001750:	2100      	movs	r1, #0
 8001752:	2006      	movs	r0, #6
 8001754:	f7ff ffa1 	bl	800169a <Lcd_gotoxy>
		Lcd_write_string("      ");
 8001758:	4820      	ldr	r0, [pc, #128]	; (80017dc <Lcd_display+0xb4>)
 800175a:	f7ff ff81 	bl	8001660 <Lcd_write_string>
		Lcd_gotoxy(6, 0);
 800175e:	2100      	movs	r1, #0
 8001760:	2006      	movs	r0, #6
 8001762:	f7ff ff9a 	bl	800169a <Lcd_gotoxy>
		Lcd_write_int((int)temperatute);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff63 	bl	8001634 <Lcd_write_int>
		Lcd_gotoxy(12, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	200c      	movs	r0, #12
 8001772:	f7ff ff92 	bl	800169a <Lcd_gotoxy>
		Lcd_write_string("C  ");
 8001776:	481a      	ldr	r0, [pc, #104]	; (80017e0 <Lcd_display+0xb8>)
 8001778:	f7ff ff72 	bl	8001660 <Lcd_write_string>
	}
	if(pre_speed != speed)
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <Lcd_display+0xbc>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	88ba      	ldrh	r2, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d01c      	beq.n	80017c0 <Lcd_display+0x98>
	{
		//write Speed
		Lcd_gotoxy(0, 1);
 8001786:	2101      	movs	r1, #1
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff ff86 	bl	800169a <Lcd_gotoxy>
		Lcd_write_string("Speed:");
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <Lcd_display+0xc0>)
 8001790:	f7ff ff66 	bl	8001660 <Lcd_write_string>
		Lcd_gotoxy(6, 1);
 8001794:	2101      	movs	r1, #1
 8001796:	2006      	movs	r0, #6
 8001798:	f7ff ff7f 	bl	800169a <Lcd_gotoxy>
		Lcd_write_string("      ");
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <Lcd_display+0xb4>)
 800179e:	f7ff ff5f 	bl	8001660 <Lcd_write_string>
		Lcd_gotoxy(6, 1);
 80017a2:	2101      	movs	r1, #1
 80017a4:	2006      	movs	r0, #6
 80017a6:	f7ff ff78 	bl	800169a <Lcd_gotoxy>
		Lcd_write_int((int)speed);
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff41 	bl	8001634 <Lcd_write_int>
		Lcd_gotoxy(12, 1);
 80017b2:	2101      	movs	r1, #1
 80017b4:	200c      	movs	r0, #12
 80017b6:	f7ff ff70 	bl	800169a <Lcd_gotoxy>
		Lcd_write_string("rpm");
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <Lcd_display+0xc4>)
 80017bc:	f7ff ff50 	bl	8001660 <Lcd_write_string>
	}
	pre_speed = speed;
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <Lcd_display+0xbc>)
 80017c2:	88bb      	ldrh	r3, [r7, #4]
 80017c4:	8013      	strh	r3, [r2, #0]
	pre_temperatute = temperatute;
 80017c6:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <Lcd_display+0xac>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	7013      	strb	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000018 	.word	0x20000018
 80017d8:	08008044 	.word	0x08008044
 80017dc:	0800804c 	.word	0x0800804c
 80017e0:	08008054 	.word	0x08008054
 80017e4:	2000001a 	.word	0x2000001a
 80017e8:	08008058 	.word	0x08008058
 80017ec:	08008060 	.word	0x08008060

080017f0 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <Lcd_configure+0x140>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a49      	ldr	r2, [pc, #292]	; (8001930 <Lcd_configure+0x140>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <Lcd_configure+0x140>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b44      	ldr	r3, [pc, #272]	; (8001930 <Lcd_configure+0x140>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a43      	ldr	r2, [pc, #268]	; (8001930 <Lcd_configure+0x140>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <Lcd_configure+0x140>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <Lcd_configure+0x140>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <Lcd_configure+0x140>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <Lcd_configure+0x140>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 800184c:	2301      	movs	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	4834      	ldr	r0, [pc, #208]	; (8001934 <Lcd_configure+0x144>)
 8001864:	f001 fc5a 	bl	800311c <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 8001868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800186c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	482c      	ldr	r0, [pc, #176]	; (8001934 <Lcd_configure+0x144>)
 8001882:	f001 fc4b 	bl	800311c <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	4825      	ldr	r0, [pc, #148]	; (8001934 <Lcd_configure+0x144>)
 80018a0:	f001 fc3c 	bl	800311c <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018aa:	4822      	ldr	r0, [pc, #136]	; (8001934 <Lcd_configure+0x144>)
 80018ac:	f001 fdd1 	bl	8003452 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	481a      	ldr	r0, [pc, #104]	; (8001934 <Lcd_configure+0x144>)
 80018ca:	f001 fc27 	bl	800311c <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <Lcd_configure+0x144>)
 80018e8:	f001 fc18 	bl	800311c <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 80018ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <Lcd_configure+0x144>)
 8001906:	f001 fc09 	bl	800311c <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 800190a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <Lcd_configure+0x144>)
 8001924:	f001 fbfa 	bl	800311c <HAL_GPIO_Init>
	
}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	40010c00 	.word	0x40010c00

08001938 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	480b      	ldr	r0, [pc, #44]	; (8001974 <lcd_write_command+0x3c>)
 8001948:	f001 fd83 	bl	8003452 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2104      	movs	r1, #4
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f82f 	bl	80019b8 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2104      	movs	r1, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f827 	bl	80019b8 <lcd_write>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40010c00 	.word	0x40010c00

08001978 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 8001982:	2201      	movs	r2, #1
 8001984:	2101      	movs	r1, #1
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <lcd_write_data+0x3c>)
 8001988:	f001 fd63 	bl	8003452 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2104      	movs	r1, #4
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f80f 	bl	80019b8 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2104      	movs	r1, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f807 	bl	80019b8 <lcd_write>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e023      	b.n	8001a16 <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	fa42 f303 	asr.w	r3, r2, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <lcd_write+0x8c>)
 80019e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <lcd_write+0x90>)
 80019ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	f001 fd2e 	bl	8003452 <HAL_GPIO_WritePin>
 80019f6:	e00b      	b.n	8001a10 <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <lcd_write+0x8c>)
 80019fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <lcd_write+0x90>)
 8001a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f001 fd21 	bl	8003452 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	3301      	adds	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	79bb      	ldrb	r3, [r7, #6]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3d7      	bcc.n	80019ce <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <lcd_write+0x94>)
 8001a26:	f001 fd14 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f000 fe12 	bl	8002654 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <lcd_write+0x94>)
 8001a38:	f001 fd0b 	bl	8003452 <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a56:	f000 fd9b 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5a:	f000 f883 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f000 fa35 	bl	8001ecc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a62:	f000 fa09 	bl	8001e78 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a66:	f000 f90d 	bl	8001c84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a6a:	f000 f963 	bl	8001d34 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a6e:	f000 f9b5 	bl	8001ddc <MX_TIM4_Init>
  MX_ADC1_Init();
 8001a72:	f000 f8c9 	bl	8001c08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Lcd_Init();
 8001a76:	f7ff fdc5 	bl	8001604 <Lcd_Init>
  HAL_ADC_Start(&hadc1);
 8001a7a:	4831      	ldr	r0, [pc, #196]	; (8001b40 <main+0xf0>)
 8001a7c:	f000 fee6 	bl	800284c <HAL_ADC_Start>
  DS18B20_Init(&DS, &htim4, DS18b20_GPIO_Port , DS18b20_Pin);
 8001a80:	2302      	movs	r3, #2
 8001a82:	4a30      	ldr	r2, [pc, #192]	; (8001b44 <main+0xf4>)
 8001a84:	4930      	ldr	r1, [pc, #192]	; (8001b48 <main+0xf8>)
 8001a86:	4831      	ldr	r0, [pc, #196]	; (8001b4c <main+0xfc>)
 8001a88:	f7ff fbd1 	bl	800122e <DS18B20_Init>
  Motor_Init_PWM(&Motor, &htim2, TIM_CHANNEL_4, 2000, Motor.duty);
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <main+0x100>)
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a96:	220c      	movs	r2, #12
 8001a98:	492e      	ldr	r1, [pc, #184]	; (8001b54 <main+0x104>)
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <main+0x100>)
 8001a9c:	f7ff fc26 	bl	80012ec <Motor_Init_PWM>
  Motor_Init_Encoder(&Motor, &htim3, TIM_CHANNEL_1);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	492d      	ldr	r1, [pc, #180]	; (8001b58 <main+0x108>)
 8001aa4:	482a      	ldr	r0, [pc, #168]	; (8001b50 <main+0x100>)
 8001aa6:	f7ff fc3f 	bl	8001328 <Motor_Init_Encoder>
  Lcd_display_menu();
 8001aaa:	f7ff fe19 	bl	80016e0 <Lcd_display_menu>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp = (uint8_t)DS18B20_ReadTemp(&DS);
 8001aae:	4827      	ldr	r0, [pc, #156]	; (8001b4c <main+0xfc>)
 8001ab0:	f7ff fbd4 	bl	800125c <DS18B20_ReadTemp>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa64 	bl	8000f84 <__aeabi_f2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <main+0x10c>)
 8001ac2:	701a      	strb	r2, [r3, #0]
	  if(Motor.mode != MODE_MOTOR_NONE)
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <main+0x100>)
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d0f0      	beq.n	8001aae <main+0x5e>
	  {
		  switch (Motor.mode)
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <main+0x100>)
 8001ace:	7e1b      	ldrb	r3, [r3, #24]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d006      	beq.n	8001ae2 <main+0x92>
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	dc19      	bgt.n	8001b0c <main+0xbc>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d014      	beq.n	8001b06 <main+0xb6>
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d00a      	beq.n	8001af6 <main+0xa6>
				Motor.duty = Manual_to_Duty(&hadc1);
				break;
			case MODE_MOTOR_STOP:
				Motor.duty = DUTY_MIN;
			default:
				break;
 8001ae0:	e014      	b.n	8001b0c <main+0xbc>
				Motor.duty = Temp_to_Duty(temp);
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <main+0x10c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fd12 	bl	8001510 <Temp_to_Duty>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <main+0x100>)
 8001af2:	751a      	strb	r2, [r3, #20]
				break;
 8001af4:	e00b      	b.n	8001b0e <main+0xbe>
				Motor.duty = Manual_to_Duty(&hadc1);
 8001af6:	4812      	ldr	r0, [pc, #72]	; (8001b40 <main+0xf0>)
 8001af8:	f7ff fd16 	bl	8001528 <Manual_to_Duty>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <main+0x100>)
 8001b02:	751a      	strb	r2, [r3, #20]
				break;
 8001b04:	e003      	b.n	8001b0e <main+0xbe>
				Motor.duty = DUTY_MIN;
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <main+0x100>)
 8001b08:	220a      	movs	r2, #10
 8001b0a:	751a      	strb	r2, [r3, #20]
				break;
 8001b0c:	bf00      	nop
		  }
		  Motor_Set_Duty(&Motor, Motor.duty);
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <main+0x100>)
 8001b10:	7d1b      	ldrb	r3, [r3, #20]
 8001b12:	4619      	mov	r1, r3
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <main+0x100>)
 8001b16:	f7ff fc1b 	bl	8001350 <Motor_Set_Duty>
		  HAL_Delay(200);
 8001b1a:	20c8      	movs	r0, #200	; 0xc8
 8001b1c:	f000 fd9a 	bl	8002654 <HAL_Delay>
		  speed = Motor_Get_Speed(&Motor);
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <main+0x100>)
 8001b22:	f7ff fc7f 	bl	8001424 <Motor_Get_Speed>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <main+0x110>)
 8001b2c:	801a      	strh	r2, [r3, #0]
		  Lcd_display(temp, speed);
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <main+0x10c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <main+0x110>)
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fdf5 	bl	8001728 <Lcd_display>
	  temp = (uint8_t)DS18B20_ReadTemp(&DS);
 8001b3e:	e7b6      	b.n	8001aae <main+0x5e>
 8001b40:	20000240 	.word	0x20000240
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	20000300 	.word	0x20000300
 8001b4c:	2000038c 	.word	0x2000038c
 8001b50:	2000001c 	.word	0x2000001c
 8001b54:	20000270 	.word	0x20000270
 8001b58:	200002b8 	.word	0x200002b8
 8001b5c:	2000039c 	.word	0x2000039c
 8001b60:	2000039e 	.word	0x2000039e

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	; 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	2228      	movs	r2, #40	; 0x28
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fb68 	bl	8005248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b94:	2302      	movs	r3, #2
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fc9b 	bl	80034e4 <HAL_RCC_OscConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001bb4:	f000 fa5a 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb8:	230f      	movs	r3, #15
 8001bba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 ff07 	bl	80039e8 <HAL_RCC_ClockConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001be0:	f000 fa44 	bl	800206c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001be4:	2302      	movs	r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 f892 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bfa:	f000 fa37 	bl	800206c <Error_Handler>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3750      	adds	r7, #80	; 0x50
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c1a:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <MX_ADC1_Init+0x78>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c46:	f000 fd29 	bl	800269c <HAL_ADC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c50:	f000 fa0c 	bl	800206c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_ADC1_Init+0x74>)
 8001c66:	f000 ffb1 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c70:	f000 f9fc 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000240 	.word	0x20000240
 8001c80:	40012400 	.word	0x40012400

08001c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	615a      	str	r2, [r3, #20]
 8001ca4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001ca8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cbc:	2263      	movs	r2, #99	; 0x63
 8001cbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ccc:	4818      	ldr	r0, [pc, #96]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cce:	f002 fa33 	bl	8004138 <HAL_TIM_PWM_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001cd8:	f000 f9c8 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4811      	ldr	r0, [pc, #68]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001cec:	f003 f86c 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001cf6:	f000 f9b9 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfa:	2360      	movs	r3, #96	; 0x60
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4807      	ldr	r0, [pc, #28]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001d12:	f002 fc33 	bl	800457c <HAL_TIM_PWM_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d1c:	f000 f9a6 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d20:	4803      	ldr	r0, [pc, #12]	; (8001d30 <MX_TIM2_Init+0xac>)
 8001d22:	f000 fa8f 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000270 	.word	0x20000270

08001d34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fa80 	bl	8005248 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001d52:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <MX_TIM3_Init+0xa4>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001da2:	f002 fabb 	bl	800431c <HAL_TIM_Encoder_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001dac:	f000 f95e 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_TIM3_Init+0xa0>)
 8001dbe:	f003 f803 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001dc8:	f000 f950 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	3730      	adds	r7, #48	; 0x30
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200002b8 	.word	0x200002b8
 8001dd8:	40000400 	.word	0x40000400

08001ddc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <MX_TIM4_Init+0x98>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e00:	2247      	movs	r2, #71	; 0x47
 8001e02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e20:	f002 f8f0 	bl	8004004 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e2a:	f000 f91f 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e3c:	f002 fc5c 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e46:	f000 f911 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <MX_TIM4_Init+0x94>)
 8001e58:	f002 ffb6 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e62:	f000 f903 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000300 	.word	0x20000300
 8001e74:	40000800 	.word	0x40000800

08001e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f002 ffe8 	bl	8004e84 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 f8d7 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000348 	.word	0x20000348
 8001ec8:	40013800 	.word	0x40013800

08001ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a38      	ldr	r2, [pc, #224]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <MX_GPIO_Init+0x114>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	4827      	ldr	r0, [pc, #156]	; (8001fe4 <MX_GPIO_Init+0x118>)
 8001f48:	f001 fa83 	bl	8003452 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18b20_GPIO_Port, DS18b20_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4825      	ldr	r0, [pc, #148]	; (8001fe8 <MX_GPIO_Init+0x11c>)
 8001f52:	f001 fa7e 	bl	8003452 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	481d      	ldr	r0, [pc, #116]	; (8001fe4 <MX_GPIO_Init+0x118>)
 8001f70:	f001 f8d4 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : BYTEMP_Pin MANUAL_Pin STOP_Pin */
  GPIO_InitStruct.Pin = BYTEMP_Pin|MANUAL_Pin|STOP_Pin;
 8001f74:	2323      	movs	r3, #35	; 0x23
 8001f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f78:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_GPIO_Init+0x120>)
 8001f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <MX_GPIO_Init+0x124>)
 8001f88:	f001 f8c8 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18b20_Pin */
  GPIO_InitStruct.Pin = DS18b20_Pin;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18b20_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <MX_GPIO_Init+0x11c>)
 8001fa4:	f001 f8ba 	bl	800311c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2006      	movs	r0, #6
 8001fae:	f001 f878 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fb2:	2006      	movs	r0, #6
 8001fb4:	f001 f891 	bl	80030da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2007      	movs	r0, #7
 8001fbe:	f001 f870 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fc2:	2007      	movs	r0, #7
 8001fc4:	f001 f889 	bl	80030da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2017      	movs	r0, #23
 8001fce:	f001 f868 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fd2:	2017      	movs	r0, #23
 8001fd4:	f001 f881 	bl	80030da <HAL_NVIC_EnableIRQ>

}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	10210000 	.word	0x10210000
 8001ff0:	40010800 	.word	0x40010800

08001ff4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	480f      	ldr	r0, [pc, #60]	; (8002040 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002004:	f001 fa3d 	bl	8003482 <HAL_GPIO_TogglePin>
  switch (GPIO_Pin) {
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	2b20      	cmp	r3, #32
 800200c:	d00e      	beq.n	800202c <HAL_GPIO_EXTI_Callback+0x38>
 800200e:	2b20      	cmp	r3, #32
 8002010:	dc10      	bgt.n	8002034 <HAL_GPIO_EXTI_Callback+0x40>
 8002012:	2b01      	cmp	r3, #1
 8002014:	d002      	beq.n	800201c <HAL_GPIO_EXTI_Callback+0x28>
 8002016:	2b02      	cmp	r3, #2
 8002018:	d004      	beq.n	8002024 <HAL_GPIO_EXTI_Callback+0x30>
		break;
	case STOP_Pin:
		Motor.mode = MODE_MOTOR_STOP;
		break;
	default:
		break;
 800201a:	e00b      	b.n	8002034 <HAL_GPIO_EXTI_Callback+0x40>
		Motor.mode = MODE_MOTOR_TEMP;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_GPIO_EXTI_Callback+0x50>)
 800201e:	2202      	movs	r2, #2
 8002020:	761a      	strb	r2, [r3, #24]
		break;
 8002022:	e008      	b.n	8002036 <HAL_GPIO_EXTI_Callback+0x42>
		Motor.mode = MODE_MOTOR_MUNUAL;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_GPIO_EXTI_Callback+0x50>)
 8002026:	2201      	movs	r2, #1
 8002028:	761a      	strb	r2, [r3, #24]
		break;
 800202a:	e004      	b.n	8002036 <HAL_GPIO_EXTI_Callback+0x42>
		Motor.mode = MODE_MOTOR_STOP;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_GPIO_EXTI_Callback+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	761a      	strb	r2, [r3, #24]
		break;
 8002032:	e000      	b.n	8002036 <HAL_GPIO_EXTI_Callback+0x42>
		break;
 8002034:	bf00      	nop
}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40011000 	.word	0x40011000
 8002044:	2000001c 	.word	0x2000001c

08002048 <__io_putchar>:


int __io_putchar(int ch) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, 500);
 8002050:	1d39      	adds	r1, r7, #4
 8002052:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002056:	2201      	movs	r2, #1
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <__io_putchar+0x20>)
 800205a:	f002 ff60 	bl	8004f1e <HAL_UART_Transmit>

	return ch;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000348 	.word	0x20000348

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	e7fe      	b.n	8002074 <Error_Handler+0x8>
	...

08002078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_MspInit+0x5c>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <HAL_MspInit+0x5c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_MspInit+0x5c>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_MspInit+0x5c>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_MspInit+0x5c>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_MspInit+0x5c>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_MspInit+0x60>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_MspInit+0x60>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000

080020dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_ADC_MspInit+0x6c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d121      	bne.n	8002140 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_ADC_MspInit+0x70>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <HAL_ADC_MspInit+0x70>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_ADC_MspInit+0x70>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_ADC_MspInit+0x70>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <HAL_ADC_MspInit+0x70>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_ADC_MspInit+0x70>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_Manual_Pin;
 800212c:	2310      	movs	r3, #16
 800212e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002130:	2303      	movs	r3, #3
 8002132:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_Manual_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	4619      	mov	r1, r3
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <HAL_ADC_MspInit+0x74>)
 800213c:	f000 ffee 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012400 	.word	0x40012400
 800214c:	40021000 	.word	0x40021000
 8002150:	40010800 	.word	0x40010800

08002154 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d10b      	bne.n	800217e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_TIM_PWM_MspInit+0x34>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_TIM_PWM_MspInit+0x34>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_TIM_PWM_MspInit+0x34>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40021000 	.word	0x40021000

0800218c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a15      	ldr	r2, [pc, #84]	; (80021fc <HAL_TIM_Encoder_MspInit+0x70>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d123      	bne.n	80021f4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_TIM_Encoder_MspInit+0x74>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a13      	ldr	r2, [pc, #76]	; (8002200 <HAL_TIM_Encoder_MspInit+0x74>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	61d3      	str	r3, [r2, #28]
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_TIM_Encoder_MspInit+0x74>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_TIM_Encoder_MspInit+0x74>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_TIM_Encoder_MspInit+0x74>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_TIM_Encoder_MspInit+0x74>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TI1_Encoder_Pin|TI2_Encoder_Pin;
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <HAL_TIM_Encoder_MspInit+0x78>)
 80021f0:	f000 ff94 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40000400 	.word	0x40000400
 8002200:	40021000 	.word	0x40021000
 8002204:	40010800 	.word	0x40010800

08002208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_TIM_Base_MspInit+0x34>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10b      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_TIM_Base_MspInit+0x38>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_TIM_Base_MspInit+0x38>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_TIM_Base_MspInit+0x38>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40000800 	.word	0x40000800
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002262:	d117      	bne.n	8002294 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_TIM_MspPostInit+0x58>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_TIM_MspPostInit+0x58>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_TIM_MspPostInit+0x58>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 800227c:	2308      	movs	r3, #8
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2302      	movs	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <HAL_TIM_MspPostInit+0x5c>)
 8002290:	f000 ff44 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010800 	.word	0x40010800

080022a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_UART_MspInit+0x8c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d131      	bne.n	8002328 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_UART_MspInit+0x90>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a1a      	ldr	r2, [pc, #104]	; (8002334 <HAL_UART_MspInit+0x90>)
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_UART_MspInit+0x90>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_UART_MspInit+0x90>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_UART_MspInit+0x90>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_UART_MspInit+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4619      	mov	r1, r3
 8002308:	480b      	ldr	r0, [pc, #44]	; (8002338 <HAL_UART_MspInit+0x94>)
 800230a:	f000 ff07 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_UART_MspInit+0x94>)
 8002324:	f000 fefa 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40013800 	.word	0x40013800
 8002334:	40021000 	.word	0x40021000
 8002338:	40010800 	.word	0x40010800

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002382:	f000 f94b 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002386:	f000 fec2 	bl	800310e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}

0800238e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BYTEMP_Pin);
 8002392:	2001      	movs	r0, #1
 8002394:	f001 f88e 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MANUAL_Pin);
 80023a0:	2002      	movs	r0, #2
 80023a2:	f001 f887 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_Pin);
 80023ae:	2020      	movs	r0, #32
 80023b0:	f001 f880 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <_kill>:

int _kill(int pid, int sig)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023d0:	f002 ff10 	bl	80051f4 <__errno>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2216      	movs	r2, #22
 80023d8:	601a      	str	r2, [r3, #0]
	return -1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_exit>:

void _exit (int status)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ee:	f04f 31ff 	mov.w	r1, #4294967295
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffe7 	bl	80023c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023f8:	e7fe      	b.n	80023f8 <_exit+0x12>

080023fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e00a      	b.n	8002422 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800240c:	f3af 8000 	nop.w
 8002410:	4601      	mov	r1, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbf0      	blt.n	800240c <_read+0x12>
	}

return len;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e009      	b.n	800245a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fdfa 	bl	8002048 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	dbf1      	blt.n	8002446 <_write+0x12>
	}
	return len;
 8002462:	687b      	ldr	r3, [r7, #4]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_close>:

int _close(int file)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002492:	605a      	str	r2, [r3, #4]
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <_isatty>:

int _isatty(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024fc:	f002 fe7a 	bl	80051f4 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20005000 	.word	0x20005000
 800252c:	00000400 	.word	0x00000400
 8002530:	200003a0 	.word	0x200003a0
 8002534:	200003b8 	.word	0x200003b8

08002538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <LoopFillZerobss+0x22>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800256a:	f7ff ffe5 	bl	8002538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800256e:	f002 fe47 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002572:	f7ff fa6d 	bl	8001a50 <main>
  bx lr
 8002576:	4770      	bx	lr
  ldr r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800257c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002580:	0800847c 	.word	0x0800847c
  ldr r2, =_sbss
 8002584:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002588:	200003b8 	.word	0x200003b8

0800258c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_2_IRQHandler>
	...

08002590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_Init+0x28>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_Init+0x28>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 fd73 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	200f      	movs	r0, #15
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fd64 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fd8b 	bl	80030f6 <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 fd53 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000038 	.word	0x20000038
 8002614:	20000040 	.word	0x20000040
 8002618:	2000003c 	.word	0x2000003c

0800261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_IncTick+0x1c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x20>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <HAL_IncTick+0x20>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000040 	.word	0x20000040
 800263c:	200003a4 	.word	0x200003a4

08002640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_GetTick+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	200003a4 	.word	0x200003a4

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff fff0 	bl	8002640 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_Delay+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffe0 	bl	8002640 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000040 	.word	0x20000040

0800269c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0be      	b.n	800283c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fcfe 	bl	80020dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fbc5 	bl	8002e70 <ADC_ConversionStop_Disable>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 8099 	bne.w	800282a <HAL_ADC_Init+0x18e>
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8095 	bne.w	800282a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002708:	f023 0302 	bic.w	r3, r3, #2
 800270c:	f043 0202 	orr.w	r2, r3, #2
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800271c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7b1b      	ldrb	r3, [r3, #12]
 8002722:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002724:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4313      	orrs	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002734:	d003      	beq.n	800273e <HAL_ADC_Init+0xa2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_ADC_Init+0xa8>
 800273e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002742:	e000      	b.n	8002746 <HAL_ADC_Init+0xaa>
 8002744:	2300      	movs	r3, #0
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7d1b      	ldrb	r3, [r3, #20]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d119      	bne.n	8002788 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7b1b      	ldrb	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	3b01      	subs	r3, #1
 8002762:	035a      	lsls	r2, r3, #13
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e00b      	b.n	8002788 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_ADC_Init+0x1a8>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b8:	d003      	beq.n	80027c2 <HAL_ADC_Init+0x126>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d104      	bne.n	80027cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	430a      	orrs	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b18      	ldr	r3, [pc, #96]	; (8002848 <HAL_ADC_Init+0x1ac>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10b      	bne.n	8002808 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002806:	e018      	b.n	800283a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f023 0312 	bic.w	r3, r3, #18
 8002810:	f043 0210 	orr.w	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002828:	e007      	b.n	800283a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	f043 0210 	orr.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	ffe1f7fd 	.word	0xffe1f7fd
 8002848:	ff1f0efe 	.word	0xff1f0efe

0800284c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADC_Start+0x1a>
 8002862:	2302      	movs	r3, #2
 8002864:	e098      	b.n	8002998 <HAL_ADC_Start+0x14c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 faa4 	bl	8002dbc <ADC_Enable>
 8002874:	4603      	mov	r3, r0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 8087 	bne.w	800298e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a41      	ldr	r2, [pc, #260]	; (80029a0 <HAL_ADC_Start+0x154>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d105      	bne.n	80028aa <HAL_ADC_Start+0x5e>
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_ADC_Start+0x158>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d026      	beq.n	8002912 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028d4:	e01d      	b.n	8002912 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <HAL_ADC_Start+0x158>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_ADC_Start+0xaa>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a2b      	ldr	r2, [pc, #172]	; (80029a0 <HAL_ADC_Start+0x154>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10d      	bne.n	8002912 <HAL_ADC_Start+0xc6>
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_ADC_Start+0x158>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800290a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f023 0206 	bic.w	r2, r3, #6
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
 800292a:	e002      	b.n	8002932 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f06f 0202 	mvn.w	r2, #2
 8002942:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800294e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002952:	d113      	bne.n	800297c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_ADC_Start+0x154>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d105      	bne.n	800296a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_ADC_Start+0x158>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	e00c      	b.n	8002996 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e003      	b.n	8002996 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40012800 	.word	0x40012800
 80029a4:	40012400 	.word	0x40012400

080029a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80029be:	f7ff fe3f 	bl	8002640 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0d3      	b.n	8002b92 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d131      	bne.n	8002a5c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d12a      	bne.n	8002a5c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a06:	e021      	b.n	8002a4c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d01d      	beq.n	8002a4c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x7e>
 8002a16:	f7ff fe13 	bl	8002640 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d212      	bcs.n	8002a4c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0a2      	b.n	8002b92 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0d6      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a5a:	e070      	b.n	8002b3e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a5c:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_ADC_PollForConversion+0x1f4>)
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	2002      	movs	r0, #2
 8002a62:	f001 fa0f 	bl	8003e84 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a66:	4603      	mov	r3, r0
 8002a68:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <HAL_ADC_PollForConversion+0x1f8>)
 8002a74:	400b      	ands	r3, r1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_ADC_PollForConversion+0x104>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68d9      	ldr	r1, [r3, #12]
 8002a80:	4b48      	ldr	r3, [pc, #288]	; (8002ba4 <HAL_ADC_PollForConversion+0x1fc>)
 8002a82:	400b      	ands	r3, r1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <HAL_ADC_PollForConversion+0x104>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6919      	ldr	r1, [r3, #16]
 8002a8e:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_ADC_PollForConversion+0x200>)
 8002a90:	400b      	ands	r3, r1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x100>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68d9      	ldr	r1, [r3, #12]
 8002a9c:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_ADC_PollForConversion+0x204>)
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x100>
 8002aa4:	2314      	movs	r3, #20
 8002aa6:	e020      	b.n	8002aea <HAL_ADC_PollForConversion+0x142>
 8002aa8:	2329      	movs	r3, #41	; 0x29
 8002aaa:	e01e      	b.n	8002aea <HAL_ADC_PollForConversion+0x142>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6919      	ldr	r1, [r3, #16]
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_ADC_PollForConversion+0x200>)
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x120>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68d9      	ldr	r1, [r3, #12]
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_ADC_PollForConversion+0x204>)
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x13c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6919      	ldr	r1, [r3, #16]
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_ADC_PollForConversion+0x208>)
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0x140>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_ADC_PollForConversion+0x208>)
 8002ade:	400b      	ands	r3, r1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0x140>
 8002ae4:	2354      	movs	r3, #84	; 0x54
 8002ae6:	e000      	b.n	8002aea <HAL_ADC_PollForConversion+0x142>
 8002ae8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002af0:	e021      	b.n	8002b36 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d01a      	beq.n	8002b30 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x168>
 8002b00:	f7ff fd9e 	bl	8002640 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d20f      	bcs.n	8002b30 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d90b      	bls.n	8002b30 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e030      	b.n	8002b92 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d8d9      	bhi.n	8002af2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0212 	mvn.w	r2, #18
 8002b46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b62:	d115      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000038 	.word	0x20000038
 8002ba0:	24924924 	.word	0x24924924
 8002ba4:	00924924 	.word	0x00924924
 8002ba8:	12492492 	.word	0x12492492
 8002bac:	00492492 	.word	0x00492492
 8002bb0:	00249249 	.word	0x00249249

08002bb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x20>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e0dc      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x1da>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d81c      	bhi.n	8002c36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b05      	subs	r3, #5
 8002c0e:	221f      	movs	r2, #31
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	4019      	ands	r1, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	3b05      	subs	r3, #5
 8002c28:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34
 8002c34:	e03c      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d81c      	bhi.n	8002c78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b23      	subs	r3, #35	; 0x23
 8002c50:	221f      	movs	r2, #31
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4019      	ands	r1, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	3b23      	subs	r3, #35	; 0x23
 8002c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
 8002c76:	e01b      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	3b41      	subs	r3, #65	; 0x41
 8002c8a:	221f      	movs	r2, #31
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	4019      	ands	r1, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b41      	subs	r3, #65	; 0x41
 8002ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d91c      	bls.n	8002cf2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68d9      	ldr	r1, [r3, #12]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b1e      	subs	r3, #30
 8002cca:	2207      	movs	r2, #7
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4019      	ands	r1, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6898      	ldr	r0, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b1e      	subs	r3, #30
 8002ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e019      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6919      	ldr	r1, [r3, #16]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4019      	ands	r1, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6898      	ldr	r0, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d003      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d32:	2b11      	cmp	r3, #17
 8002d34:	d132      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d125      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d126      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d11a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d66:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	0c9a      	lsrs	r2, r3, #18
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d7c:	e002      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f9      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x1b2>
 8002d8a:	e007      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40012400 	.word	0x40012400
 8002db4:	20000038 	.word	0x20000038
 8002db8:	431bde83 	.word	0x431bde83

08002dbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d040      	beq.n	8002e5c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <ADC_Enable+0xac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <ADC_Enable+0xb0>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	0c9b      	lsrs	r3, r3, #18
 8002df6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002df8:	e002      	b.n	8002e00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f9      	bne.n	8002dfa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e06:	f7ff fc1b 	bl	8002640 <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e0c:	e01f      	b.n	8002e4e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e0e:	f7ff fc17 	bl	8002640 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d918      	bls.n	8002e4e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d011      	beq.n	8002e4e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e007      	b.n	8002e5e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d1d8      	bne.n	8002e0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000038 	.word	0x20000038
 8002e6c:	431bde83 	.word	0x431bde83

08002e70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d12e      	bne.n	8002ee8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e9a:	f7ff fbd1 	bl	8002640 <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ea0:	e01b      	b.n	8002eda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ea2:	f7ff fbcd 	bl	8002640 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d914      	bls.n	8002eda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d10d      	bne.n	8002eda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d0dc      	beq.n	8002ea2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4906      	ldr	r1, [pc, #24]	; (8002f8c <__NVIC_EnableIRQ+0x34>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff90 	bl	8002f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff2d 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff42 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff90 	bl	8002fe4 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5f 	bl	8002f90 <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff35 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffa2 	bl	8003048 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003112:	f7fe f9a9 	bl	8001468 <HAL_SYSTICK_Callback>
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b08b      	sub	sp, #44	; 0x2c
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	e169      	b.n	8003404 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003130:	2201      	movs	r2, #1
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	429a      	cmp	r2, r3
 800314a:	f040 8158 	bne.w	80033fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a9a      	ldr	r2, [pc, #616]	; (80033bc <HAL_GPIO_Init+0x2a0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d05e      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003158:	4a98      	ldr	r2, [pc, #608]	; (80033bc <HAL_GPIO_Init+0x2a0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d875      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 800315e:	4a98      	ldr	r2, [pc, #608]	; (80033c0 <HAL_GPIO_Init+0x2a4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d058      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003164:	4a96      	ldr	r2, [pc, #600]	; (80033c0 <HAL_GPIO_Init+0x2a4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d86f      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 800316a:	4a96      	ldr	r2, [pc, #600]	; (80033c4 <HAL_GPIO_Init+0x2a8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d052      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003170:	4a94      	ldr	r2, [pc, #592]	; (80033c4 <HAL_GPIO_Init+0x2a8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d869      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 8003176:	4a94      	ldr	r2, [pc, #592]	; (80033c8 <HAL_GPIO_Init+0x2ac>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04c      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 800317c:	4a92      	ldr	r2, [pc, #584]	; (80033c8 <HAL_GPIO_Init+0x2ac>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d863      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 8003182:	4a92      	ldr	r2, [pc, #584]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d046      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003188:	4a90      	ldr	r2, [pc, #576]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d85d      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 800318e:	2b12      	cmp	r3, #18
 8003190:	d82a      	bhi.n	80031e8 <HAL_GPIO_Init+0xcc>
 8003192:	2b12      	cmp	r3, #18
 8003194:	d859      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_GPIO_Init+0x80>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	08003217 	.word	0x08003217
 80031a0:	080031f1 	.word	0x080031f1
 80031a4:	08003203 	.word	0x08003203
 80031a8:	08003245 	.word	0x08003245
 80031ac:	0800324b 	.word	0x0800324b
 80031b0:	0800324b 	.word	0x0800324b
 80031b4:	0800324b 	.word	0x0800324b
 80031b8:	0800324b 	.word	0x0800324b
 80031bc:	0800324b 	.word	0x0800324b
 80031c0:	0800324b 	.word	0x0800324b
 80031c4:	0800324b 	.word	0x0800324b
 80031c8:	0800324b 	.word	0x0800324b
 80031cc:	0800324b 	.word	0x0800324b
 80031d0:	0800324b 	.word	0x0800324b
 80031d4:	0800324b 	.word	0x0800324b
 80031d8:	0800324b 	.word	0x0800324b
 80031dc:	0800324b 	.word	0x0800324b
 80031e0:	080031f9 	.word	0x080031f9
 80031e4:	0800320d 	.word	0x0800320d
 80031e8:	4a79      	ldr	r2, [pc, #484]	; (80033d0 <HAL_GPIO_Init+0x2b4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ee:	e02c      	b.n	800324a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	623b      	str	r3, [r7, #32]
          break;
 80031f6:	e029      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	3304      	adds	r3, #4
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e024      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	3308      	adds	r3, #8
 8003208:	623b      	str	r3, [r7, #32]
          break;
 800320a:	e01f      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	330c      	adds	r3, #12
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e01a      	b.n	800324c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800321e:	2304      	movs	r3, #4
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e013      	b.n	800324c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800322c:	2308      	movs	r3, #8
 800322e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	611a      	str	r2, [r3, #16]
          break;
 8003236:	e009      	b.n	800324c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003238:	2308      	movs	r3, #8
 800323a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	615a      	str	r2, [r3, #20]
          break;
 8003242:	e003      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
          break;
 8003248:	e000      	b.n	800324c <HAL_GPIO_Init+0x130>
          break;
 800324a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2bff      	cmp	r3, #255	; 0xff
 8003250:	d801      	bhi.n	8003256 <HAL_GPIO_Init+0x13a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	e001      	b.n	800325a <HAL_GPIO_Init+0x13e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d802      	bhi.n	8003268 <HAL_GPIO_Init+0x14c>
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x152>
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	3b08      	subs	r3, #8
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	210f      	movs	r1, #15
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	6a39      	ldr	r1, [r7, #32]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	431a      	orrs	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80b1 	beq.w	80033fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800329c:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_GPIO_Init+0x2b8>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <HAL_GPIO_Init+0x2b8>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_GPIO_Init+0x2b8>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032b4:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <HAL_GPIO_Init+0x2c0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_GPIO_Init+0x1ec>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <HAL_GPIO_Init+0x2c4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00d      	beq.n	8003304 <HAL_GPIO_Init+0x1e8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3e      	ldr	r2, [pc, #248]	; (80033e4 <HAL_GPIO_Init+0x2c8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <HAL_GPIO_Init+0x1e4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3d      	ldr	r2, [pc, #244]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_GPIO_Init+0x1e0>
 80032f8:	2303      	movs	r3, #3
 80032fa:	e006      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e004      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 8003300:	2302      	movs	r3, #2
 8003302:	e002      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 8003308:	2300      	movs	r3, #0
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	f002 0203 	and.w	r2, r2, #3
 8003310:	0092      	lsls	r2, r2, #2
 8003312:	4093      	lsls	r3, r2
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800331a:	492f      	ldr	r1, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	3302      	adds	r3, #2
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d006      	beq.n	8003342 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	492c      	ldr	r1, [pc, #176]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	43db      	mvns	r3, r3
 800334a:	4928      	ldr	r1, [pc, #160]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800334c:	4013      	ands	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4922      	ldr	r1, [pc, #136]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	43db      	mvns	r3, r3
 8003372:	491e      	ldr	r1, [pc, #120]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003374:	4013      	ands	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4918      	ldr	r1, [pc, #96]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
 8003390:	e006      	b.n	80033a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	43db      	mvns	r3, r3
 800339a:	4914      	ldr	r1, [pc, #80]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800339c:	4013      	ands	r3, r2
 800339e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d021      	beq.n	80033f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e021      	b.n	80033fe <HAL_GPIO_Init+0x2e2>
 80033ba:	bf00      	nop
 80033bc:	10320000 	.word	0x10320000
 80033c0:	10310000 	.word	0x10310000
 80033c4:	10220000 	.word	0x10220000
 80033c8:	10210000 	.word	0x10210000
 80033cc:	10120000 	.word	0x10120000
 80033d0:	10110000 	.word	0x10110000
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40010800 	.word	0x40010800
 80033e0:	40010c00 	.word	0x40010c00
 80033e4:	40011000 	.word	0x40011000
 80033e8:	40011400 	.word	0x40011400
 80033ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	4909      	ldr	r1, [pc, #36]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	3301      	adds	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	f47f ae8e 	bne.w	8003130 <HAL_GPIO_Init+0x14>
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	372c      	adds	r7, #44	; 0x2c
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	40010400 	.word	0x40010400

08003424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	807b      	strh	r3, [r7, #2]
 800345e:	4613      	mov	r3, r2
 8003460:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003462:	787b      	ldrb	r3, [r7, #1]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800346e:	e003      	b.n	8003478 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	041a      	lsls	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	611a      	str	r2, [r3, #16]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	041a      	lsls	r2, r3, #16
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43d9      	mvns	r1, r3
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	400b      	ands	r3, r1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ca:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fd8e 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e272      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8087 	beq.w	8003612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003504:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b04      	cmp	r3, #4
 800350e:	d00c      	beq.n	800352a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003510:	4b8f      	ldr	r3, [pc, #572]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d112      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d10b      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4b89      	ldr	r3, [pc, #548]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d06c      	beq.n	8003610 <HAL_RCC_OscConfig+0x12c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d168      	bne.n	8003610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e24c      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x76>
 800354c:	4b80      	ldr	r3, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a7f      	ldr	r2, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e02e      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a77      	ldr	r2, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0xbc>
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a71      	ldr	r2, [pc, #452]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6e      	ldr	r2, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 80035a0:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a67      	ldr	r2, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7ff f83e 	bl	8002640 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7ff f83a 	bl	8002640 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e200      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe4>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7ff f82a 	bl	8002640 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7ff f826 	bl	8002640 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1ec      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x10c>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
 8003636:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1c0      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4939      	ldr	r1, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe ffdf 	bl	8002640 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe ffdb 	bl	8002640 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1a1      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe ffbe 	bl	8002640 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe ffba 	bl	8002640 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e180      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03a      	beq.n	8003768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe ff9e 	bl	8002640 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe ff9a 	bl	8002640 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e160      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003726:	2001      	movs	r0, #1
 8003728:	f000 fad8 	bl	8003cdc <RCC_Delay>
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fe ff84 	bl	8002640 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373a:	e00f      	b.n	800375c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe ff80 	bl	8002640 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d908      	bls.n	800375c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e146      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	42420000 	.word	0x42420000
 8003758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e9      	bne.n	800373c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a6 	beq.w	80038c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7e      	ldr	r2, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe ff41 	bl	8002640 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe ff3d 	bl	8002640 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e103      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b75      	ldr	r3, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037e8:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	e02d      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x334>
 80037fe:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6213      	str	r3, [r2, #32]
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a66      	ldr	r2, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x356>
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a60      	ldr	r2, [pc, #384]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6213      	str	r3, [r2, #32]
 800382c:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a5d      	ldr	r2, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a5a      	ldr	r2, [pc, #360]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fef1 	bl	8002640 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe feed 	bl	8002640 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0b1      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x37e>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe fedb 	bl	8002640 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe fed7 	bl	8002640 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e09b      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8087 	beq.w	80039da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d061      	beq.n	800399c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d146      	bne.n	800396e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe feab 	bl	8002640 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe fea7 	bl	8002640 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e06d      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4921      	ldr	r1, [pc, #132]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a19      	ldr	r1, [r3, #32]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	430b      	orrs	r3, r1
 800393a:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x4cc>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe fe7b 	bl	8002640 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe fe77 	bl	8002640 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e03d      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
 800396c:	e035      	b.n	80039da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_OscConfig+0x4cc>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fe64 	bl	8002640 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fe60 	bl	8002640 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e026      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x498>
 800399a:	e01e      	b.n	80039da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e019      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
 80039b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x500>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000

080039e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0d0      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4965      	ldr	r1, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b8      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d040      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e07f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e073      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4936      	ldr	r1, [pc, #216]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe fdb2 	bl	8002640 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fe fdae 	bl	8002640 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e053      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d210      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4922      	ldr	r1, [pc, #136]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b76:	f000 f821 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fd10 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	08008084 	.word	0x08008084
 8003bb4:	20000038 	.word	0x20000038
 8003bb8:	2000003c 	.word	0x2000003c

08003bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b490      	push	{r4, r7}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bc2:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xac>)
 8003bc4:	1d3c      	adds	r4, r7, #4
 8003bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bcc:	f240 2301 	movw	r3, #513	; 0x201
 8003bd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x40>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x46>
 8003bfa:	e02b      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bfe:	623b      	str	r3, [r7, #32]
      break;
 8003c00:	e02b      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	0c9b      	lsrs	r3, r3, #18
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3328      	adds	r3, #40	; 0x28
 8003c0c:	443b      	add	r3, r7
 8003c0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	0c5b      	lsrs	r3, r3, #17
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	3328      	adds	r3, #40	; 0x28
 8003c2a:	443b      	add	r3, r7
 8003c2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c36:	fb03 f202 	mul.w	r2, r3, r2
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e004      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	623b      	str	r3, [r7, #32]
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c56:	623b      	str	r3, [r7, #32]
      break;
 8003c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc90      	pop	{r4, r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	08008064 	.word	0x08008064
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	007a1200 	.word	0x007a1200
 8003c74:	003d0900 	.word	0x003d0900

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000038 	.word	0x20000038

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff2 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08008094 	.word	0x08008094

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cb8:	f7ff ffde 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	08008094 	.word	0x08008094

08003cdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <RCC_Delay+0x34>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <RCC_Delay+0x38>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a5b      	lsrs	r3, r3, #9
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf8:	bf00      	nop
  }
  while (Delay --);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f9      	bne.n	8003cf8 <RCC_Delay+0x1c>
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	20000038 	.word	0x20000038
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d07d      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	61d3      	str	r3, [r2, #28]
 8003d50:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d118      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d78:	f7fe fc62 	bl	8002640 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	e008      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d80:	f7fe fc5e 	bl	8002640 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e06d      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d9e:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d027      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dcc:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd2:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d014      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fe fc2d 	bl	8002640 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe fc29 	bl	8002640 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e036      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4917      	ldr	r1, [pc, #92]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	490b      	ldr	r1, [pc, #44]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4904      	ldr	r1, [pc, #16]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42420440 	.word	0x42420440

08003e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b08d      	sub	sp, #52	; 0x34
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e8c:	4b58      	ldr	r3, [pc, #352]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003e8e:	f107 040c 	add.w	r4, r7, #12
 8003e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e98:	f240 2301 	movw	r3, #513	; 0x201
 8003e9c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	f200 808e 	bhi.w	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d049      	beq.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d079      	beq.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ecc:	e086      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ed4:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d07f      	beq.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	0c9b      	lsrs	r3, r3, #18
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	3330      	adds	r3, #48	; 0x30
 8003eea:	443b      	add	r3, r7
 8003eec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ef0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003efc:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0c5b      	lsrs	r3, r3, #17
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	3330      	adds	r3, #48	; 0x30
 8003f08:	443b      	add	r3, r7
 8003f0a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f1a:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f36:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f42:	d102      	bne.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f48:	e04a      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f58:	e042      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003f5a:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	d108      	bne.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7c:	e01f      	b.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f88:	d109      	bne.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003f96:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa8:	d11c      	bne.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003fb6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fbc:	e012      	b.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003fbe:	e011      	b.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fc0:	f7ff fe78 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0b9b      	lsrs	r3, r3, #14
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fda:	e004      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003fe4:	bf00      	nop
    }
  }
  return (frequency);
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3734      	adds	r7, #52	; 0x34
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	08008074 	.word	0x08008074
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	007a1200 	.word	0x007a1200
 8003ffc:	003d0900 	.word	0x003d0900
 8004000:	aaaaaaab 	.word	0xaaaaaaab

08004004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e041      	b.n	800409a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe f8ec 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f000 fc1c 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e032      	b.n	8004122 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_TIM_Base_Start+0x88>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <HAL_TIM_Base_Start+0x48>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d6:	d009      	beq.n	80040ec <HAL_TIM_Base_Start+0x48>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a14      	ldr	r2, [pc, #80]	; (8004130 <HAL_TIM_Base_Start+0x8c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <HAL_TIM_Base_Start+0x48>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <HAL_TIM_Base_Start+0x90>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d111      	bne.n	8004110 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d010      	beq.n	8004120 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	e007      	b.n	8004120 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800

08004138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e041      	b.n	80041ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fd fff8 	bl	8002154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fb82 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_TIM_PWM_Start+0x24>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e022      	b.n	8004242 <HAL_TIM_PWM_Start+0x6a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d109      	bne.n	8004216 <HAL_TIM_PWM_Start+0x3e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e015      	b.n	8004242 <HAL_TIM_PWM_Start+0x6a>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d109      	bne.n	8004230 <HAL_TIM_PWM_Start+0x58>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e008      	b.n	8004242 <HAL_TIM_PWM_Start+0x6a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e05e      	b.n	8004308 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0x82>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004258:	e013      	b.n	8004282 <HAL_TIM_PWM_Start+0xaa>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0x92>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	e00b      	b.n	8004282 <HAL_TIM_PWM_Start+0xaa>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	e003      	b.n	8004282 <HAL_TIM_PWM_Start+0xaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fd78 	bl	8004d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <HAL_TIM_PWM_Start+0x138>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d107      	bne.n	80042aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_TIM_PWM_Start+0x138>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIM_PWM_Start+0xfa>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_PWM_Start+0xfa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a14      	ldr	r2, [pc, #80]	; (8004314 <HAL_TIM_PWM_Start+0x13c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_PWM_Start+0xfa>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a12      	ldr	r2, [pc, #72]	; (8004318 <HAL_TIM_PWM_Start+0x140>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d010      	beq.n	8004306 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	e007      	b.n	8004306 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800

0800431c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e093      	b.n	8004458 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7fd ff21 	bl	800218c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004360:	f023 0307 	bic.w	r3, r3, #7
 8004364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 fa85 	bl	8004880 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4313      	orrs	r3, r2
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043bc:	f023 030c 	bic.w	r3, r3, #12
 80043c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	4313      	orrs	r3, r2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	011a      	lsls	r2, r3, #4
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	031b      	lsls	r3, r3, #12
 80043ec:	4313      	orrs	r3, r2
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4313      	orrs	r3, r2
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004470:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004478:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004480:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004488:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d110      	bne.n	80044b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004496:	7b7b      	ldrb	r3, [r7, #13]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d001      	beq.n	80044a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e069      	b.n	8004574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b0:	e031      	b.n	8004516 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d110      	bne.n	80044da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044b8:	7bbb      	ldrb	r3, [r7, #14]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044be:	7b3b      	ldrb	r3, [r7, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d001      	beq.n	80044c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e055      	b.n	8004574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d8:	e01d      	b.n	8004516 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d108      	bne.n	80044f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e0:	7bbb      	ldrb	r3, [r7, #14]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d105      	bne.n	80044f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e6:	7b7b      	ldrb	r3, [r7, #13]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d102      	bne.n	80044f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044ec:	7b3b      	ldrb	r3, [r7, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e03e      	b.n	8004574 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_TIM_Encoder_Start+0xc4>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d008      	beq.n	8004534 <HAL_TIM_Encoder_Start+0xd4>
 8004522:	e00f      	b.n	8004544 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fc27 	bl	8004d80 <TIM_CCxChannelCmd>
      break;
 8004532:	e016      	b.n	8004562 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	2104      	movs	r1, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fc1f 	bl	8004d80 <TIM_CCxChannelCmd>
      break;
 8004542:	e00e      	b.n	8004562 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2201      	movs	r2, #1
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fc17 	bl	8004d80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	2104      	movs	r1, #4
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fc10 	bl	8004d80 <TIM_CCxChannelCmd>
      break;
 8004560:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e0ac      	b.n	80046f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	f200 809f 	bhi.w	80046e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080046e5 	.word	0x080046e5
 80045b4:	080046e5 	.word	0x080046e5
 80045b8:	080046e5 	.word	0x080046e5
 80045bc:	08004621 	.word	0x08004621
 80045c0:	080046e5 	.word	0x080046e5
 80045c4:	080046e5 	.word	0x080046e5
 80045c8:	080046e5 	.word	0x080046e5
 80045cc:	08004663 	.word	0x08004663
 80045d0:	080046e5 	.word	0x080046e5
 80045d4:	080046e5 	.word	0x080046e5
 80045d8:	080046e5 	.word	0x080046e5
 80045dc:	080046a3 	.word	0x080046a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f9ac 	bl	8004944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6999      	ldr	r1, [r3, #24]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	619a      	str	r2, [r3, #24]
      break;
 800461e:	e062      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f9f2 	bl	8004a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6999      	ldr	r1, [r3, #24]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	021a      	lsls	r2, r3, #8
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	619a      	str	r2, [r3, #24]
      break;
 8004660:	e041      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fa3b 	bl	8004ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0208 	orr.w	r2, r2, #8
 800467c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0204 	bic.w	r2, r2, #4
 800468c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69d9      	ldr	r1, [r3, #28]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	61da      	str	r2, [r3, #28]
      break;
 80046a0:	e021      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fa85 	bl	8004bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69d9      	ldr	r1, [r3, #28]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	021a      	lsls	r2, r3, #8
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	61da      	str	r2, [r3, #28]
      break;
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_ConfigClockSource+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e0b3      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x180>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd0>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	f000 8085 	beq.w	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa2>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x116>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b50      	cmp	r3, #80	; 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xf6>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x136>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x156>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x156>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x156>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f000 faca 	bl	8004d42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04e      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 fab3 	bl	8004d42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa2a 	bl	8004c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	; 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa81 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 800480c:	e02b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 fa48 	bl	8004cb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa71 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 800482c:	e01b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 fa0a 	bl	8004c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fa61 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 800484c:	e00b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fa58 	bl	8004d0e <TIM_ITRx_SetConfig>
        break;
 800485e:	e002      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004864:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a29      	ldr	r2, [pc, #164]	; (8004938 <TIM_Base_SetConfig+0xb8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00b      	beq.n	80048b0 <TIM_Base_SetConfig+0x30>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d007      	beq.n	80048b0 <TIM_Base_SetConfig+0x30>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a26      	ldr	r2, [pc, #152]	; (800493c <TIM_Base_SetConfig+0xbc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_Base_SetConfig+0x30>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <TIM_Base_SetConfig+0xc0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d108      	bne.n	80048c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <TIM_Base_SetConfig+0xb8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_Base_SetConfig+0x62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d007      	beq.n	80048e2 <TIM_Base_SetConfig+0x62>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <TIM_Base_SetConfig+0xbc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_Base_SetConfig+0x62>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <TIM_Base_SetConfig+0xc0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d108      	bne.n	80048f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <TIM_Base_SetConfig+0xb8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800

08004944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f023 0201 	bic.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 0302 	bic.w	r3, r3, #2
 800498c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <TIM_OC1_SetConfig+0xc8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10c      	bne.n	80049ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0308 	bic.w	r3, r3, #8
 80049a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <TIM_OC1_SetConfig+0xc8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d111      	bne.n	80049e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40012c00 	.word	0x40012c00

08004a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <TIM_OC2_SetConfig+0xd0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10d      	bne.n	8004a8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <TIM_OC2_SetConfig+0xd0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d113      	bne.n	8004abc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00

08004ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <TIM_OC3_SetConfig+0xd0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10d      	bne.n	8004b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <TIM_OC3_SetConfig+0xd0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d113      	bne.n	8004b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00

08004bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <TIM_OC4_SetConfig+0x98>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d109      	bne.n	8004c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	40012c00 	.word	0x40012c00

08004c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f023 0201 	bic.w	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 030a 	bic.w	r3, r3, #10
 8004c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f023 0210 	bic.w	r2, r3, #16
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	031b      	lsls	r3, r3, #12
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f043 0307 	orr.w	r3, r3, #7
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	609a      	str	r2, [r3, #8]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	2201      	movs	r2, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	401a      	ands	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e046      	b.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10c      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800

08004e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e03f      	b.n	8004f16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd f9fa 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f905 	bl	80050d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b08a      	sub	sp, #40	; 0x28
 8004f22:	af02      	add	r7, sp, #8
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d17c      	bne.n	8005038 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_Transmit+0x2c>
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e075      	b.n	800503a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_UART_Transmit+0x3e>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e06e      	b.n	800503a <HAL_UART_Transmit+0x11c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f72:	f7fd fb65 	bl	8002640 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_UART_Transmit+0x82>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e003      	b.n	8004fa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fb0:	e02a      	b.n	8005008 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f840 	bl	8005042 <UART_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e036      	b.n	800503a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e007      	b.n	8004ffa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cf      	bne.n	8004fb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	2140      	movs	r1, #64	; 0x40
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f810 	bl	8005042 <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e006      	b.n	800503a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005052:	e02c      	b.n	80050ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d028      	beq.n	80050ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <UART_WaitOnFlagUntilTimeout+0x30>
 8005062:	f7fd faed 	bl	8002640 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	429a      	cmp	r2, r3
 8005070:	d21d      	bcs.n	80050ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005080:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e00f      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d0c3      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005112:	f023 030c 	bic.w	r3, r3, #12
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	430b      	orrs	r3, r1
 800511e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2c      	ldr	r2, [pc, #176]	; (80051ec <UART_SetConfig+0x114>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d103      	bne.n	8005148 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7fe fdb8 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	e002      	b.n	800514e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fda0 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 800514c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009a      	lsls	r2, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <UART_SetConfig+0x118>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	0119      	lsls	r1, r3, #4
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009a      	lsls	r2, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	fbb2 f2f3 	udiv	r2, r2, r3
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <UART_SetConfig+0x118>)
 8005186:	fba3 0302 	umull	r0, r3, r3, r2
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	2064      	movs	r0, #100	; 0x64
 800518e:	fb00 f303 	mul.w	r3, r0, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	3332      	adds	r3, #50	; 0x32
 8005198:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <UART_SetConfig+0x118>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a4:	4419      	add	r1, r3
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009a      	lsls	r2, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <UART_SetConfig+0x118>)
 80051be:	fba3 0302 	umull	r0, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2064      	movs	r0, #100	; 0x64
 80051c6:	fb00 f303 	mul.w	r3, r0, r3
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	3332      	adds	r3, #50	; 0x32
 80051d0:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <UART_SetConfig+0x118>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	f003 020f 	and.w	r2, r3, #15
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	440a      	add	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40013800 	.word	0x40013800
 80051f0:	51eb851f 	.word	0x51eb851f

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	; (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000044 	.word	0x20000044

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	2600      	movs	r6, #0
 8005204:	4d0c      	ldr	r5, [pc, #48]	; (8005238 <__libc_init_array+0x38>)
 8005206:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	f002 fefa 	bl	8008008 <_init>
 8005214:	2600      	movs	r6, #0
 8005216:	4d0a      	ldr	r5, [pc, #40]	; (8005240 <__libc_init_array+0x40>)
 8005218:	4c0a      	ldr	r4, [pc, #40]	; (8005244 <__libc_init_array+0x44>)
 800521a:	1b64      	subs	r4, r4, r5
 800521c:	10a4      	asrs	r4, r4, #2
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08008474 	.word	0x08008474
 800523c:	08008474 	.word	0x08008474
 8005240:	08008474 	.word	0x08008474
 8005244:	08008478 	.word	0x08008478

08005248 <memset>:
 8005248:	4603      	mov	r3, r0
 800524a:	4402      	add	r2, r0
 800524c:	4293      	cmp	r3, r2
 800524e:	d100      	bne.n	8005252 <memset+0xa>
 8005250:	4770      	bx	lr
 8005252:	f803 1b01 	strb.w	r1, [r3], #1
 8005256:	e7f9      	b.n	800524c <memset+0x4>

08005258 <__cvt>:
 8005258:	2b00      	cmp	r3, #0
 800525a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525e:	461f      	mov	r7, r3
 8005260:	bfbb      	ittet	lt
 8005262:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005266:	461f      	movlt	r7, r3
 8005268:	2300      	movge	r3, #0
 800526a:	232d      	movlt	r3, #45	; 0x2d
 800526c:	b088      	sub	sp, #32
 800526e:	4614      	mov	r4, r2
 8005270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005272:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005274:	7013      	strb	r3, [r2, #0]
 8005276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005278:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800527c:	f023 0820 	bic.w	r8, r3, #32
 8005280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005284:	d005      	beq.n	8005292 <__cvt+0x3a>
 8005286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800528a:	d100      	bne.n	800528e <__cvt+0x36>
 800528c:	3501      	adds	r5, #1
 800528e:	2302      	movs	r3, #2
 8005290:	e000      	b.n	8005294 <__cvt+0x3c>
 8005292:	2303      	movs	r3, #3
 8005294:	aa07      	add	r2, sp, #28
 8005296:	9204      	str	r2, [sp, #16]
 8005298:	aa06      	add	r2, sp, #24
 800529a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800529e:	e9cd 3500 	strd	r3, r5, [sp]
 80052a2:	4622      	mov	r2, r4
 80052a4:	463b      	mov	r3, r7
 80052a6:	f000 fce3 	bl	8005c70 <_dtoa_r>
 80052aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052ae:	4606      	mov	r6, r0
 80052b0:	d102      	bne.n	80052b8 <__cvt+0x60>
 80052b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d522      	bpl.n	80052fe <__cvt+0xa6>
 80052b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052bc:	eb06 0905 	add.w	r9, r6, r5
 80052c0:	d110      	bne.n	80052e4 <__cvt+0x8c>
 80052c2:	7833      	ldrb	r3, [r6, #0]
 80052c4:	2b30      	cmp	r3, #48	; 0x30
 80052c6:	d10a      	bne.n	80052de <__cvt+0x86>
 80052c8:	2200      	movs	r2, #0
 80052ca:	2300      	movs	r3, #0
 80052cc:	4620      	mov	r0, r4
 80052ce:	4639      	mov	r1, r7
 80052d0:	f7fb fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80052d4:	b918      	cbnz	r0, 80052de <__cvt+0x86>
 80052d6:	f1c5 0501 	rsb	r5, r5, #1
 80052da:	f8ca 5000 	str.w	r5, [sl]
 80052de:	f8da 3000 	ldr.w	r3, [sl]
 80052e2:	4499      	add	r9, r3
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	4620      	mov	r0, r4
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80052f0:	b108      	cbz	r0, 80052f6 <__cvt+0x9e>
 80052f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80052f6:	2230      	movs	r2, #48	; 0x30
 80052f8:	9b07      	ldr	r3, [sp, #28]
 80052fa:	454b      	cmp	r3, r9
 80052fc:	d307      	bcc.n	800530e <__cvt+0xb6>
 80052fe:	4630      	mov	r0, r6
 8005300:	9b07      	ldr	r3, [sp, #28]
 8005302:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005304:	1b9b      	subs	r3, r3, r6
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	b008      	add	sp, #32
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530e:	1c59      	adds	r1, r3, #1
 8005310:	9107      	str	r1, [sp, #28]
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e7f0      	b.n	80052f8 <__cvt+0xa0>

08005316 <__exponent>:
 8005316:	4603      	mov	r3, r0
 8005318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531a:	2900      	cmp	r1, #0
 800531c:	f803 2b02 	strb.w	r2, [r3], #2
 8005320:	bfb6      	itet	lt
 8005322:	222d      	movlt	r2, #45	; 0x2d
 8005324:	222b      	movge	r2, #43	; 0x2b
 8005326:	4249      	neglt	r1, r1
 8005328:	2909      	cmp	r1, #9
 800532a:	7042      	strb	r2, [r0, #1]
 800532c:	dd2b      	ble.n	8005386 <__exponent+0x70>
 800532e:	f10d 0407 	add.w	r4, sp, #7
 8005332:	46a4      	mov	ip, r4
 8005334:	270a      	movs	r7, #10
 8005336:	fb91 f6f7 	sdiv	r6, r1, r7
 800533a:	460a      	mov	r2, r1
 800533c:	46a6      	mov	lr, r4
 800533e:	fb07 1516 	mls	r5, r7, r6, r1
 8005342:	2a63      	cmp	r2, #99	; 0x63
 8005344:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005348:	4631      	mov	r1, r6
 800534a:	f104 34ff 	add.w	r4, r4, #4294967295
 800534e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005352:	dcf0      	bgt.n	8005336 <__exponent+0x20>
 8005354:	3130      	adds	r1, #48	; 0x30
 8005356:	f1ae 0502 	sub.w	r5, lr, #2
 800535a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800535e:	4629      	mov	r1, r5
 8005360:	1c44      	adds	r4, r0, #1
 8005362:	4561      	cmp	r1, ip
 8005364:	d30a      	bcc.n	800537c <__exponent+0x66>
 8005366:	f10d 0209 	add.w	r2, sp, #9
 800536a:	eba2 020e 	sub.w	r2, r2, lr
 800536e:	4565      	cmp	r5, ip
 8005370:	bf88      	it	hi
 8005372:	2200      	movhi	r2, #0
 8005374:	4413      	add	r3, r2
 8005376:	1a18      	subs	r0, r3, r0
 8005378:	b003      	add	sp, #12
 800537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005380:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005384:	e7ed      	b.n	8005362 <__exponent+0x4c>
 8005386:	2330      	movs	r3, #48	; 0x30
 8005388:	3130      	adds	r1, #48	; 0x30
 800538a:	7083      	strb	r3, [r0, #2]
 800538c:	70c1      	strb	r1, [r0, #3]
 800538e:	1d03      	adds	r3, r0, #4
 8005390:	e7f1      	b.n	8005376 <__exponent+0x60>
	...

08005394 <_printf_float>:
 8005394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	b091      	sub	sp, #68	; 0x44
 800539a:	460c      	mov	r4, r1
 800539c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80053a0:	4616      	mov	r6, r2
 80053a2:	461f      	mov	r7, r3
 80053a4:	4605      	mov	r5, r0
 80053a6:	f001 fa51 	bl	800684c <_localeconv_r>
 80053aa:	6803      	ldr	r3, [r0, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	9309      	str	r3, [sp, #36]	; 0x24
 80053b0:	f7fa fece 	bl	8000150 <strlen>
 80053b4:	2300      	movs	r3, #0
 80053b6:	930e      	str	r3, [sp, #56]	; 0x38
 80053b8:	f8d8 3000 	ldr.w	r3, [r8]
 80053bc:	900a      	str	r0, [sp, #40]	; 0x28
 80053be:	3307      	adds	r3, #7
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	f103 0208 	add.w	r2, r3, #8
 80053c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80053cc:	f8d4 b000 	ldr.w	fp, [r4]
 80053d0:	f8c8 2000 	str.w	r2, [r8]
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80053e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80053e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ea:	4640      	mov	r0, r8
 80053ec:	4b9c      	ldr	r3, [pc, #624]	; (8005660 <_printf_float+0x2cc>)
 80053ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053f0:	f7fb fb0c 	bl	8000a0c <__aeabi_dcmpun>
 80053f4:	bb70      	cbnz	r0, 8005454 <_printf_float+0xc0>
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	4640      	mov	r0, r8
 80053fc:	4b98      	ldr	r3, [pc, #608]	; (8005660 <_printf_float+0x2cc>)
 80053fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005400:	f7fb fae6 	bl	80009d0 <__aeabi_dcmple>
 8005404:	bb30      	cbnz	r0, 8005454 <_printf_float+0xc0>
 8005406:	2200      	movs	r2, #0
 8005408:	2300      	movs	r3, #0
 800540a:	4640      	mov	r0, r8
 800540c:	4651      	mov	r1, sl
 800540e:	f7fb fad5 	bl	80009bc <__aeabi_dcmplt>
 8005412:	b110      	cbz	r0, 800541a <_printf_float+0x86>
 8005414:	232d      	movs	r3, #45	; 0x2d
 8005416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541a:	4b92      	ldr	r3, [pc, #584]	; (8005664 <_printf_float+0x2d0>)
 800541c:	4892      	ldr	r0, [pc, #584]	; (8005668 <_printf_float+0x2d4>)
 800541e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005422:	bf94      	ite	ls
 8005424:	4698      	movls	r8, r3
 8005426:	4680      	movhi	r8, r0
 8005428:	2303      	movs	r3, #3
 800542a:	f04f 0a00 	mov.w	sl, #0
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	f02b 0304 	bic.w	r3, fp, #4
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	4633      	mov	r3, r6
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	9700      	str	r7, [sp, #0]
 800543e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005440:	f000 f9d4 	bl	80057ec <_printf_common>
 8005444:	3001      	adds	r0, #1
 8005446:	f040 8090 	bne.w	800556a <_printf_float+0x1d6>
 800544a:	f04f 30ff 	mov.w	r0, #4294967295
 800544e:	b011      	add	sp, #68	; 0x44
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	4642      	mov	r2, r8
 8005456:	4653      	mov	r3, sl
 8005458:	4640      	mov	r0, r8
 800545a:	4651      	mov	r1, sl
 800545c:	f7fb fad6 	bl	8000a0c <__aeabi_dcmpun>
 8005460:	b148      	cbz	r0, 8005476 <_printf_float+0xe2>
 8005462:	f1ba 0f00 	cmp.w	sl, #0
 8005466:	bfb8      	it	lt
 8005468:	232d      	movlt	r3, #45	; 0x2d
 800546a:	4880      	ldr	r0, [pc, #512]	; (800566c <_printf_float+0x2d8>)
 800546c:	bfb8      	it	lt
 800546e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005472:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <_printf_float+0x2dc>)
 8005474:	e7d3      	b.n	800541e <_printf_float+0x8a>
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	d142      	bne.n	8005506 <_printf_float+0x172>
 8005480:	2306      	movs	r3, #6
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	aa0e      	add	r2, sp, #56	; 0x38
 800548a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800548e:	aa0d      	add	r2, sp, #52	; 0x34
 8005490:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005494:	9203      	str	r2, [sp, #12]
 8005496:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800549a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	4642      	mov	r2, r8
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4628      	mov	r0, r5
 80054a8:	4653      	mov	r3, sl
 80054aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80054ac:	f7ff fed4 	bl	8005258 <__cvt>
 80054b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054b2:	4680      	mov	r8, r0
 80054b4:	2947      	cmp	r1, #71	; 0x47
 80054b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054b8:	d108      	bne.n	80054cc <_printf_float+0x138>
 80054ba:	1cc8      	adds	r0, r1, #3
 80054bc:	db02      	blt.n	80054c4 <_printf_float+0x130>
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	4299      	cmp	r1, r3
 80054c2:	dd40      	ble.n	8005546 <_printf_float+0x1b2>
 80054c4:	f1a9 0902 	sub.w	r9, r9, #2
 80054c8:	fa5f f989 	uxtb.w	r9, r9
 80054cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054d0:	d81f      	bhi.n	8005512 <_printf_float+0x17e>
 80054d2:	464a      	mov	r2, r9
 80054d4:	3901      	subs	r1, #1
 80054d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054da:	910d      	str	r1, [sp, #52]	; 0x34
 80054dc:	f7ff ff1b 	bl	8005316 <__exponent>
 80054e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054e2:	4682      	mov	sl, r0
 80054e4:	1813      	adds	r3, r2, r0
 80054e6:	2a01      	cmp	r2, #1
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	dc02      	bgt.n	80054f2 <_printf_float+0x15e>
 80054ec:	6822      	ldr	r2, [r4, #0]
 80054ee:	07d2      	lsls	r2, r2, #31
 80054f0:	d501      	bpl.n	80054f6 <_printf_float+0x162>
 80054f2:	3301      	adds	r3, #1
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d09b      	beq.n	8005436 <_printf_float+0xa2>
 80054fe:	232d      	movs	r3, #45	; 0x2d
 8005500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005504:	e797      	b.n	8005436 <_printf_float+0xa2>
 8005506:	2947      	cmp	r1, #71	; 0x47
 8005508:	d1bc      	bne.n	8005484 <_printf_float+0xf0>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ba      	bne.n	8005484 <_printf_float+0xf0>
 800550e:	2301      	movs	r3, #1
 8005510:	e7b7      	b.n	8005482 <_printf_float+0xee>
 8005512:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005516:	d118      	bne.n	800554a <_printf_float+0x1b6>
 8005518:	2900      	cmp	r1, #0
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	dd0b      	ble.n	8005536 <_printf_float+0x1a2>
 800551e:	6121      	str	r1, [r4, #16]
 8005520:	b913      	cbnz	r3, 8005528 <_printf_float+0x194>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	07d0      	lsls	r0, r2, #31
 8005526:	d502      	bpl.n	800552e <_printf_float+0x19a>
 8005528:	3301      	adds	r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	f04f 0a00 	mov.w	sl, #0
 8005532:	65a1      	str	r1, [r4, #88]	; 0x58
 8005534:	e7df      	b.n	80054f6 <_printf_float+0x162>
 8005536:	b913      	cbnz	r3, 800553e <_printf_float+0x1aa>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	07d2      	lsls	r2, r2, #31
 800553c:	d501      	bpl.n	8005542 <_printf_float+0x1ae>
 800553e:	3302      	adds	r3, #2
 8005540:	e7f4      	b.n	800552c <_printf_float+0x198>
 8005542:	2301      	movs	r3, #1
 8005544:	e7f2      	b.n	800552c <_printf_float+0x198>
 8005546:	f04f 0967 	mov.w	r9, #103	; 0x67
 800554a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554c:	4299      	cmp	r1, r3
 800554e:	db05      	blt.n	800555c <_printf_float+0x1c8>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6121      	str	r1, [r4, #16]
 8005554:	07d8      	lsls	r0, r3, #31
 8005556:	d5ea      	bpl.n	800552e <_printf_float+0x19a>
 8005558:	1c4b      	adds	r3, r1, #1
 800555a:	e7e7      	b.n	800552c <_printf_float+0x198>
 800555c:	2900      	cmp	r1, #0
 800555e:	bfcc      	ite	gt
 8005560:	2201      	movgt	r2, #1
 8005562:	f1c1 0202 	rsble	r2, r1, #2
 8005566:	4413      	add	r3, r2
 8005568:	e7e0      	b.n	800552c <_printf_float+0x198>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	055a      	lsls	r2, r3, #21
 800556e:	d407      	bmi.n	8005580 <_printf_float+0x1ec>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	4642      	mov	r2, r8
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	d12b      	bne.n	80055d6 <_printf_float+0x242>
 800557e:	e764      	b.n	800544a <_printf_float+0xb6>
 8005580:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005584:	f240 80dd 	bls.w	8005742 <_printf_float+0x3ae>
 8005588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	f7fb fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005594:	2800      	cmp	r0, #0
 8005596:	d033      	beq.n	8005600 <_printf_float+0x26c>
 8005598:	2301      	movs	r3, #1
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	4a35      	ldr	r2, [pc, #212]	; (8005674 <_printf_float+0x2e0>)
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af51 	beq.w	800544a <_printf_float+0xb6>
 80055a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055ac:	429a      	cmp	r2, r3
 80055ae:	db02      	blt.n	80055b6 <_printf_float+0x222>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07d8      	lsls	r0, r3, #31
 80055b4:	d50f      	bpl.n	80055d6 <_printf_float+0x242>
 80055b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ba:	4631      	mov	r1, r6
 80055bc:	4628      	mov	r0, r5
 80055be:	47b8      	blx	r7
 80055c0:	3001      	adds	r0, #1
 80055c2:	f43f af42 	beq.w	800544a <_printf_float+0xb6>
 80055c6:	f04f 0800 	mov.w	r8, #0
 80055ca:	f104 091a 	add.w	r9, r4, #26
 80055ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d0:	3b01      	subs	r3, #1
 80055d2:	4543      	cmp	r3, r8
 80055d4:	dc09      	bgt.n	80055ea <_printf_float+0x256>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	079b      	lsls	r3, r3, #30
 80055da:	f100 8102 	bmi.w	80057e2 <_printf_float+0x44e>
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055e2:	4298      	cmp	r0, r3
 80055e4:	bfb8      	it	lt
 80055e6:	4618      	movlt	r0, r3
 80055e8:	e731      	b.n	800544e <_printf_float+0xba>
 80055ea:	2301      	movs	r3, #1
 80055ec:	464a      	mov	r2, r9
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b8      	blx	r7
 80055f4:	3001      	adds	r0, #1
 80055f6:	f43f af28 	beq.w	800544a <_printf_float+0xb6>
 80055fa:	f108 0801 	add.w	r8, r8, #1
 80055fe:	e7e6      	b.n	80055ce <_printf_float+0x23a>
 8005600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	dc38      	bgt.n	8005678 <_printf_float+0x2e4>
 8005606:	2301      	movs	r3, #1
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	4a19      	ldr	r2, [pc, #100]	; (8005674 <_printf_float+0x2e0>)
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f af1a 	beq.w	800544a <_printf_float+0xb6>
 8005616:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800561a:	4313      	orrs	r3, r2
 800561c:	d102      	bne.n	8005624 <_printf_float+0x290>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	07d9      	lsls	r1, r3, #31
 8005622:	d5d8      	bpl.n	80055d6 <_printf_float+0x242>
 8005624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f af0b 	beq.w	800544a <_printf_float+0xb6>
 8005634:	f04f 0900 	mov.w	r9, #0
 8005638:	f104 0a1a 	add.w	sl, r4, #26
 800563c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800563e:	425b      	negs	r3, r3
 8005640:	454b      	cmp	r3, r9
 8005642:	dc01      	bgt.n	8005648 <_printf_float+0x2b4>
 8005644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005646:	e794      	b.n	8005572 <_printf_float+0x1de>
 8005648:	2301      	movs	r3, #1
 800564a:	4652      	mov	r2, sl
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f aef9 	beq.w	800544a <_printf_float+0xb6>
 8005658:	f109 0901 	add.w	r9, r9, #1
 800565c:	e7ee      	b.n	800563c <_printf_float+0x2a8>
 800565e:	bf00      	nop
 8005660:	7fefffff 	.word	0x7fefffff
 8005664:	080080a0 	.word	0x080080a0
 8005668:	080080a4 	.word	0x080080a4
 800566c:	080080ac 	.word	0x080080ac
 8005670:	080080a8 	.word	0x080080a8
 8005674:	080080b0 	.word	0x080080b0
 8005678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800567a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800567c:	429a      	cmp	r2, r3
 800567e:	bfa8      	it	ge
 8005680:	461a      	movge	r2, r3
 8005682:	2a00      	cmp	r2, #0
 8005684:	4691      	mov	r9, r2
 8005686:	dc37      	bgt.n	80056f8 <_printf_float+0x364>
 8005688:	f04f 0b00 	mov.w	fp, #0
 800568c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005690:	f104 021a 	add.w	r2, r4, #26
 8005694:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005698:	ebaa 0309 	sub.w	r3, sl, r9
 800569c:	455b      	cmp	r3, fp
 800569e:	dc33      	bgt.n	8005708 <_printf_float+0x374>
 80056a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056a4:	429a      	cmp	r2, r3
 80056a6:	db3b      	blt.n	8005720 <_printf_float+0x38c>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	07da      	lsls	r2, r3, #31
 80056ac:	d438      	bmi.n	8005720 <_printf_float+0x38c>
 80056ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056b2:	eba3 020a 	sub.w	r2, r3, sl
 80056b6:	eba3 0901 	sub.w	r9, r3, r1
 80056ba:	4591      	cmp	r9, r2
 80056bc:	bfa8      	it	ge
 80056be:	4691      	movge	r9, r2
 80056c0:	f1b9 0f00 	cmp.w	r9, #0
 80056c4:	dc34      	bgt.n	8005730 <_printf_float+0x39c>
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ce:	f104 0a1a 	add.w	sl, r4, #26
 80056d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	eba3 0309 	sub.w	r3, r3, r9
 80056dc:	4543      	cmp	r3, r8
 80056de:	f77f af7a 	ble.w	80055d6 <_printf_float+0x242>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4652      	mov	r2, sl
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f aeac 	beq.w	800544a <_printf_float+0xb6>
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	e7ec      	b.n	80056d2 <_printf_float+0x33e>
 80056f8:	4613      	mov	r3, r2
 80056fa:	4631      	mov	r1, r6
 80056fc:	4642      	mov	r2, r8
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	d1c0      	bne.n	8005688 <_printf_float+0x2f4>
 8005706:	e6a0      	b.n	800544a <_printf_float+0xb6>
 8005708:	2301      	movs	r3, #1
 800570a:	4631      	mov	r1, r6
 800570c:	4628      	mov	r0, r5
 800570e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	f43f ae99 	beq.w	800544a <_printf_float+0xb6>
 8005718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800571a:	f10b 0b01 	add.w	fp, fp, #1
 800571e:	e7b9      	b.n	8005694 <_printf_float+0x300>
 8005720:	4631      	mov	r1, r6
 8005722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005726:	4628      	mov	r0, r5
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	d1bf      	bne.n	80056ae <_printf_float+0x31a>
 800572e:	e68c      	b.n	800544a <_printf_float+0xb6>
 8005730:	464b      	mov	r3, r9
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	eb08 020a 	add.w	r2, r8, sl
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	d1c2      	bne.n	80056c6 <_printf_float+0x332>
 8005740:	e683      	b.n	800544a <_printf_float+0xb6>
 8005742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005744:	2a01      	cmp	r2, #1
 8005746:	dc01      	bgt.n	800574c <_printf_float+0x3b8>
 8005748:	07db      	lsls	r3, r3, #31
 800574a:	d537      	bpl.n	80057bc <_printf_float+0x428>
 800574c:	2301      	movs	r3, #1
 800574e:	4642      	mov	r2, r8
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f43f ae77 	beq.w	800544a <_printf_float+0xb6>
 800575c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f ae6f 	beq.w	800544a <_printf_float+0xb6>
 800576c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	f7fb f918 	bl	80009a8 <__aeabi_dcmpeq>
 8005778:	b9d8      	cbnz	r0, 80057b2 <_printf_float+0x41e>
 800577a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800577c:	f108 0201 	add.w	r2, r8, #1
 8005780:	3b01      	subs	r3, #1
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	47b8      	blx	r7
 8005788:	3001      	adds	r0, #1
 800578a:	d10e      	bne.n	80057aa <_printf_float+0x416>
 800578c:	e65d      	b.n	800544a <_printf_float+0xb6>
 800578e:	2301      	movs	r3, #1
 8005790:	464a      	mov	r2, r9
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	47b8      	blx	r7
 8005798:	3001      	adds	r0, #1
 800579a:	f43f ae56 	beq.w	800544a <_printf_float+0xb6>
 800579e:	f108 0801 	add.w	r8, r8, #1
 80057a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a4:	3b01      	subs	r3, #1
 80057a6:	4543      	cmp	r3, r8
 80057a8:	dcf1      	bgt.n	800578e <_printf_float+0x3fa>
 80057aa:	4653      	mov	r3, sl
 80057ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b0:	e6e0      	b.n	8005574 <_printf_float+0x1e0>
 80057b2:	f04f 0800 	mov.w	r8, #0
 80057b6:	f104 091a 	add.w	r9, r4, #26
 80057ba:	e7f2      	b.n	80057a2 <_printf_float+0x40e>
 80057bc:	2301      	movs	r3, #1
 80057be:	4642      	mov	r2, r8
 80057c0:	e7df      	b.n	8005782 <_printf_float+0x3ee>
 80057c2:	2301      	movs	r3, #1
 80057c4:	464a      	mov	r2, r9
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f ae3c 	beq.w	800544a <_printf_float+0xb6>
 80057d2:	f108 0801 	add.w	r8, r8, #1
 80057d6:	68e3      	ldr	r3, [r4, #12]
 80057d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057da:	1a5b      	subs	r3, r3, r1
 80057dc:	4543      	cmp	r3, r8
 80057de:	dcf0      	bgt.n	80057c2 <_printf_float+0x42e>
 80057e0:	e6fd      	b.n	80055de <_printf_float+0x24a>
 80057e2:	f04f 0800 	mov.w	r8, #0
 80057e6:	f104 0919 	add.w	r9, r4, #25
 80057ea:	e7f4      	b.n	80057d6 <_printf_float+0x442>

080057ec <_printf_common>:
 80057ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	4616      	mov	r6, r2
 80057f2:	4699      	mov	r9, r3
 80057f4:	688a      	ldr	r2, [r1, #8]
 80057f6:	690b      	ldr	r3, [r1, #16]
 80057f8:	4607      	mov	r7, r0
 80057fa:	4293      	cmp	r3, r2
 80057fc:	bfb8      	it	lt
 80057fe:	4613      	movlt	r3, r2
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005806:	460c      	mov	r4, r1
 8005808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800580c:	b10a      	cbz	r2, 8005812 <_printf_common+0x26>
 800580e:	3301      	adds	r3, #1
 8005810:	6033      	str	r3, [r6, #0]
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	0699      	lsls	r1, r3, #26
 8005816:	bf42      	ittt	mi
 8005818:	6833      	ldrmi	r3, [r6, #0]
 800581a:	3302      	addmi	r3, #2
 800581c:	6033      	strmi	r3, [r6, #0]
 800581e:	6825      	ldr	r5, [r4, #0]
 8005820:	f015 0506 	ands.w	r5, r5, #6
 8005824:	d106      	bne.n	8005834 <_printf_common+0x48>
 8005826:	f104 0a19 	add.w	sl, r4, #25
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	6832      	ldr	r2, [r6, #0]
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	42ab      	cmp	r3, r5
 8005832:	dc28      	bgt.n	8005886 <_printf_common+0x9a>
 8005834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005838:	1e13      	subs	r3, r2, #0
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	bf18      	it	ne
 800583e:	2301      	movne	r3, #1
 8005840:	0692      	lsls	r2, r2, #26
 8005842:	d42d      	bmi.n	80058a0 <_printf_common+0xb4>
 8005844:	4649      	mov	r1, r9
 8005846:	4638      	mov	r0, r7
 8005848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584c:	47c0      	blx	r8
 800584e:	3001      	adds	r0, #1
 8005850:	d020      	beq.n	8005894 <_printf_common+0xa8>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	68e5      	ldr	r5, [r4, #12]
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	2b04      	cmp	r3, #4
 800585c:	bf18      	it	ne
 800585e:	2500      	movne	r5, #0
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	f04f 0600 	mov.w	r6, #0
 8005866:	68a3      	ldr	r3, [r4, #8]
 8005868:	bf08      	it	eq
 800586a:	1aad      	subeq	r5, r5, r2
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	bf08      	it	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	4293      	cmp	r3, r2
 8005876:	bfc4      	itt	gt
 8005878:	1a9b      	subgt	r3, r3, r2
 800587a:	18ed      	addgt	r5, r5, r3
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xcc>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xac>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4649      	mov	r1, r9
 800588c:	4638      	mov	r0, r7
 800588e:	47c0      	blx	r8
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xb0>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c4      	b.n	800582a <_printf_common+0x3e>
 80058a0:	2030      	movs	r0, #48	; 0x30
 80058a2:	18e1      	adds	r1, r4, r3
 80058a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ae:	4422      	add	r2, r4
 80058b0:	3302      	adds	r3, #2
 80058b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b6:	e7c5      	b.n	8005844 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa8>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x92>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	7e0f      	ldrb	r7, [r1, #24]
 80058d2:	4691      	mov	r9, r2
 80058d4:	2f78      	cmp	r7, #120	; 0x78
 80058d6:	4680      	mov	r8, r0
 80058d8:	460c      	mov	r4, r1
 80058da:	469a      	mov	sl, r3
 80058dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	; 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d9 	beq.w	8005aa0 <_printf_i+0x1d4>
 80058ee:	2f58      	cmp	r7, #88	; 0x58
 80058f0:	f000 80a4 	beq.w	8005a3c <_printf_i+0x170>
 80058f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a101      	add	r1, pc, #4	; (adr r1, 800590c <_printf_i+0x40>)
 8005908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a87 	.word	0x08005a87
 800593c:	080059a9 	.word	0x080059a9
 8005940:	08005a69 	.word	0x08005a69
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005aa9 	.word	0x08005aa9
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a9 	.word	0x080059a9
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a71 	.word	0x08005a71
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e0a4      	b.n	8005ac2 <_printf_i+0x1f6>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	6829      	ldr	r1, [r5, #0]
 800597c:	0606      	lsls	r6, r0, #24
 800597e:	f101 0304 	add.w	r3, r1, #4
 8005982:	d50a      	bpl.n	800599a <_printf_i+0xce>
 8005984:	680e      	ldr	r6, [r1, #0]
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	2e00      	cmp	r6, #0
 800598a:	da03      	bge.n	8005994 <_printf_i+0xc8>
 800598c:	232d      	movs	r3, #45	; 0x2d
 800598e:	4276      	negs	r6, r6
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005994:	230a      	movs	r3, #10
 8005996:	485e      	ldr	r0, [pc, #376]	; (8005b10 <_printf_i+0x244>)
 8005998:	e019      	b.n	80059ce <_printf_i+0x102>
 800599a:	680e      	ldr	r6, [r1, #0]
 800599c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	bf18      	it	ne
 80059a4:	b236      	sxthne	r6, r6
 80059a6:	e7ef      	b.n	8005988 <_printf_i+0xbc>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	6029      	str	r1, [r5, #0]
 80059b0:	0601      	lsls	r1, r0, #24
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0xec>
 80059b4:	681e      	ldr	r6, [r3, #0]
 80059b6:	e002      	b.n	80059be <_printf_i+0xf2>
 80059b8:	0646      	lsls	r6, r0, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0xe8>
 80059bc:	881e      	ldrh	r6, [r3, #0]
 80059be:	2f6f      	cmp	r7, #111	; 0x6f
 80059c0:	bf0c      	ite	eq
 80059c2:	2308      	moveq	r3, #8
 80059c4:	230a      	movne	r3, #10
 80059c6:	4852      	ldr	r0, [pc, #328]	; (8005b10 <_printf_i+0x244>)
 80059c8:	2100      	movs	r1, #0
 80059ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ce:	6865      	ldr	r5, [r4, #4]
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	bfa8      	it	ge
 80059d4:	6821      	ldrge	r1, [r4, #0]
 80059d6:	60a5      	str	r5, [r4, #8]
 80059d8:	bfa4      	itt	ge
 80059da:	f021 0104 	bicge.w	r1, r1, #4
 80059de:	6021      	strge	r1, [r4, #0]
 80059e0:	b90e      	cbnz	r6, 80059e6 <_printf_i+0x11a>
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	d04d      	beq.n	8005a82 <_printf_i+0x1b6>
 80059e6:	4615      	mov	r5, r2
 80059e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ec:	fb03 6711 	mls	r7, r3, r1, r6
 80059f0:	5dc7      	ldrb	r7, [r0, r7]
 80059f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f6:	4637      	mov	r7, r6
 80059f8:	42bb      	cmp	r3, r7
 80059fa:	460e      	mov	r6, r1
 80059fc:	d9f4      	bls.n	80059e8 <_printf_i+0x11c>
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d10b      	bne.n	8005a1a <_printf_i+0x14e>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	07de      	lsls	r6, r3, #31
 8005a06:	d508      	bpl.n	8005a1a <_printf_i+0x14e>
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	4299      	cmp	r1, r3
 8005a0e:	bfde      	ittt	le
 8005a10:	2330      	movle	r3, #48	; 0x30
 8005a12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1a:	1b52      	subs	r2, r2, r5
 8005a1c:	6122      	str	r2, [r4, #16]
 8005a1e:	464b      	mov	r3, r9
 8005a20:	4621      	mov	r1, r4
 8005a22:	4640      	mov	r0, r8
 8005a24:	f8cd a000 	str.w	sl, [sp]
 8005a28:	aa03      	add	r2, sp, #12
 8005a2a:	f7ff fedf 	bl	80057ec <_printf_common>
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d14c      	bne.n	8005acc <_printf_i+0x200>
 8005a32:	f04f 30ff 	mov.w	r0, #4294967295
 8005a36:	b004      	add	sp, #16
 8005a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3c:	4834      	ldr	r0, [pc, #208]	; (8005b10 <_printf_i+0x244>)
 8005a3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a42:	6829      	ldr	r1, [r5, #0]
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4a:	6029      	str	r1, [r5, #0]
 8005a4c:	061d      	lsls	r5, r3, #24
 8005a4e:	d514      	bpl.n	8005a7a <_printf_i+0x1ae>
 8005a50:	07df      	lsls	r7, r3, #31
 8005a52:	bf44      	itt	mi
 8005a54:	f043 0320 	orrmi.w	r3, r3, #32
 8005a58:	6023      	strmi	r3, [r4, #0]
 8005a5a:	b91e      	cbnz	r6, 8005a64 <_printf_i+0x198>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f023 0320 	bic.w	r3, r3, #32
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	2310      	movs	r3, #16
 8005a66:	e7af      	b.n	80059c8 <_printf_i+0xfc>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f043 0320 	orr.w	r3, r3, #32
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	2378      	movs	r3, #120	; 0x78
 8005a72:	4828      	ldr	r0, [pc, #160]	; (8005b14 <_printf_i+0x248>)
 8005a74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a78:	e7e3      	b.n	8005a42 <_printf_i+0x176>
 8005a7a:	0659      	lsls	r1, r3, #25
 8005a7c:	bf48      	it	mi
 8005a7e:	b2b6      	uxthmi	r6, r6
 8005a80:	e7e6      	b.n	8005a50 <_printf_i+0x184>
 8005a82:	4615      	mov	r5, r2
 8005a84:	e7bb      	b.n	80059fe <_printf_i+0x132>
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	6826      	ldr	r6, [r4, #0]
 8005a8a:	1d18      	adds	r0, r3, #4
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	6028      	str	r0, [r5, #0]
 8005a90:	0635      	lsls	r5, r6, #24
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	d501      	bpl.n	8005a9a <_printf_i+0x1ce>
 8005a96:	6019      	str	r1, [r3, #0]
 8005a98:	e002      	b.n	8005aa0 <_printf_i+0x1d4>
 8005a9a:	0670      	lsls	r0, r6, #25
 8005a9c:	d5fb      	bpl.n	8005a96 <_printf_i+0x1ca>
 8005a9e:	8019      	strh	r1, [r3, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4615      	mov	r5, r2
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	e7ba      	b.n	8005a1e <_printf_i+0x152>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	2100      	movs	r1, #0
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 fed5 	bl	8006864 <memchr>
 8005aba:	b108      	cbz	r0, 8005ac0 <_printf_i+0x1f4>
 8005abc:	1b40      	subs	r0, r0, r5
 8005abe:	6060      	str	r0, [r4, #4]
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aca:	e7a8      	b.n	8005a1e <_printf_i+0x152>
 8005acc:	462a      	mov	r2, r5
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	47d0      	blx	sl
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d0ab      	beq.n	8005a32 <_printf_i+0x166>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	079b      	lsls	r3, r3, #30
 8005ade:	d413      	bmi.n	8005b08 <_printf_i+0x23c>
 8005ae0:	68e0      	ldr	r0, [r4, #12]
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	bfb8      	it	lt
 8005ae8:	4618      	movlt	r0, r3
 8005aea:	e7a4      	b.n	8005a36 <_printf_i+0x16a>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4632      	mov	r2, r6
 8005af0:	4649      	mov	r1, r9
 8005af2:	4640      	mov	r0, r8
 8005af4:	47d0      	blx	sl
 8005af6:	3001      	adds	r0, #1
 8005af8:	d09b      	beq.n	8005a32 <_printf_i+0x166>
 8005afa:	3501      	adds	r5, #1
 8005afc:	68e3      	ldr	r3, [r4, #12]
 8005afe:	9903      	ldr	r1, [sp, #12]
 8005b00:	1a5b      	subs	r3, r3, r1
 8005b02:	42ab      	cmp	r3, r5
 8005b04:	dcf2      	bgt.n	8005aec <_printf_i+0x220>
 8005b06:	e7eb      	b.n	8005ae0 <_printf_i+0x214>
 8005b08:	2500      	movs	r5, #0
 8005b0a:	f104 0619 	add.w	r6, r4, #25
 8005b0e:	e7f5      	b.n	8005afc <_printf_i+0x230>
 8005b10:	080080b2 	.word	0x080080b2
 8005b14:	080080c3 	.word	0x080080c3

08005b18 <siprintf>:
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b1e:	b500      	push	{lr}
 8005b20:	b09c      	sub	sp, #112	; 0x70
 8005b22:	ab1d      	add	r3, sp, #116	; 0x74
 8005b24:	9002      	str	r0, [sp, #8]
 8005b26:	9006      	str	r0, [sp, #24]
 8005b28:	9107      	str	r1, [sp, #28]
 8005b2a:	9104      	str	r1, [sp, #16]
 8005b2c:	4808      	ldr	r0, [pc, #32]	; (8005b50 <siprintf+0x38>)
 8005b2e:	4909      	ldr	r1, [pc, #36]	; (8005b54 <siprintf+0x3c>)
 8005b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b34:	9105      	str	r1, [sp, #20]
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	a902      	add	r1, sp, #8
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	f001 fb7c 	bl	8007238 <_svfiprintf_r>
 8005b40:	2200      	movs	r2, #0
 8005b42:	9b02      	ldr	r3, [sp, #8]
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	b01c      	add	sp, #112	; 0x70
 8005b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b4c:	b003      	add	sp, #12
 8005b4e:	4770      	bx	lr
 8005b50:	20000044 	.word	0x20000044
 8005b54:	ffff0208 	.word	0xffff0208

08005b58 <quorem>:
 8005b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	6903      	ldr	r3, [r0, #16]
 8005b5e:	690c      	ldr	r4, [r1, #16]
 8005b60:	4607      	mov	r7, r0
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	f2c0 8082 	blt.w	8005c6c <quorem+0x114>
 8005b68:	3c01      	subs	r4, #1
 8005b6a:	f100 0514 	add.w	r5, r0, #20
 8005b6e:	f101 0814 	add.w	r8, r1, #20
 8005b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b80:	3301      	adds	r3, #1
 8005b82:	429a      	cmp	r2, r3
 8005b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b90:	d331      	bcc.n	8005bf6 <quorem+0x9e>
 8005b92:	f04f 0e00 	mov.w	lr, #0
 8005b96:	4640      	mov	r0, r8
 8005b98:	46ac      	mov	ip, r5
 8005b9a:	46f2      	mov	sl, lr
 8005b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ba0:	b293      	uxth	r3, r2
 8005ba2:	fb06 e303 	mla	r3, r6, r3, lr
 8005ba6:	0c12      	lsrs	r2, r2, #16
 8005ba8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	fb06 e202 	mla	r2, r6, r2, lr
 8005bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8005bb6:	f8dc a000 	ldr.w	sl, [ip]
 8005bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bbe:	fa1f fa8a 	uxth.w	sl, sl
 8005bc2:	4453      	add	r3, sl
 8005bc4:	f8dc a000 	ldr.w	sl, [ip]
 8005bc8:	b292      	uxth	r2, r2
 8005bca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd8:	4581      	cmp	r9, r0
 8005bda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bde:	f84c 3b04 	str.w	r3, [ip], #4
 8005be2:	d2db      	bcs.n	8005b9c <quorem+0x44>
 8005be4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005be8:	b92b      	cbnz	r3, 8005bf6 <quorem+0x9e>
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	429d      	cmp	r5, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	d32f      	bcc.n	8005c54 <quorem+0xfc>
 8005bf4:	613c      	str	r4, [r7, #16]
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f001 f8ce 	bl	8006d98 <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	db25      	blt.n	8005c4c <quorem+0xf4>
 8005c00:	4628      	mov	r0, r5
 8005c02:	f04f 0c00 	mov.w	ip, #0
 8005c06:	3601      	adds	r6, #1
 8005c08:	f858 1b04 	ldr.w	r1, [r8], #4
 8005c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8005c10:	b28b      	uxth	r3, r1
 8005c12:	ebac 0303 	sub.w	r3, ip, r3
 8005c16:	fa1f f28e 	uxth.w	r2, lr
 8005c1a:	4413      	add	r3, r2
 8005c1c:	0c0a      	lsrs	r2, r1, #16
 8005c1e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c2c:	45c1      	cmp	r9, r8
 8005c2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c32:	f840 3b04 	str.w	r3, [r0], #4
 8005c36:	d2e7      	bcs.n	8005c08 <quorem+0xb0>
 8005c38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c40:	b922      	cbnz	r2, 8005c4c <quorem+0xf4>
 8005c42:	3b04      	subs	r3, #4
 8005c44:	429d      	cmp	r5, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	d30a      	bcc.n	8005c60 <quorem+0x108>
 8005c4a:	613c      	str	r4, [r7, #16]
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	b003      	add	sp, #12
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	3b04      	subs	r3, #4
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d1cb      	bne.n	8005bf4 <quorem+0x9c>
 8005c5c:	3c01      	subs	r4, #1
 8005c5e:	e7c6      	b.n	8005bee <quorem+0x96>
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	3b04      	subs	r3, #4
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d1f0      	bne.n	8005c4a <quorem+0xf2>
 8005c68:	3c01      	subs	r4, #1
 8005c6a:	e7eb      	b.n	8005c44 <quorem+0xec>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e7ee      	b.n	8005c4e <quorem+0xf6>

08005c70 <_dtoa_r>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	4616      	mov	r6, r2
 8005c76:	461f      	mov	r7, r3
 8005c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c7a:	b099      	sub	sp, #100	; 0x64
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005c82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005c86:	b974      	cbnz	r4, 8005ca6 <_dtoa_r+0x36>
 8005c88:	2010      	movs	r0, #16
 8005c8a:	f000 fde3 	bl	8006854 <malloc>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6268      	str	r0, [r5, #36]	; 0x24
 8005c92:	b920      	cbnz	r0, 8005c9e <_dtoa_r+0x2e>
 8005c94:	21ea      	movs	r1, #234	; 0xea
 8005c96:	4ba8      	ldr	r3, [pc, #672]	; (8005f38 <_dtoa_r+0x2c8>)
 8005c98:	48a8      	ldr	r0, [pc, #672]	; (8005f3c <_dtoa_r+0x2cc>)
 8005c9a:	f001 fbdd 	bl	8007458 <__assert_func>
 8005c9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ca2:	6004      	str	r4, [r0, #0]
 8005ca4:	60c4      	str	r4, [r0, #12]
 8005ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	b151      	cbz	r1, 8005cc2 <_dtoa_r+0x52>
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4093      	lsls	r3, r2
 8005cb2:	604a      	str	r2, [r1, #4]
 8005cb4:	608b      	str	r3, [r1, #8]
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 fe30 	bl	800691c <_Bfree>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	1e3b      	subs	r3, r7, #0
 8005cc4:	bfaf      	iteee	ge
 8005cc6:	2300      	movge	r3, #0
 8005cc8:	2201      	movlt	r2, #1
 8005cca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	9305      	strlt	r3, [sp, #20]
 8005cd0:	bfa8      	it	ge
 8005cd2:	f8c8 3000 	strge.w	r3, [r8]
 8005cd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005cda:	4b99      	ldr	r3, [pc, #612]	; (8005f40 <_dtoa_r+0x2d0>)
 8005cdc:	bfb8      	it	lt
 8005cde:	f8c8 2000 	strlt.w	r2, [r8]
 8005ce2:	ea33 0309 	bics.w	r3, r3, r9
 8005ce6:	d119      	bne.n	8005d1c <_dtoa_r+0xac>
 8005ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cf4:	4333      	orrs	r3, r6
 8005cf6:	f000 857f 	beq.w	80067f8 <_dtoa_r+0xb88>
 8005cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cfc:	b953      	cbnz	r3, 8005d14 <_dtoa_r+0xa4>
 8005cfe:	4b91      	ldr	r3, [pc, #580]	; (8005f44 <_dtoa_r+0x2d4>)
 8005d00:	e022      	b.n	8005d48 <_dtoa_r+0xd8>
 8005d02:	4b91      	ldr	r3, [pc, #580]	; (8005f48 <_dtoa_r+0x2d8>)
 8005d04:	9303      	str	r3, [sp, #12]
 8005d06:	3308      	adds	r3, #8
 8005d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	9803      	ldr	r0, [sp, #12]
 8005d0e:	b019      	add	sp, #100	; 0x64
 8005d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d14:	4b8b      	ldr	r3, [pc, #556]	; (8005f44 <_dtoa_r+0x2d4>)
 8005d16:	9303      	str	r3, [sp, #12]
 8005d18:	3303      	adds	r3, #3
 8005d1a:	e7f5      	b.n	8005d08 <_dtoa_r+0x98>
 8005d1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f7fa fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d30:	4680      	mov	r8, r0
 8005d32:	b158      	cbz	r0, 8005d4c <_dtoa_r+0xdc>
 8005d34:	2301      	movs	r3, #1
 8005d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8558 	beq.w	80067f2 <_dtoa_r+0xb82>
 8005d42:	4882      	ldr	r0, [pc, #520]	; (8005f4c <_dtoa_r+0x2dc>)
 8005d44:	6018      	str	r0, [r3, #0]
 8005d46:	1e43      	subs	r3, r0, #1
 8005d48:	9303      	str	r3, [sp, #12]
 8005d4a:	e7df      	b.n	8005d0c <_dtoa_r+0x9c>
 8005d4c:	ab16      	add	r3, sp, #88	; 0x58
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	ab17      	add	r3, sp, #92	; 0x5c
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4628      	mov	r0, r5
 8005d56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d5a:	f001 f8c5 	bl	8006ee8 <__d2b>
 8005d5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d62:	4683      	mov	fp, r0
 8005d64:	2c00      	cmp	r4, #0
 8005d66:	d07f      	beq.n	8005e68 <_dtoa_r+0x1f8>
 8005d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005d7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005d7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b72      	ldr	r3, [pc, #456]	; (8005f50 <_dtoa_r+0x2e0>)
 8005d86:	f7fa f9ef 	bl	8000168 <__aeabi_dsub>
 8005d8a:	a365      	add	r3, pc, #404	; (adr r3, 8005f20 <_dtoa_r+0x2b0>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa fba2 	bl	80004d8 <__aeabi_dmul>
 8005d94:	a364      	add	r3, pc, #400	; (adr r3, 8005f28 <_dtoa_r+0x2b8>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f7fa f9e7 	bl	800016c <__adddf3>
 8005d9e:	4606      	mov	r6, r0
 8005da0:	4620      	mov	r0, r4
 8005da2:	460f      	mov	r7, r1
 8005da4:	f7fa fb2e 	bl	8000404 <__aeabi_i2d>
 8005da8:	a361      	add	r3, pc, #388	; (adr r3, 8005f30 <_dtoa_r+0x2c0>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fb93 	bl	80004d8 <__aeabi_dmul>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4630      	mov	r0, r6
 8005db8:	4639      	mov	r1, r7
 8005dba:	f7fa f9d7 	bl	800016c <__adddf3>
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460f      	mov	r7, r1
 8005dc2:	f7fa fe39 	bl	8000a38 <__aeabi_d2iz>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4682      	mov	sl, r0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	4639      	mov	r1, r7
 8005dd0:	f7fa fdf4 	bl	80009bc <__aeabi_dcmplt>
 8005dd4:	b148      	cbz	r0, 8005dea <_dtoa_r+0x17a>
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f7fa fb14 	bl	8000404 <__aeabi_i2d>
 8005ddc:	4632      	mov	r2, r6
 8005dde:	463b      	mov	r3, r7
 8005de0:	f7fa fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8005de4:	b908      	cbnz	r0, 8005dea <_dtoa_r+0x17a>
 8005de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dea:	f1ba 0f16 	cmp.w	sl, #22
 8005dee:	d858      	bhi.n	8005ea2 <_dtoa_r+0x232>
 8005df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005df4:	4b57      	ldr	r3, [pc, #348]	; (8005f54 <_dtoa_r+0x2e4>)
 8005df6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f7fa fddd 	bl	80009bc <__aeabi_dcmplt>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d04f      	beq.n	8005ea6 <_dtoa_r+0x236>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e10:	1b1c      	subs	r4, r3, r4
 8005e12:	1e63      	subs	r3, r4, #1
 8005e14:	9309      	str	r3, [sp, #36]	; 0x24
 8005e16:	bf49      	itett	mi
 8005e18:	f1c4 0301 	rsbmi	r3, r4, #1
 8005e1c:	2300      	movpl	r3, #0
 8005e1e:	9306      	strmi	r3, [sp, #24]
 8005e20:	2300      	movmi	r3, #0
 8005e22:	bf54      	ite	pl
 8005e24:	9306      	strpl	r3, [sp, #24]
 8005e26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e28:	f1ba 0f00 	cmp.w	sl, #0
 8005e2c:	db3d      	blt.n	8005eaa <_dtoa_r+0x23a>
 8005e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005e34:	4453      	add	r3, sl
 8005e36:	9309      	str	r3, [sp, #36]	; 0x24
 8005e38:	2300      	movs	r3, #0
 8005e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e3e:	2b09      	cmp	r3, #9
 8005e40:	f200 808c 	bhi.w	8005f5c <_dtoa_r+0x2ec>
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	bfc4      	itt	gt
 8005e48:	3b04      	subgt	r3, #4
 8005e4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e4e:	bfc8      	it	gt
 8005e50:	2400      	movgt	r4, #0
 8005e52:	f1a3 0302 	sub.w	r3, r3, #2
 8005e56:	bfd8      	it	le
 8005e58:	2401      	movle	r4, #1
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	f200 808a 	bhi.w	8005f74 <_dtoa_r+0x304>
 8005e60:	e8df f003 	tbb	[pc, r3]
 8005e64:	5b4d4f2d 	.word	0x5b4d4f2d
 8005e68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005e6c:	441c      	add	r4, r3
 8005e6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	bfc3      	ittte	gt
 8005e76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005e7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e82:	f1c3 0320 	rsble	r3, r3, #32
 8005e86:	bfc6      	itte	gt
 8005e88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e8c:	4318      	orrgt	r0, r3
 8005e8e:	fa06 f003 	lslle.w	r0, r6, r3
 8005e92:	f7fa faa7 	bl	80003e4 <__aeabi_ui2d>
 8005e96:	2301      	movs	r3, #1
 8005e98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e9c:	3c01      	subs	r4, #1
 8005e9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ea0:	e76f      	b.n	8005d82 <_dtoa_r+0x112>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e7b2      	b.n	8005e0c <_dtoa_r+0x19c>
 8005ea6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ea8:	e7b1      	b.n	8005e0e <_dtoa_r+0x19e>
 8005eaa:	9b06      	ldr	r3, [sp, #24]
 8005eac:	eba3 030a 	sub.w	r3, r3, sl
 8005eb0:	9306      	str	r3, [sp, #24]
 8005eb2:	f1ca 0300 	rsb	r3, sl, #0
 8005eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb8:	2300      	movs	r3, #0
 8005eba:	930e      	str	r3, [sp, #56]	; 0x38
 8005ebc:	e7be      	b.n	8005e3c <_dtoa_r+0x1cc>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dc58      	bgt.n	8005f7a <_dtoa_r+0x30a>
 8005ec8:	f04f 0901 	mov.w	r9, #1
 8005ecc:	464b      	mov	r3, r9
 8005ece:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ed2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005eda:	6042      	str	r2, [r0, #4]
 8005edc:	2204      	movs	r2, #4
 8005ede:	f102 0614 	add.w	r6, r2, #20
 8005ee2:	429e      	cmp	r6, r3
 8005ee4:	6841      	ldr	r1, [r0, #4]
 8005ee6:	d94e      	bls.n	8005f86 <_dtoa_r+0x316>
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 fcd7 	bl	800689c <_Balloc>
 8005eee:	9003      	str	r0, [sp, #12]
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d14c      	bne.n	8005f8e <_dtoa_r+0x31e>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <_dtoa_r+0x2e8>)
 8005efc:	e6cc      	b.n	8005c98 <_dtoa_r+0x28>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e7de      	b.n	8005ec0 <_dtoa_r+0x250>
 8005f02:	2300      	movs	r3, #0
 8005f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f08:	eb0a 0903 	add.w	r9, sl, r3
 8005f0c:	f109 0301 	add.w	r3, r9, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	bfb8      	it	lt
 8005f16:	2301      	movlt	r3, #1
 8005f18:	e7dd      	b.n	8005ed6 <_dtoa_r+0x266>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e7f2      	b.n	8005f04 <_dtoa_r+0x294>
 8005f1e:	bf00      	nop
 8005f20:	636f4361 	.word	0x636f4361
 8005f24:	3fd287a7 	.word	0x3fd287a7
 8005f28:	8b60c8b3 	.word	0x8b60c8b3
 8005f2c:	3fc68a28 	.word	0x3fc68a28
 8005f30:	509f79fb 	.word	0x509f79fb
 8005f34:	3fd34413 	.word	0x3fd34413
 8005f38:	080080e1 	.word	0x080080e1
 8005f3c:	080080f8 	.word	0x080080f8
 8005f40:	7ff00000 	.word	0x7ff00000
 8005f44:	080080dd 	.word	0x080080dd
 8005f48:	080080d4 	.word	0x080080d4
 8005f4c:	080080b1 	.word	0x080080b1
 8005f50:	3ff80000 	.word	0x3ff80000
 8005f54:	080081e8 	.word	0x080081e8
 8005f58:	08008153 	.word	0x08008153
 8005f5c:	2401      	movs	r4, #1
 8005f5e:	2300      	movs	r3, #0
 8005f60:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f62:	9322      	str	r3, [sp, #136]	; 0x88
 8005f64:	f04f 39ff 	mov.w	r9, #4294967295
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2312      	movs	r3, #18
 8005f6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f70:	9223      	str	r2, [sp, #140]	; 0x8c
 8005f72:	e7b0      	b.n	8005ed6 <_dtoa_r+0x266>
 8005f74:	2301      	movs	r3, #1
 8005f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f78:	e7f4      	b.n	8005f64 <_dtoa_r+0x2f4>
 8005f7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005f7e:	464b      	mov	r3, r9
 8005f80:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f84:	e7a7      	b.n	8005ed6 <_dtoa_r+0x266>
 8005f86:	3101      	adds	r1, #1
 8005f88:	6041      	str	r1, [r0, #4]
 8005f8a:	0052      	lsls	r2, r2, #1
 8005f8c:	e7a7      	b.n	8005ede <_dtoa_r+0x26e>
 8005f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f90:	9a03      	ldr	r2, [sp, #12]
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	9b08      	ldr	r3, [sp, #32]
 8005f96:	2b0e      	cmp	r3, #14
 8005f98:	f200 80a8 	bhi.w	80060ec <_dtoa_r+0x47c>
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	f000 80a5 	beq.w	80060ec <_dtoa_r+0x47c>
 8005fa2:	f1ba 0f00 	cmp.w	sl, #0
 8005fa6:	dd34      	ble.n	8006012 <_dtoa_r+0x3a2>
 8005fa8:	4a9a      	ldr	r2, [pc, #616]	; (8006214 <_dtoa_r+0x5a4>)
 8005faa:	f00a 030f 	and.w	r3, sl, #15
 8005fae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005fb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005fbe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005fc2:	d016      	beq.n	8005ff2 <_dtoa_r+0x382>
 8005fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fc8:	4b93      	ldr	r3, [pc, #588]	; (8006218 <_dtoa_r+0x5a8>)
 8005fca:	2703      	movs	r7, #3
 8005fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fd0:	f7fa fbac 	bl	800072c <__aeabi_ddiv>
 8005fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd8:	f004 040f 	and.w	r4, r4, #15
 8005fdc:	4e8e      	ldr	r6, [pc, #568]	; (8006218 <_dtoa_r+0x5a8>)
 8005fde:	b954      	cbnz	r4, 8005ff6 <_dtoa_r+0x386>
 8005fe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe8:	f7fa fba0 	bl	800072c <__aeabi_ddiv>
 8005fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff0:	e029      	b.n	8006046 <_dtoa_r+0x3d6>
 8005ff2:	2702      	movs	r7, #2
 8005ff4:	e7f2      	b.n	8005fdc <_dtoa_r+0x36c>
 8005ff6:	07e1      	lsls	r1, r4, #31
 8005ff8:	d508      	bpl.n	800600c <_dtoa_r+0x39c>
 8005ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ffe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006002:	f7fa fa69 	bl	80004d8 <__aeabi_dmul>
 8006006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800600a:	3701      	adds	r7, #1
 800600c:	1064      	asrs	r4, r4, #1
 800600e:	3608      	adds	r6, #8
 8006010:	e7e5      	b.n	8005fde <_dtoa_r+0x36e>
 8006012:	f000 80a5 	beq.w	8006160 <_dtoa_r+0x4f0>
 8006016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800601a:	f1ca 0400 	rsb	r4, sl, #0
 800601e:	4b7d      	ldr	r3, [pc, #500]	; (8006214 <_dtoa_r+0x5a4>)
 8006020:	f004 020f 	and.w	r2, r4, #15
 8006024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa fa54 	bl	80004d8 <__aeabi_dmul>
 8006030:	2702      	movs	r7, #2
 8006032:	2300      	movs	r3, #0
 8006034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006038:	4e77      	ldr	r6, [pc, #476]	; (8006218 <_dtoa_r+0x5a8>)
 800603a:	1124      	asrs	r4, r4, #4
 800603c:	2c00      	cmp	r4, #0
 800603e:	f040 8084 	bne.w	800614a <_dtoa_r+0x4da>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1d2      	bne.n	8005fec <_dtoa_r+0x37c>
 8006046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 808b 	beq.w	8006164 <_dtoa_r+0x4f4>
 800604e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006052:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800605a:	2200      	movs	r2, #0
 800605c:	4b6f      	ldr	r3, [pc, #444]	; (800621c <_dtoa_r+0x5ac>)
 800605e:	f7fa fcad 	bl	80009bc <__aeabi_dcmplt>
 8006062:	2800      	cmp	r0, #0
 8006064:	d07e      	beq.n	8006164 <_dtoa_r+0x4f4>
 8006066:	9b08      	ldr	r3, [sp, #32]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d07b      	beq.n	8006164 <_dtoa_r+0x4f4>
 800606c:	f1b9 0f00 	cmp.w	r9, #0
 8006070:	dd38      	ble.n	80060e4 <_dtoa_r+0x474>
 8006072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006076:	2200      	movs	r2, #0
 8006078:	4b69      	ldr	r3, [pc, #420]	; (8006220 <_dtoa_r+0x5b0>)
 800607a:	f7fa fa2d 	bl	80004d8 <__aeabi_dmul>
 800607e:	464c      	mov	r4, r9
 8006080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006084:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006088:	3701      	adds	r7, #1
 800608a:	4638      	mov	r0, r7
 800608c:	f7fa f9ba 	bl	8000404 <__aeabi_i2d>
 8006090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006094:	f7fa fa20 	bl	80004d8 <__aeabi_dmul>
 8006098:	2200      	movs	r2, #0
 800609a:	4b62      	ldr	r3, [pc, #392]	; (8006224 <_dtoa_r+0x5b4>)
 800609c:	f7fa f866 	bl	800016c <__adddf3>
 80060a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80060a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060a8:	9611      	str	r6, [sp, #68]	; 0x44
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	d15d      	bne.n	800616a <_dtoa_r+0x4fa>
 80060ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b2:	2200      	movs	r2, #0
 80060b4:	4b5c      	ldr	r3, [pc, #368]	; (8006228 <_dtoa_r+0x5b8>)
 80060b6:	f7fa f857 	bl	8000168 <__aeabi_dsub>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060c2:	4633      	mov	r3, r6
 80060c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060c6:	f7fa fc97 	bl	80009f8 <__aeabi_dcmpgt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f040 829c 	bne.w	8006608 <_dtoa_r+0x998>
 80060d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80060da:	f7fa fc6f 	bl	80009bc <__aeabi_dcmplt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	f040 8290 	bne.w	8006604 <_dtoa_r+0x994>
 80060e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80060e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f2c0 8152 	blt.w	8006398 <_dtoa_r+0x728>
 80060f4:	f1ba 0f0e 	cmp.w	sl, #14
 80060f8:	f300 814e 	bgt.w	8006398 <_dtoa_r+0x728>
 80060fc:	4b45      	ldr	r3, [pc, #276]	; (8006214 <_dtoa_r+0x5a4>)
 80060fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006102:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006106:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800610a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800610c:	2b00      	cmp	r3, #0
 800610e:	f280 80db 	bge.w	80062c8 <_dtoa_r+0x658>
 8006112:	9b08      	ldr	r3, [sp, #32]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f300 80d7 	bgt.w	80062c8 <_dtoa_r+0x658>
 800611a:	f040 8272 	bne.w	8006602 <_dtoa_r+0x992>
 800611e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006122:	2200      	movs	r2, #0
 8006124:	4b40      	ldr	r3, [pc, #256]	; (8006228 <_dtoa_r+0x5b8>)
 8006126:	f7fa f9d7 	bl	80004d8 <__aeabi_dmul>
 800612a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800612e:	f7fa fc59 	bl	80009e4 <__aeabi_dcmpge>
 8006132:	9c08      	ldr	r4, [sp, #32]
 8006134:	4626      	mov	r6, r4
 8006136:	2800      	cmp	r0, #0
 8006138:	f040 8248 	bne.w	80065cc <_dtoa_r+0x95c>
 800613c:	2331      	movs	r3, #49	; 0x31
 800613e:	9f03      	ldr	r7, [sp, #12]
 8006140:	f10a 0a01 	add.w	sl, sl, #1
 8006144:	f807 3b01 	strb.w	r3, [r7], #1
 8006148:	e244      	b.n	80065d4 <_dtoa_r+0x964>
 800614a:	07e2      	lsls	r2, r4, #31
 800614c:	d505      	bpl.n	800615a <_dtoa_r+0x4ea>
 800614e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006152:	f7fa f9c1 	bl	80004d8 <__aeabi_dmul>
 8006156:	2301      	movs	r3, #1
 8006158:	3701      	adds	r7, #1
 800615a:	1064      	asrs	r4, r4, #1
 800615c:	3608      	adds	r6, #8
 800615e:	e76d      	b.n	800603c <_dtoa_r+0x3cc>
 8006160:	2702      	movs	r7, #2
 8006162:	e770      	b.n	8006046 <_dtoa_r+0x3d6>
 8006164:	46d0      	mov	r8, sl
 8006166:	9c08      	ldr	r4, [sp, #32]
 8006168:	e78f      	b.n	800608a <_dtoa_r+0x41a>
 800616a:	9903      	ldr	r1, [sp, #12]
 800616c:	4b29      	ldr	r3, [pc, #164]	; (8006214 <_dtoa_r+0x5a4>)
 800616e:	4421      	add	r1, r4
 8006170:	9112      	str	r1, [sp, #72]	; 0x48
 8006172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006178:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800617c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006180:	2900      	cmp	r1, #0
 8006182:	d055      	beq.n	8006230 <_dtoa_r+0x5c0>
 8006184:	2000      	movs	r0, #0
 8006186:	4929      	ldr	r1, [pc, #164]	; (800622c <_dtoa_r+0x5bc>)
 8006188:	f7fa fad0 	bl	800072c <__aeabi_ddiv>
 800618c:	463b      	mov	r3, r7
 800618e:	4632      	mov	r2, r6
 8006190:	f7f9 ffea 	bl	8000168 <__aeabi_dsub>
 8006194:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006198:	9f03      	ldr	r7, [sp, #12]
 800619a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800619e:	f7fa fc4b 	bl	8000a38 <__aeabi_d2iz>
 80061a2:	4604      	mov	r4, r0
 80061a4:	f7fa f92e 	bl	8000404 <__aeabi_i2d>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b0:	f7f9 ffda 	bl	8000168 <__aeabi_dsub>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	3430      	adds	r4, #48	; 0x30
 80061ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061c2:	f807 4b01 	strb.w	r4, [r7], #1
 80061c6:	f7fa fbf9 	bl	80009bc <__aeabi_dcmplt>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d174      	bne.n	80062b8 <_dtoa_r+0x648>
 80061ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d2:	2000      	movs	r0, #0
 80061d4:	4911      	ldr	r1, [pc, #68]	; (800621c <_dtoa_r+0x5ac>)
 80061d6:	f7f9 ffc7 	bl	8000168 <__aeabi_dsub>
 80061da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061de:	f7fa fbed 	bl	80009bc <__aeabi_dcmplt>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f040 80b7 	bne.w	8006356 <_dtoa_r+0x6e6>
 80061e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061ea:	429f      	cmp	r7, r3
 80061ec:	f43f af7a 	beq.w	80060e4 <_dtoa_r+0x474>
 80061f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061f4:	2200      	movs	r2, #0
 80061f6:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <_dtoa_r+0x5b0>)
 80061f8:	f7fa f96e 	bl	80004d8 <__aeabi_dmul>
 80061fc:	2200      	movs	r2, #0
 80061fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <_dtoa_r+0x5b0>)
 8006208:	f7fa f966 	bl	80004d8 <__aeabi_dmul>
 800620c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006210:	e7c3      	b.n	800619a <_dtoa_r+0x52a>
 8006212:	bf00      	nop
 8006214:	080081e8 	.word	0x080081e8
 8006218:	080081c0 	.word	0x080081c0
 800621c:	3ff00000 	.word	0x3ff00000
 8006220:	40240000 	.word	0x40240000
 8006224:	401c0000 	.word	0x401c0000
 8006228:	40140000 	.word	0x40140000
 800622c:	3fe00000 	.word	0x3fe00000
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f7fa f950 	bl	80004d8 <__aeabi_dmul>
 8006238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800623a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800623e:	9c03      	ldr	r4, [sp, #12]
 8006240:	9314      	str	r3, [sp, #80]	; 0x50
 8006242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006246:	f7fa fbf7 	bl	8000a38 <__aeabi_d2iz>
 800624a:	9015      	str	r0, [sp, #84]	; 0x54
 800624c:	f7fa f8da 	bl	8000404 <__aeabi_i2d>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006258:	f7f9 ff86 	bl	8000168 <__aeabi_dsub>
 800625c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800625e:	4606      	mov	r6, r0
 8006260:	3330      	adds	r3, #48	; 0x30
 8006262:	f804 3b01 	strb.w	r3, [r4], #1
 8006266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006268:	460f      	mov	r7, r1
 800626a:	429c      	cmp	r4, r3
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	d124      	bne.n	80062bc <_dtoa_r+0x64c>
 8006272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006276:	4bb0      	ldr	r3, [pc, #704]	; (8006538 <_dtoa_r+0x8c8>)
 8006278:	f7f9 ff78 	bl	800016c <__adddf3>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7fa fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 8006288:	2800      	cmp	r0, #0
 800628a:	d163      	bne.n	8006354 <_dtoa_r+0x6e4>
 800628c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006290:	2000      	movs	r0, #0
 8006292:	49a9      	ldr	r1, [pc, #676]	; (8006538 <_dtoa_r+0x8c8>)
 8006294:	f7f9 ff68 	bl	8000168 <__aeabi_dsub>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4630      	mov	r0, r6
 800629e:	4639      	mov	r1, r7
 80062a0:	f7fa fb8c 	bl	80009bc <__aeabi_dcmplt>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f43f af1d 	beq.w	80060e4 <_dtoa_r+0x474>
 80062aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062ac:	1e7b      	subs	r3, r7, #1
 80062ae:	9314      	str	r3, [sp, #80]	; 0x50
 80062b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d0f8      	beq.n	80062aa <_dtoa_r+0x63a>
 80062b8:	46c2      	mov	sl, r8
 80062ba:	e03b      	b.n	8006334 <_dtoa_r+0x6c4>
 80062bc:	4b9f      	ldr	r3, [pc, #636]	; (800653c <_dtoa_r+0x8cc>)
 80062be:	f7fa f90b 	bl	80004d8 <__aeabi_dmul>
 80062c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062c6:	e7bc      	b.n	8006242 <_dtoa_r+0x5d2>
 80062c8:	9f03      	ldr	r7, [sp, #12]
 80062ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80062ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f7fa fa29 	bl	800072c <__aeabi_ddiv>
 80062da:	f7fa fbad 	bl	8000a38 <__aeabi_d2iz>
 80062de:	4604      	mov	r4, r0
 80062e0:	f7fa f890 	bl	8000404 <__aeabi_i2d>
 80062e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062e8:	f7fa f8f6 	bl	80004d8 <__aeabi_dmul>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7f9 ff38 	bl	8000168 <__aeabi_dsub>
 80062f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80062fc:	f807 6b01 	strb.w	r6, [r7], #1
 8006300:	9e03      	ldr	r6, [sp, #12]
 8006302:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006306:	1bbe      	subs	r6, r7, r6
 8006308:	45b4      	cmp	ip, r6
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	d136      	bne.n	800637e <_dtoa_r+0x70e>
 8006310:	f7f9 ff2c 	bl	800016c <__adddf3>
 8006314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006318:	4680      	mov	r8, r0
 800631a:	4689      	mov	r9, r1
 800631c:	f7fa fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8006320:	bb58      	cbnz	r0, 800637a <_dtoa_r+0x70a>
 8006322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7fa fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800632e:	b108      	cbz	r0, 8006334 <_dtoa_r+0x6c4>
 8006330:	07e1      	lsls	r1, r4, #31
 8006332:	d422      	bmi.n	800637a <_dtoa_r+0x70a>
 8006334:	4628      	mov	r0, r5
 8006336:	4659      	mov	r1, fp
 8006338:	f000 faf0 	bl	800691c <_Bfree>
 800633c:	2300      	movs	r3, #0
 800633e:	703b      	strb	r3, [r7, #0]
 8006340:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006342:	f10a 0001 	add.w	r0, sl, #1
 8006346:	6018      	str	r0, [r3, #0]
 8006348:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800634a:	2b00      	cmp	r3, #0
 800634c:	f43f acde 	beq.w	8005d0c <_dtoa_r+0x9c>
 8006350:	601f      	str	r7, [r3, #0]
 8006352:	e4db      	b.n	8005d0c <_dtoa_r+0x9c>
 8006354:	4627      	mov	r7, r4
 8006356:	463b      	mov	r3, r7
 8006358:	461f      	mov	r7, r3
 800635a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800635e:	2a39      	cmp	r2, #57	; 0x39
 8006360:	d107      	bne.n	8006372 <_dtoa_r+0x702>
 8006362:	9a03      	ldr	r2, [sp, #12]
 8006364:	429a      	cmp	r2, r3
 8006366:	d1f7      	bne.n	8006358 <_dtoa_r+0x6e8>
 8006368:	2230      	movs	r2, #48	; 0x30
 800636a:	9903      	ldr	r1, [sp, #12]
 800636c:	f108 0801 	add.w	r8, r8, #1
 8006370:	700a      	strb	r2, [r1, #0]
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	3201      	adds	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e79e      	b.n	80062b8 <_dtoa_r+0x648>
 800637a:	46d0      	mov	r8, sl
 800637c:	e7eb      	b.n	8006356 <_dtoa_r+0x6e6>
 800637e:	2200      	movs	r2, #0
 8006380:	4b6e      	ldr	r3, [pc, #440]	; (800653c <_dtoa_r+0x8cc>)
 8006382:	f7fa f8a9 	bl	80004d8 <__aeabi_dmul>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4680      	mov	r8, r0
 800638c:	4689      	mov	r9, r1
 800638e:	f7fa fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 8006392:	2800      	cmp	r0, #0
 8006394:	d09b      	beq.n	80062ce <_dtoa_r+0x65e>
 8006396:	e7cd      	b.n	8006334 <_dtoa_r+0x6c4>
 8006398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800639a:	2a00      	cmp	r2, #0
 800639c:	f000 80d0 	beq.w	8006540 <_dtoa_r+0x8d0>
 80063a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063a2:	2a01      	cmp	r2, #1
 80063a4:	f300 80ae 	bgt.w	8006504 <_dtoa_r+0x894>
 80063a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	f000 80a6 	beq.w	80064fc <_dtoa_r+0x88c>
 80063b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063b6:	9f06      	ldr	r7, [sp, #24]
 80063b8:	9a06      	ldr	r2, [sp, #24]
 80063ba:	2101      	movs	r1, #1
 80063bc:	441a      	add	r2, r3
 80063be:	9206      	str	r2, [sp, #24]
 80063c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c2:	4628      	mov	r0, r5
 80063c4:	441a      	add	r2, r3
 80063c6:	9209      	str	r2, [sp, #36]	; 0x24
 80063c8:	f000 fb5e 	bl	8006a88 <__i2b>
 80063cc:	4606      	mov	r6, r0
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	dd0c      	ble.n	80063ec <_dtoa_r+0x77c>
 80063d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	dd09      	ble.n	80063ec <_dtoa_r+0x77c>
 80063d8:	42bb      	cmp	r3, r7
 80063da:	bfa8      	it	ge
 80063dc:	463b      	movge	r3, r7
 80063de:	9a06      	ldr	r2, [sp, #24]
 80063e0:	1aff      	subs	r7, r7, r3
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	9206      	str	r2, [sp, #24]
 80063e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	9309      	str	r3, [sp, #36]	; 0x24
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	b1f3      	cbz	r3, 800642e <_dtoa_r+0x7be>
 80063f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80a8 	beq.w	8006548 <_dtoa_r+0x8d8>
 80063f8:	2c00      	cmp	r4, #0
 80063fa:	dd10      	ble.n	800641e <_dtoa_r+0x7ae>
 80063fc:	4631      	mov	r1, r6
 80063fe:	4622      	mov	r2, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fbff 	bl	8006c04 <__pow5mult>
 8006406:	465a      	mov	r2, fp
 8006408:	4601      	mov	r1, r0
 800640a:	4606      	mov	r6, r0
 800640c:	4628      	mov	r0, r5
 800640e:	f000 fb51 	bl	8006ab4 <__multiply>
 8006412:	4680      	mov	r8, r0
 8006414:	4659      	mov	r1, fp
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fa80 	bl	800691c <_Bfree>
 800641c:	46c3      	mov	fp, r8
 800641e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006420:	1b1a      	subs	r2, r3, r4
 8006422:	d004      	beq.n	800642e <_dtoa_r+0x7be>
 8006424:	4659      	mov	r1, fp
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fbec 	bl	8006c04 <__pow5mult>
 800642c:	4683      	mov	fp, r0
 800642e:	2101      	movs	r1, #1
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fb29 	bl	8006a88 <__i2b>
 8006436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006438:	4604      	mov	r4, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	f340 8086 	ble.w	800654c <_dtoa_r+0x8dc>
 8006440:	461a      	mov	r2, r3
 8006442:	4601      	mov	r1, r0
 8006444:	4628      	mov	r0, r5
 8006446:	f000 fbdd 	bl	8006c04 <__pow5mult>
 800644a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800644c:	4604      	mov	r4, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	dd7f      	ble.n	8006552 <_dtoa_r+0x8e2>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800645c:	6918      	ldr	r0, [r3, #16]
 800645e:	f000 fac5 	bl	80069ec <__hi0bits>
 8006462:	f1c0 0020 	rsb	r0, r0, #32
 8006466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006468:	4418      	add	r0, r3
 800646a:	f010 001f 	ands.w	r0, r0, #31
 800646e:	f000 8092 	beq.w	8006596 <_dtoa_r+0x926>
 8006472:	f1c0 0320 	rsb	r3, r0, #32
 8006476:	2b04      	cmp	r3, #4
 8006478:	f340 808a 	ble.w	8006590 <_dtoa_r+0x920>
 800647c:	f1c0 001c 	rsb	r0, r0, #28
 8006480:	9b06      	ldr	r3, [sp, #24]
 8006482:	4407      	add	r7, r0
 8006484:	4403      	add	r3, r0
 8006486:	9306      	str	r3, [sp, #24]
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	4403      	add	r3, r0
 800648c:	9309      	str	r3, [sp, #36]	; 0x24
 800648e:	9b06      	ldr	r3, [sp, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	dd05      	ble.n	80064a0 <_dtoa_r+0x830>
 8006494:	4659      	mov	r1, fp
 8006496:	461a      	mov	r2, r3
 8006498:	4628      	mov	r0, r5
 800649a:	f000 fc0d 	bl	8006cb8 <__lshift>
 800649e:	4683      	mov	fp, r0
 80064a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dd05      	ble.n	80064b2 <_dtoa_r+0x842>
 80064a6:	4621      	mov	r1, r4
 80064a8:	461a      	mov	r2, r3
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 fc04 	bl	8006cb8 <__lshift>
 80064b0:	4604      	mov	r4, r0
 80064b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d070      	beq.n	800659a <_dtoa_r+0x92a>
 80064b8:	4621      	mov	r1, r4
 80064ba:	4658      	mov	r0, fp
 80064bc:	f000 fc6c 	bl	8006d98 <__mcmp>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	da6a      	bge.n	800659a <_dtoa_r+0x92a>
 80064c4:	2300      	movs	r3, #0
 80064c6:	4659      	mov	r1, fp
 80064c8:	220a      	movs	r2, #10
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fa48 	bl	8006960 <__multadd>
 80064d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d2:	4683      	mov	fp, r0
 80064d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8194 	beq.w	8006806 <_dtoa_r+0xb96>
 80064de:	4631      	mov	r1, r6
 80064e0:	2300      	movs	r3, #0
 80064e2:	220a      	movs	r2, #10
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 fa3b 	bl	8006960 <__multadd>
 80064ea:	f1b9 0f00 	cmp.w	r9, #0
 80064ee:	4606      	mov	r6, r0
 80064f0:	f300 8093 	bgt.w	800661a <_dtoa_r+0x9aa>
 80064f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	dc57      	bgt.n	80065aa <_dtoa_r+0x93a>
 80064fa:	e08e      	b.n	800661a <_dtoa_r+0x9aa>
 80064fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006502:	e757      	b.n	80063b4 <_dtoa_r+0x744>
 8006504:	9b08      	ldr	r3, [sp, #32]
 8006506:	1e5c      	subs	r4, r3, #1
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	42a3      	cmp	r3, r4
 800650c:	bfb7      	itett	lt
 800650e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006510:	1b1c      	subge	r4, r3, r4
 8006512:	1ae2      	sublt	r2, r4, r3
 8006514:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006516:	bfbe      	ittt	lt
 8006518:	940a      	strlt	r4, [sp, #40]	; 0x28
 800651a:	189b      	addlt	r3, r3, r2
 800651c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800651e:	9b08      	ldr	r3, [sp, #32]
 8006520:	bfb8      	it	lt
 8006522:	2400      	movlt	r4, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	bfbb      	ittet	lt
 8006528:	9b06      	ldrlt	r3, [sp, #24]
 800652a:	9a08      	ldrlt	r2, [sp, #32]
 800652c:	9f06      	ldrge	r7, [sp, #24]
 800652e:	1a9f      	sublt	r7, r3, r2
 8006530:	bfac      	ite	ge
 8006532:	9b08      	ldrge	r3, [sp, #32]
 8006534:	2300      	movlt	r3, #0
 8006536:	e73f      	b.n	80063b8 <_dtoa_r+0x748>
 8006538:	3fe00000 	.word	0x3fe00000
 800653c:	40240000 	.word	0x40240000
 8006540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006542:	9f06      	ldr	r7, [sp, #24]
 8006544:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006546:	e742      	b.n	80063ce <_dtoa_r+0x75e>
 8006548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800654a:	e76b      	b.n	8006424 <_dtoa_r+0x7b4>
 800654c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800654e:	2b01      	cmp	r3, #1
 8006550:	dc19      	bgt.n	8006586 <_dtoa_r+0x916>
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	b9bb      	cbnz	r3, 8006586 <_dtoa_r+0x916>
 8006556:	9b05      	ldr	r3, [sp, #20]
 8006558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800655c:	b99b      	cbnz	r3, 8006586 <_dtoa_r+0x916>
 800655e:	9b05      	ldr	r3, [sp, #20]
 8006560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	051b      	lsls	r3, r3, #20
 8006568:	b183      	cbz	r3, 800658c <_dtoa_r+0x91c>
 800656a:	f04f 0801 	mov.w	r8, #1
 800656e:	9b06      	ldr	r3, [sp, #24]
 8006570:	3301      	adds	r3, #1
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006576:	3301      	adds	r3, #1
 8006578:	9309      	str	r3, [sp, #36]	; 0x24
 800657a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800657c:	2b00      	cmp	r3, #0
 800657e:	f47f af6a 	bne.w	8006456 <_dtoa_r+0x7e6>
 8006582:	2001      	movs	r0, #1
 8006584:	e76f      	b.n	8006466 <_dtoa_r+0x7f6>
 8006586:	f04f 0800 	mov.w	r8, #0
 800658a:	e7f6      	b.n	800657a <_dtoa_r+0x90a>
 800658c:	4698      	mov	r8, r3
 800658e:	e7f4      	b.n	800657a <_dtoa_r+0x90a>
 8006590:	f43f af7d 	beq.w	800648e <_dtoa_r+0x81e>
 8006594:	4618      	mov	r0, r3
 8006596:	301c      	adds	r0, #28
 8006598:	e772      	b.n	8006480 <_dtoa_r+0x810>
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dc36      	bgt.n	800660e <_dtoa_r+0x99e>
 80065a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	dd33      	ble.n	800660e <_dtoa_r+0x99e>
 80065a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	d10d      	bne.n	80065cc <_dtoa_r+0x95c>
 80065b0:	4621      	mov	r1, r4
 80065b2:	464b      	mov	r3, r9
 80065b4:	2205      	movs	r2, #5
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 f9d2 	bl	8006960 <__multadd>
 80065bc:	4601      	mov	r1, r0
 80065be:	4604      	mov	r4, r0
 80065c0:	4658      	mov	r0, fp
 80065c2:	f000 fbe9 	bl	8006d98 <__mcmp>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f73f adb8 	bgt.w	800613c <_dtoa_r+0x4cc>
 80065cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065ce:	9f03      	ldr	r7, [sp, #12]
 80065d0:	ea6f 0a03 	mvn.w	sl, r3
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	4621      	mov	r1, r4
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 f99e 	bl	800691c <_Bfree>
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	f43f aea7 	beq.w	8006334 <_dtoa_r+0x6c4>
 80065e6:	f1b8 0f00 	cmp.w	r8, #0
 80065ea:	d005      	beq.n	80065f8 <_dtoa_r+0x988>
 80065ec:	45b0      	cmp	r8, r6
 80065ee:	d003      	beq.n	80065f8 <_dtoa_r+0x988>
 80065f0:	4641      	mov	r1, r8
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f992 	bl	800691c <_Bfree>
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f98e 	bl	800691c <_Bfree>
 8006600:	e698      	b.n	8006334 <_dtoa_r+0x6c4>
 8006602:	2400      	movs	r4, #0
 8006604:	4626      	mov	r6, r4
 8006606:	e7e1      	b.n	80065cc <_dtoa_r+0x95c>
 8006608:	46c2      	mov	sl, r8
 800660a:	4626      	mov	r6, r4
 800660c:	e596      	b.n	800613c <_dtoa_r+0x4cc>
 800660e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 80fd 	beq.w	8006814 <_dtoa_r+0xba4>
 800661a:	2f00      	cmp	r7, #0
 800661c:	dd05      	ble.n	800662a <_dtoa_r+0x9ba>
 800661e:	4631      	mov	r1, r6
 8006620:	463a      	mov	r2, r7
 8006622:	4628      	mov	r0, r5
 8006624:	f000 fb48 	bl	8006cb8 <__lshift>
 8006628:	4606      	mov	r6, r0
 800662a:	f1b8 0f00 	cmp.w	r8, #0
 800662e:	d05c      	beq.n	80066ea <_dtoa_r+0xa7a>
 8006630:	4628      	mov	r0, r5
 8006632:	6871      	ldr	r1, [r6, #4]
 8006634:	f000 f932 	bl	800689c <_Balloc>
 8006638:	4607      	mov	r7, r0
 800663a:	b928      	cbnz	r0, 8006648 <_dtoa_r+0x9d8>
 800663c:	4602      	mov	r2, r0
 800663e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006642:	4b7f      	ldr	r3, [pc, #508]	; (8006840 <_dtoa_r+0xbd0>)
 8006644:	f7ff bb28 	b.w	8005c98 <_dtoa_r+0x28>
 8006648:	6932      	ldr	r2, [r6, #16]
 800664a:	f106 010c 	add.w	r1, r6, #12
 800664e:	3202      	adds	r2, #2
 8006650:	0092      	lsls	r2, r2, #2
 8006652:	300c      	adds	r0, #12
 8006654:	f000 f914 	bl	8006880 <memcpy>
 8006658:	2201      	movs	r2, #1
 800665a:	4639      	mov	r1, r7
 800665c:	4628      	mov	r0, r5
 800665e:	f000 fb2b 	bl	8006cb8 <__lshift>
 8006662:	46b0      	mov	r8, r6
 8006664:	4606      	mov	r6, r0
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	9308      	str	r3, [sp, #32]
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	444b      	add	r3, r9
 8006670:	930a      	str	r3, [sp, #40]	; 0x28
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	9309      	str	r3, [sp, #36]	; 0x24
 800667a:	9b08      	ldr	r3, [sp, #32]
 800667c:	4621      	mov	r1, r4
 800667e:	3b01      	subs	r3, #1
 8006680:	4658      	mov	r0, fp
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	f7ff fa68 	bl	8005b58 <quorem>
 8006688:	4603      	mov	r3, r0
 800668a:	4641      	mov	r1, r8
 800668c:	3330      	adds	r3, #48	; 0x30
 800668e:	9006      	str	r0, [sp, #24]
 8006690:	4658      	mov	r0, fp
 8006692:	930b      	str	r3, [sp, #44]	; 0x2c
 8006694:	f000 fb80 	bl	8006d98 <__mcmp>
 8006698:	4632      	mov	r2, r6
 800669a:	4681      	mov	r9, r0
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fb96 	bl	8006dd0 <__mdiff>
 80066a4:	68c2      	ldr	r2, [r0, #12]
 80066a6:	4607      	mov	r7, r0
 80066a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066aa:	bb02      	cbnz	r2, 80066ee <_dtoa_r+0xa7e>
 80066ac:	4601      	mov	r1, r0
 80066ae:	4658      	mov	r0, fp
 80066b0:	f000 fb72 	bl	8006d98 <__mcmp>
 80066b4:	4602      	mov	r2, r0
 80066b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b8:	4639      	mov	r1, r7
 80066ba:	4628      	mov	r0, r5
 80066bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80066c0:	f000 f92c 	bl	800691c <_Bfree>
 80066c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066c8:	9f08      	ldr	r7, [sp, #32]
 80066ca:	ea43 0102 	orr.w	r1, r3, r2
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	430b      	orrs	r3, r1
 80066d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d4:	d10d      	bne.n	80066f2 <_dtoa_r+0xa82>
 80066d6:	2b39      	cmp	r3, #57	; 0x39
 80066d8:	d029      	beq.n	800672e <_dtoa_r+0xabe>
 80066da:	f1b9 0f00 	cmp.w	r9, #0
 80066de:	dd01      	ble.n	80066e4 <_dtoa_r+0xa74>
 80066e0:	9b06      	ldr	r3, [sp, #24]
 80066e2:	3331      	adds	r3, #49	; 0x31
 80066e4:	9a04      	ldr	r2, [sp, #16]
 80066e6:	7013      	strb	r3, [r2, #0]
 80066e8:	e776      	b.n	80065d8 <_dtoa_r+0x968>
 80066ea:	4630      	mov	r0, r6
 80066ec:	e7b9      	b.n	8006662 <_dtoa_r+0x9f2>
 80066ee:	2201      	movs	r2, #1
 80066f0:	e7e2      	b.n	80066b8 <_dtoa_r+0xa48>
 80066f2:	f1b9 0f00 	cmp.w	r9, #0
 80066f6:	db06      	blt.n	8006706 <_dtoa_r+0xa96>
 80066f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80066fa:	ea41 0909 	orr.w	r9, r1, r9
 80066fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006700:	ea59 0101 	orrs.w	r1, r9, r1
 8006704:	d120      	bne.n	8006748 <_dtoa_r+0xad8>
 8006706:	2a00      	cmp	r2, #0
 8006708:	ddec      	ble.n	80066e4 <_dtoa_r+0xa74>
 800670a:	4659      	mov	r1, fp
 800670c:	2201      	movs	r2, #1
 800670e:	4628      	mov	r0, r5
 8006710:	9308      	str	r3, [sp, #32]
 8006712:	f000 fad1 	bl	8006cb8 <__lshift>
 8006716:	4621      	mov	r1, r4
 8006718:	4683      	mov	fp, r0
 800671a:	f000 fb3d 	bl	8006d98 <__mcmp>
 800671e:	2800      	cmp	r0, #0
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	dc02      	bgt.n	800672a <_dtoa_r+0xaba>
 8006724:	d1de      	bne.n	80066e4 <_dtoa_r+0xa74>
 8006726:	07da      	lsls	r2, r3, #31
 8006728:	d5dc      	bpl.n	80066e4 <_dtoa_r+0xa74>
 800672a:	2b39      	cmp	r3, #57	; 0x39
 800672c:	d1d8      	bne.n	80066e0 <_dtoa_r+0xa70>
 800672e:	2339      	movs	r3, #57	; 0x39
 8006730:	9a04      	ldr	r2, [sp, #16]
 8006732:	7013      	strb	r3, [r2, #0]
 8006734:	463b      	mov	r3, r7
 8006736:	461f      	mov	r7, r3
 8006738:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800673c:	3b01      	subs	r3, #1
 800673e:	2a39      	cmp	r2, #57	; 0x39
 8006740:	d050      	beq.n	80067e4 <_dtoa_r+0xb74>
 8006742:	3201      	adds	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e747      	b.n	80065d8 <_dtoa_r+0x968>
 8006748:	2a00      	cmp	r2, #0
 800674a:	dd03      	ble.n	8006754 <_dtoa_r+0xae4>
 800674c:	2b39      	cmp	r3, #57	; 0x39
 800674e:	d0ee      	beq.n	800672e <_dtoa_r+0xabe>
 8006750:	3301      	adds	r3, #1
 8006752:	e7c7      	b.n	80066e4 <_dtoa_r+0xa74>
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006758:	f802 3c01 	strb.w	r3, [r2, #-1]
 800675c:	428a      	cmp	r2, r1
 800675e:	d02a      	beq.n	80067b6 <_dtoa_r+0xb46>
 8006760:	4659      	mov	r1, fp
 8006762:	2300      	movs	r3, #0
 8006764:	220a      	movs	r2, #10
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f8fa 	bl	8006960 <__multadd>
 800676c:	45b0      	cmp	r8, r6
 800676e:	4683      	mov	fp, r0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	f04f 020a 	mov.w	r2, #10
 8006778:	4641      	mov	r1, r8
 800677a:	4628      	mov	r0, r5
 800677c:	d107      	bne.n	800678e <_dtoa_r+0xb1e>
 800677e:	f000 f8ef 	bl	8006960 <__multadd>
 8006782:	4680      	mov	r8, r0
 8006784:	4606      	mov	r6, r0
 8006786:	9b08      	ldr	r3, [sp, #32]
 8006788:	3301      	adds	r3, #1
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	e775      	b.n	800667a <_dtoa_r+0xa0a>
 800678e:	f000 f8e7 	bl	8006960 <__multadd>
 8006792:	4631      	mov	r1, r6
 8006794:	4680      	mov	r8, r0
 8006796:	2300      	movs	r3, #0
 8006798:	220a      	movs	r2, #10
 800679a:	4628      	mov	r0, r5
 800679c:	f000 f8e0 	bl	8006960 <__multadd>
 80067a0:	4606      	mov	r6, r0
 80067a2:	e7f0      	b.n	8006786 <_dtoa_r+0xb16>
 80067a4:	f1b9 0f00 	cmp.w	r9, #0
 80067a8:	bfcc      	ite	gt
 80067aa:	464f      	movgt	r7, r9
 80067ac:	2701      	movle	r7, #1
 80067ae:	f04f 0800 	mov.w	r8, #0
 80067b2:	9a03      	ldr	r2, [sp, #12]
 80067b4:	4417      	add	r7, r2
 80067b6:	4659      	mov	r1, fp
 80067b8:	2201      	movs	r2, #1
 80067ba:	4628      	mov	r0, r5
 80067bc:	9308      	str	r3, [sp, #32]
 80067be:	f000 fa7b 	bl	8006cb8 <__lshift>
 80067c2:	4621      	mov	r1, r4
 80067c4:	4683      	mov	fp, r0
 80067c6:	f000 fae7 	bl	8006d98 <__mcmp>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	dcb2      	bgt.n	8006734 <_dtoa_r+0xac4>
 80067ce:	d102      	bne.n	80067d6 <_dtoa_r+0xb66>
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d4ae      	bmi.n	8006734 <_dtoa_r+0xac4>
 80067d6:	463b      	mov	r3, r7
 80067d8:	461f      	mov	r7, r3
 80067da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067de:	2a30      	cmp	r2, #48	; 0x30
 80067e0:	d0fa      	beq.n	80067d8 <_dtoa_r+0xb68>
 80067e2:	e6f9      	b.n	80065d8 <_dtoa_r+0x968>
 80067e4:	9a03      	ldr	r2, [sp, #12]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d1a5      	bne.n	8006736 <_dtoa_r+0xac6>
 80067ea:	2331      	movs	r3, #49	; 0x31
 80067ec:	f10a 0a01 	add.w	sl, sl, #1
 80067f0:	e779      	b.n	80066e6 <_dtoa_r+0xa76>
 80067f2:	4b14      	ldr	r3, [pc, #80]	; (8006844 <_dtoa_r+0xbd4>)
 80067f4:	f7ff baa8 	b.w	8005d48 <_dtoa_r+0xd8>
 80067f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f47f aa81 	bne.w	8005d02 <_dtoa_r+0x92>
 8006800:	4b11      	ldr	r3, [pc, #68]	; (8006848 <_dtoa_r+0xbd8>)
 8006802:	f7ff baa1 	b.w	8005d48 <_dtoa_r+0xd8>
 8006806:	f1b9 0f00 	cmp.w	r9, #0
 800680a:	dc03      	bgt.n	8006814 <_dtoa_r+0xba4>
 800680c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800680e:	2b02      	cmp	r3, #2
 8006810:	f73f aecb 	bgt.w	80065aa <_dtoa_r+0x93a>
 8006814:	9f03      	ldr	r7, [sp, #12]
 8006816:	4621      	mov	r1, r4
 8006818:	4658      	mov	r0, fp
 800681a:	f7ff f99d 	bl	8005b58 <quorem>
 800681e:	9a03      	ldr	r2, [sp, #12]
 8006820:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006824:	f807 3b01 	strb.w	r3, [r7], #1
 8006828:	1aba      	subs	r2, r7, r2
 800682a:	4591      	cmp	r9, r2
 800682c:	ddba      	ble.n	80067a4 <_dtoa_r+0xb34>
 800682e:	4659      	mov	r1, fp
 8006830:	2300      	movs	r3, #0
 8006832:	220a      	movs	r2, #10
 8006834:	4628      	mov	r0, r5
 8006836:	f000 f893 	bl	8006960 <__multadd>
 800683a:	4683      	mov	fp, r0
 800683c:	e7eb      	b.n	8006816 <_dtoa_r+0xba6>
 800683e:	bf00      	nop
 8006840:	08008153 	.word	0x08008153
 8006844:	080080b0 	.word	0x080080b0
 8006848:	080080d4 	.word	0x080080d4

0800684c <_localeconv_r>:
 800684c:	4800      	ldr	r0, [pc, #0]	; (8006850 <_localeconv_r+0x4>)
 800684e:	4770      	bx	lr
 8006850:	20000198 	.word	0x20000198

08006854 <malloc>:
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <malloc+0xc>)
 8006856:	4601      	mov	r1, r0
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	f000 bc1d 	b.w	8007098 <_malloc_r>
 800685e:	bf00      	nop
 8006860:	20000044 	.word	0x20000044

08006864 <memchr>:
 8006864:	4603      	mov	r3, r0
 8006866:	b510      	push	{r4, lr}
 8006868:	b2c9      	uxtb	r1, r1
 800686a:	4402      	add	r2, r0
 800686c:	4293      	cmp	r3, r2
 800686e:	4618      	mov	r0, r3
 8006870:	d101      	bne.n	8006876 <memchr+0x12>
 8006872:	2000      	movs	r0, #0
 8006874:	e003      	b.n	800687e <memchr+0x1a>
 8006876:	7804      	ldrb	r4, [r0, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	428c      	cmp	r4, r1
 800687c:	d1f6      	bne.n	800686c <memchr+0x8>
 800687e:	bd10      	pop	{r4, pc}

08006880 <memcpy>:
 8006880:	440a      	add	r2, r1
 8006882:	4291      	cmp	r1, r2
 8006884:	f100 33ff 	add.w	r3, r0, #4294967295
 8006888:	d100      	bne.n	800688c <memcpy+0xc>
 800688a:	4770      	bx	lr
 800688c:	b510      	push	{r4, lr}
 800688e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006892:	4291      	cmp	r1, r2
 8006894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006898:	d1f9      	bne.n	800688e <memcpy+0xe>
 800689a:	bd10      	pop	{r4, pc}

0800689c <_Balloc>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	b976      	cbnz	r6, 80068c4 <_Balloc+0x28>
 80068a6:	2010      	movs	r0, #16
 80068a8:	f7ff ffd4 	bl	8006854 <malloc>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6260      	str	r0, [r4, #36]	; 0x24
 80068b0:	b920      	cbnz	r0, 80068bc <_Balloc+0x20>
 80068b2:	2166      	movs	r1, #102	; 0x66
 80068b4:	4b17      	ldr	r3, [pc, #92]	; (8006914 <_Balloc+0x78>)
 80068b6:	4818      	ldr	r0, [pc, #96]	; (8006918 <_Balloc+0x7c>)
 80068b8:	f000 fdce 	bl	8007458 <__assert_func>
 80068bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068c0:	6006      	str	r6, [r0, #0]
 80068c2:	60c6      	str	r6, [r0, #12]
 80068c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068c6:	68f3      	ldr	r3, [r6, #12]
 80068c8:	b183      	cbz	r3, 80068ec <_Balloc+0x50>
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068d2:	b9b8      	cbnz	r0, 8006904 <_Balloc+0x68>
 80068d4:	2101      	movs	r1, #1
 80068d6:	fa01 f605 	lsl.w	r6, r1, r5
 80068da:	1d72      	adds	r2, r6, #5
 80068dc:	4620      	mov	r0, r4
 80068de:	0092      	lsls	r2, r2, #2
 80068e0:	f000 fb5e 	bl	8006fa0 <_calloc_r>
 80068e4:	b160      	cbz	r0, 8006900 <_Balloc+0x64>
 80068e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068ea:	e00e      	b.n	800690a <_Balloc+0x6e>
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	2104      	movs	r1, #4
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fb55 	bl	8006fa0 <_calloc_r>
 80068f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f8:	60f0      	str	r0, [r6, #12]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e4      	bne.n	80068ca <_Balloc+0x2e>
 8006900:	2000      	movs	r0, #0
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	6802      	ldr	r2, [r0, #0]
 8006906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800690a:	2300      	movs	r3, #0
 800690c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006910:	e7f7      	b.n	8006902 <_Balloc+0x66>
 8006912:	bf00      	nop
 8006914:	080080e1 	.word	0x080080e1
 8006918:	08008164 	.word	0x08008164

0800691c <_Bfree>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006920:	4605      	mov	r5, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b976      	cbnz	r6, 8006944 <_Bfree+0x28>
 8006926:	2010      	movs	r0, #16
 8006928:	f7ff ff94 	bl	8006854 <malloc>
 800692c:	4602      	mov	r2, r0
 800692e:	6268      	str	r0, [r5, #36]	; 0x24
 8006930:	b920      	cbnz	r0, 800693c <_Bfree+0x20>
 8006932:	218a      	movs	r1, #138	; 0x8a
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <_Bfree+0x3c>)
 8006936:	4809      	ldr	r0, [pc, #36]	; (800695c <_Bfree+0x40>)
 8006938:	f000 fd8e 	bl	8007458 <__assert_func>
 800693c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006940:	6006      	str	r6, [r0, #0]
 8006942:	60c6      	str	r6, [r0, #12]
 8006944:	b13c      	cbz	r4, 8006956 <_Bfree+0x3a>
 8006946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006948:	6862      	ldr	r2, [r4, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006950:	6021      	str	r1, [r4, #0]
 8006952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	080080e1 	.word	0x080080e1
 800695c:	08008164 	.word	0x08008164

08006960 <__multadd>:
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	4607      	mov	r7, r0
 8006966:	460c      	mov	r4, r1
 8006968:	461e      	mov	r6, r3
 800696a:	2000      	movs	r0, #0
 800696c:	690d      	ldr	r5, [r1, #16]
 800696e:	f101 0c14 	add.w	ip, r1, #20
 8006972:	f8dc 3000 	ldr.w	r3, [ip]
 8006976:	3001      	adds	r0, #1
 8006978:	b299      	uxth	r1, r3
 800697a:	fb02 6101 	mla	r1, r2, r1, r6
 800697e:	0c1e      	lsrs	r6, r3, #16
 8006980:	0c0b      	lsrs	r3, r1, #16
 8006982:	fb02 3306 	mla	r3, r2, r6, r3
 8006986:	b289      	uxth	r1, r1
 8006988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800698c:	4285      	cmp	r5, r0
 800698e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006992:	f84c 1b04 	str.w	r1, [ip], #4
 8006996:	dcec      	bgt.n	8006972 <__multadd+0x12>
 8006998:	b30e      	cbz	r6, 80069de <__multadd+0x7e>
 800699a:	68a3      	ldr	r3, [r4, #8]
 800699c:	42ab      	cmp	r3, r5
 800699e:	dc19      	bgt.n	80069d4 <__multadd+0x74>
 80069a0:	6861      	ldr	r1, [r4, #4]
 80069a2:	4638      	mov	r0, r7
 80069a4:	3101      	adds	r1, #1
 80069a6:	f7ff ff79 	bl	800689c <_Balloc>
 80069aa:	4680      	mov	r8, r0
 80069ac:	b928      	cbnz	r0, 80069ba <__multadd+0x5a>
 80069ae:	4602      	mov	r2, r0
 80069b0:	21b5      	movs	r1, #181	; 0xb5
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <__multadd+0x84>)
 80069b4:	480c      	ldr	r0, [pc, #48]	; (80069e8 <__multadd+0x88>)
 80069b6:	f000 fd4f 	bl	8007458 <__assert_func>
 80069ba:	6922      	ldr	r2, [r4, #16]
 80069bc:	f104 010c 	add.w	r1, r4, #12
 80069c0:	3202      	adds	r2, #2
 80069c2:	0092      	lsls	r2, r2, #2
 80069c4:	300c      	adds	r0, #12
 80069c6:	f7ff ff5b 	bl	8006880 <memcpy>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4638      	mov	r0, r7
 80069ce:	f7ff ffa5 	bl	800691c <_Bfree>
 80069d2:	4644      	mov	r4, r8
 80069d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069d8:	3501      	adds	r5, #1
 80069da:	615e      	str	r6, [r3, #20]
 80069dc:	6125      	str	r5, [r4, #16]
 80069de:	4620      	mov	r0, r4
 80069e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e4:	08008153 	.word	0x08008153
 80069e8:	08008164 	.word	0x08008164

080069ec <__hi0bits>:
 80069ec:	0c02      	lsrs	r2, r0, #16
 80069ee:	0412      	lsls	r2, r2, #16
 80069f0:	4603      	mov	r3, r0
 80069f2:	b9ca      	cbnz	r2, 8006a28 <__hi0bits+0x3c>
 80069f4:	0403      	lsls	r3, r0, #16
 80069f6:	2010      	movs	r0, #16
 80069f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069fc:	bf04      	itt	eq
 80069fe:	021b      	lsleq	r3, r3, #8
 8006a00:	3008      	addeq	r0, #8
 8006a02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a06:	bf04      	itt	eq
 8006a08:	011b      	lsleq	r3, r3, #4
 8006a0a:	3004      	addeq	r0, #4
 8006a0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a10:	bf04      	itt	eq
 8006a12:	009b      	lsleq	r3, r3, #2
 8006a14:	3002      	addeq	r0, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	db05      	blt.n	8006a26 <__hi0bits+0x3a>
 8006a1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a1e:	f100 0001 	add.w	r0, r0, #1
 8006a22:	bf08      	it	eq
 8006a24:	2020      	moveq	r0, #32
 8006a26:	4770      	bx	lr
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e7e5      	b.n	80069f8 <__hi0bits+0xc>

08006a2c <__lo0bits>:
 8006a2c:	6803      	ldr	r3, [r0, #0]
 8006a2e:	4602      	mov	r2, r0
 8006a30:	f013 0007 	ands.w	r0, r3, #7
 8006a34:	d00b      	beq.n	8006a4e <__lo0bits+0x22>
 8006a36:	07d9      	lsls	r1, r3, #31
 8006a38:	d421      	bmi.n	8006a7e <__lo0bits+0x52>
 8006a3a:	0798      	lsls	r0, r3, #30
 8006a3c:	bf49      	itett	mi
 8006a3e:	085b      	lsrmi	r3, r3, #1
 8006a40:	089b      	lsrpl	r3, r3, #2
 8006a42:	2001      	movmi	r0, #1
 8006a44:	6013      	strmi	r3, [r2, #0]
 8006a46:	bf5c      	itt	pl
 8006a48:	2002      	movpl	r0, #2
 8006a4a:	6013      	strpl	r3, [r2, #0]
 8006a4c:	4770      	bx	lr
 8006a4e:	b299      	uxth	r1, r3
 8006a50:	b909      	cbnz	r1, 8006a56 <__lo0bits+0x2a>
 8006a52:	2010      	movs	r0, #16
 8006a54:	0c1b      	lsrs	r3, r3, #16
 8006a56:	b2d9      	uxtb	r1, r3
 8006a58:	b909      	cbnz	r1, 8006a5e <__lo0bits+0x32>
 8006a5a:	3008      	adds	r0, #8
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	0719      	lsls	r1, r3, #28
 8006a60:	bf04      	itt	eq
 8006a62:	091b      	lsreq	r3, r3, #4
 8006a64:	3004      	addeq	r0, #4
 8006a66:	0799      	lsls	r1, r3, #30
 8006a68:	bf04      	itt	eq
 8006a6a:	089b      	lsreq	r3, r3, #2
 8006a6c:	3002      	addeq	r0, #2
 8006a6e:	07d9      	lsls	r1, r3, #31
 8006a70:	d403      	bmi.n	8006a7a <__lo0bits+0x4e>
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	f100 0001 	add.w	r0, r0, #1
 8006a78:	d003      	beq.n	8006a82 <__lo0bits+0x56>
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	2000      	movs	r0, #0
 8006a80:	4770      	bx	lr
 8006a82:	2020      	movs	r0, #32
 8006a84:	4770      	bx	lr
	...

08006a88 <__i2b>:
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	f7ff ff05 	bl	800689c <_Balloc>
 8006a92:	4602      	mov	r2, r0
 8006a94:	b928      	cbnz	r0, 8006aa2 <__i2b+0x1a>
 8006a96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a9a:	4b04      	ldr	r3, [pc, #16]	; (8006aac <__i2b+0x24>)
 8006a9c:	4804      	ldr	r0, [pc, #16]	; (8006ab0 <__i2b+0x28>)
 8006a9e:	f000 fcdb 	bl	8007458 <__assert_func>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	6144      	str	r4, [r0, #20]
 8006aa6:	6103      	str	r3, [r0, #16]
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	08008153 	.word	0x08008153
 8006ab0:	08008164 	.word	0x08008164

08006ab4 <__multiply>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	4691      	mov	r9, r2
 8006aba:	690a      	ldr	r2, [r1, #16]
 8006abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bfbe      	ittt	lt
 8006ac6:	460b      	movlt	r3, r1
 8006ac8:	464c      	movlt	r4, r9
 8006aca:	4699      	movlt	r9, r3
 8006acc:	6927      	ldr	r7, [r4, #16]
 8006ace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	eb07 060a 	add.w	r6, r7, sl
 8006ada:	42b3      	cmp	r3, r6
 8006adc:	b085      	sub	sp, #20
 8006ade:	bfb8      	it	lt
 8006ae0:	3101      	addlt	r1, #1
 8006ae2:	f7ff fedb 	bl	800689c <_Balloc>
 8006ae6:	b930      	cbnz	r0, 8006af6 <__multiply+0x42>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	f240 115d 	movw	r1, #349	; 0x15d
 8006aee:	4b43      	ldr	r3, [pc, #268]	; (8006bfc <__multiply+0x148>)
 8006af0:	4843      	ldr	r0, [pc, #268]	; (8006c00 <__multiply+0x14c>)
 8006af2:	f000 fcb1 	bl	8007458 <__assert_func>
 8006af6:	f100 0514 	add.w	r5, r0, #20
 8006afa:	462b      	mov	r3, r5
 8006afc:	2200      	movs	r2, #0
 8006afe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b02:	4543      	cmp	r3, r8
 8006b04:	d321      	bcc.n	8006b4a <__multiply+0x96>
 8006b06:	f104 0314 	add.w	r3, r4, #20
 8006b0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b0e:	f109 0314 	add.w	r3, r9, #20
 8006b12:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b16:	9202      	str	r2, [sp, #8]
 8006b18:	1b3a      	subs	r2, r7, r4
 8006b1a:	3a15      	subs	r2, #21
 8006b1c:	f022 0203 	bic.w	r2, r2, #3
 8006b20:	3204      	adds	r2, #4
 8006b22:	f104 0115 	add.w	r1, r4, #21
 8006b26:	428f      	cmp	r7, r1
 8006b28:	bf38      	it	cc
 8006b2a:	2204      	movcc	r2, #4
 8006b2c:	9201      	str	r2, [sp, #4]
 8006b2e:	9a02      	ldr	r2, [sp, #8]
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d80c      	bhi.n	8006b50 <__multiply+0x9c>
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	dd03      	ble.n	8006b42 <__multiply+0x8e>
 8006b3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d059      	beq.n	8006bf6 <__multiply+0x142>
 8006b42:	6106      	str	r6, [r0, #16]
 8006b44:	b005      	add	sp, #20
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	f843 2b04 	str.w	r2, [r3], #4
 8006b4e:	e7d8      	b.n	8006b02 <__multiply+0x4e>
 8006b50:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b54:	f1ba 0f00 	cmp.w	sl, #0
 8006b58:	d023      	beq.n	8006ba2 <__multiply+0xee>
 8006b5a:	46a9      	mov	r9, r5
 8006b5c:	f04f 0c00 	mov.w	ip, #0
 8006b60:	f104 0e14 	add.w	lr, r4, #20
 8006b64:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b68:	f8d9 1000 	ldr.w	r1, [r9]
 8006b6c:	fa1f fb82 	uxth.w	fp, r2
 8006b70:	b289      	uxth	r1, r1
 8006b72:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b76:	4461      	add	r1, ip
 8006b78:	f8d9 c000 	ldr.w	ip, [r9]
 8006b7c:	0c12      	lsrs	r2, r2, #16
 8006b7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b82:	fb0a c202 	mla	r2, sl, r2, ip
 8006b86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b8a:	b289      	uxth	r1, r1
 8006b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b90:	4577      	cmp	r7, lr
 8006b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b96:	f849 1b04 	str.w	r1, [r9], #4
 8006b9a:	d8e3      	bhi.n	8006b64 <__multiply+0xb0>
 8006b9c:	9a01      	ldr	r2, [sp, #4]
 8006b9e:	f845 c002 	str.w	ip, [r5, r2]
 8006ba2:	9a03      	ldr	r2, [sp, #12]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006baa:	f1b9 0f00 	cmp.w	r9, #0
 8006bae:	d020      	beq.n	8006bf2 <__multiply+0x13e>
 8006bb0:	46ae      	mov	lr, r5
 8006bb2:	f04f 0a00 	mov.w	sl, #0
 8006bb6:	6829      	ldr	r1, [r5, #0]
 8006bb8:	f104 0c14 	add.w	ip, r4, #20
 8006bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8006bc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006bc4:	b289      	uxth	r1, r1
 8006bc6:	fb09 220b 	mla	r2, r9, fp, r2
 8006bca:	4492      	add	sl, r2
 8006bcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006bd0:	f84e 1b04 	str.w	r1, [lr], #4
 8006bd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006bd8:	f8be 1000 	ldrh.w	r1, [lr]
 8006bdc:	0c12      	lsrs	r2, r2, #16
 8006bde:	fb09 1102 	mla	r1, r9, r2, r1
 8006be2:	4567      	cmp	r7, ip
 8006be4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006be8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bec:	d8e6      	bhi.n	8006bbc <__multiply+0x108>
 8006bee:	9a01      	ldr	r2, [sp, #4]
 8006bf0:	50a9      	str	r1, [r5, r2]
 8006bf2:	3504      	adds	r5, #4
 8006bf4:	e79b      	b.n	8006b2e <__multiply+0x7a>
 8006bf6:	3e01      	subs	r6, #1
 8006bf8:	e79d      	b.n	8006b36 <__multiply+0x82>
 8006bfa:	bf00      	nop
 8006bfc:	08008153 	.word	0x08008153
 8006c00:	08008164 	.word	0x08008164

08006c04 <__pow5mult>:
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	4615      	mov	r5, r2
 8006c0a:	f012 0203 	ands.w	r2, r2, #3
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	d007      	beq.n	8006c24 <__pow5mult+0x20>
 8006c14:	4c25      	ldr	r4, [pc, #148]	; (8006cac <__pow5mult+0xa8>)
 8006c16:	3a01      	subs	r2, #1
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c1e:	f7ff fe9f 	bl	8006960 <__multadd>
 8006c22:	4607      	mov	r7, r0
 8006c24:	10ad      	asrs	r5, r5, #2
 8006c26:	d03d      	beq.n	8006ca4 <__pow5mult+0xa0>
 8006c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c2a:	b97c      	cbnz	r4, 8006c4c <__pow5mult+0x48>
 8006c2c:	2010      	movs	r0, #16
 8006c2e:	f7ff fe11 	bl	8006854 <malloc>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6270      	str	r0, [r6, #36]	; 0x24
 8006c36:	b928      	cbnz	r0, 8006c44 <__pow5mult+0x40>
 8006c38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c3c:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <__pow5mult+0xac>)
 8006c3e:	481d      	ldr	r0, [pc, #116]	; (8006cb4 <__pow5mult+0xb0>)
 8006c40:	f000 fc0a 	bl	8007458 <__assert_func>
 8006c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c48:	6004      	str	r4, [r0, #0]
 8006c4a:	60c4      	str	r4, [r0, #12]
 8006c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c54:	b94c      	cbnz	r4, 8006c6a <__pow5mult+0x66>
 8006c56:	f240 2171 	movw	r1, #625	; 0x271
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff14 	bl	8006a88 <__i2b>
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	f04f 0900 	mov.w	r9, #0
 8006c6e:	07eb      	lsls	r3, r5, #31
 8006c70:	d50a      	bpl.n	8006c88 <__pow5mult+0x84>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4622      	mov	r2, r4
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ff1c 	bl	8006ab4 <__multiply>
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff fe4b 	bl	800691c <_Bfree>
 8006c86:	4647      	mov	r7, r8
 8006c88:	106d      	asrs	r5, r5, #1
 8006c8a:	d00b      	beq.n	8006ca4 <__pow5mult+0xa0>
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	b938      	cbnz	r0, 8006ca0 <__pow5mult+0x9c>
 8006c90:	4622      	mov	r2, r4
 8006c92:	4621      	mov	r1, r4
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff ff0d 	bl	8006ab4 <__multiply>
 8006c9a:	6020      	str	r0, [r4, #0]
 8006c9c:	f8c0 9000 	str.w	r9, [r0]
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	e7e4      	b.n	8006c6e <__pow5mult+0x6a>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006caa:	bf00      	nop
 8006cac:	080082b0 	.word	0x080082b0
 8006cb0:	080080e1 	.word	0x080080e1
 8006cb4:	08008164 	.word	0x08008164

08006cb8 <__lshift>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	4691      	mov	r9, r2
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	6849      	ldr	r1, [r1, #4]
 8006cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cd0:	f108 0601 	add.w	r6, r8, #1
 8006cd4:	42b3      	cmp	r3, r6
 8006cd6:	db0b      	blt.n	8006cf0 <__lshift+0x38>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff fddf 	bl	800689c <_Balloc>
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b948      	cbnz	r0, 8006cf6 <__lshift+0x3e>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ce8:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <__lshift+0xd8>)
 8006cea:	482a      	ldr	r0, [pc, #168]	; (8006d94 <__lshift+0xdc>)
 8006cec:	f000 fbb4 	bl	8007458 <__assert_func>
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	e7ee      	b.n	8006cd4 <__lshift+0x1c>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f100 0114 	add.w	r1, r0, #20
 8006cfc:	f100 0210 	add.w	r2, r0, #16
 8006d00:	4618      	mov	r0, r3
 8006d02:	4553      	cmp	r3, sl
 8006d04:	db37      	blt.n	8006d76 <__lshift+0xbe>
 8006d06:	6920      	ldr	r0, [r4, #16]
 8006d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d0c:	f104 0314 	add.w	r3, r4, #20
 8006d10:	f019 091f 	ands.w	r9, r9, #31
 8006d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d1c:	d02f      	beq.n	8006d7e <__lshift+0xc6>
 8006d1e:	468a      	mov	sl, r1
 8006d20:	f04f 0c00 	mov.w	ip, #0
 8006d24:	f1c9 0e20 	rsb	lr, r9, #32
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	fa02 f209 	lsl.w	r2, r2, r9
 8006d2e:	ea42 020c 	orr.w	r2, r2, ip
 8006d32:	f84a 2b04 	str.w	r2, [sl], #4
 8006d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d40:	d8f2      	bhi.n	8006d28 <__lshift+0x70>
 8006d42:	1b03      	subs	r3, r0, r4
 8006d44:	3b15      	subs	r3, #21
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	f104 0215 	add.w	r2, r4, #21
 8006d50:	4290      	cmp	r0, r2
 8006d52:	bf38      	it	cc
 8006d54:	2304      	movcc	r3, #4
 8006d56:	f841 c003 	str.w	ip, [r1, r3]
 8006d5a:	f1bc 0f00 	cmp.w	ip, #0
 8006d5e:	d001      	beq.n	8006d64 <__lshift+0xac>
 8006d60:	f108 0602 	add.w	r6, r8, #2
 8006d64:	3e01      	subs	r6, #1
 8006d66:	4638      	mov	r0, r7
 8006d68:	4621      	mov	r1, r4
 8006d6a:	612e      	str	r6, [r5, #16]
 8006d6c:	f7ff fdd6 	bl	800691c <_Bfree>
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	e7c1      	b.n	8006d02 <__lshift+0x4a>
 8006d7e:	3904      	subs	r1, #4
 8006d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d84:	4298      	cmp	r0, r3
 8006d86:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d8a:	d8f9      	bhi.n	8006d80 <__lshift+0xc8>
 8006d8c:	e7ea      	b.n	8006d64 <__lshift+0xac>
 8006d8e:	bf00      	nop
 8006d90:	08008153 	.word	0x08008153
 8006d94:	08008164 	.word	0x08008164

08006d98 <__mcmp>:
 8006d98:	4603      	mov	r3, r0
 8006d9a:	690a      	ldr	r2, [r1, #16]
 8006d9c:	6900      	ldr	r0, [r0, #16]
 8006d9e:	b530      	push	{r4, r5, lr}
 8006da0:	1a80      	subs	r0, r0, r2
 8006da2:	d10d      	bne.n	8006dc0 <__mcmp+0x28>
 8006da4:	3314      	adds	r3, #20
 8006da6:	3114      	adds	r1, #20
 8006da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006dac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006db4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006db8:	4295      	cmp	r5, r2
 8006dba:	d002      	beq.n	8006dc2 <__mcmp+0x2a>
 8006dbc:	d304      	bcc.n	8006dc8 <__mcmp+0x30>
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	bd30      	pop	{r4, r5, pc}
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	d3f4      	bcc.n	8006db0 <__mcmp+0x18>
 8006dc6:	e7fb      	b.n	8006dc0 <__mcmp+0x28>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e7f8      	b.n	8006dc0 <__mcmp+0x28>
	...

08006dd0 <__mdiff>:
 8006dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4628      	mov	r0, r5
 8006ddc:	4614      	mov	r4, r2
 8006dde:	f7ff ffdb 	bl	8006d98 <__mcmp>
 8006de2:	1e06      	subs	r6, r0, #0
 8006de4:	d111      	bne.n	8006e0a <__mdiff+0x3a>
 8006de6:	4631      	mov	r1, r6
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7ff fd57 	bl	800689c <_Balloc>
 8006dee:	4602      	mov	r2, r0
 8006df0:	b928      	cbnz	r0, 8006dfe <__mdiff+0x2e>
 8006df2:	f240 2132 	movw	r1, #562	; 0x232
 8006df6:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <__mdiff+0x110>)
 8006df8:	483a      	ldr	r0, [pc, #232]	; (8006ee4 <__mdiff+0x114>)
 8006dfa:	f000 fb2d 	bl	8007458 <__assert_func>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e04:	4610      	mov	r0, r2
 8006e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	bfa4      	itt	ge
 8006e0c:	4623      	movge	r3, r4
 8006e0e:	462c      	movge	r4, r5
 8006e10:	4638      	mov	r0, r7
 8006e12:	6861      	ldr	r1, [r4, #4]
 8006e14:	bfa6      	itte	ge
 8006e16:	461d      	movge	r5, r3
 8006e18:	2600      	movge	r6, #0
 8006e1a:	2601      	movlt	r6, #1
 8006e1c:	f7ff fd3e 	bl	800689c <_Balloc>
 8006e20:	4602      	mov	r2, r0
 8006e22:	b918      	cbnz	r0, 8006e2c <__mdiff+0x5c>
 8006e24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e28:	4b2d      	ldr	r3, [pc, #180]	; (8006ee0 <__mdiff+0x110>)
 8006e2a:	e7e5      	b.n	8006df8 <__mdiff+0x28>
 8006e2c:	f102 0814 	add.w	r8, r2, #20
 8006e30:	46c2      	mov	sl, r8
 8006e32:	f04f 0c00 	mov.w	ip, #0
 8006e36:	6927      	ldr	r7, [r4, #16]
 8006e38:	60c6      	str	r6, [r0, #12]
 8006e3a:	692e      	ldr	r6, [r5, #16]
 8006e3c:	f104 0014 	add.w	r0, r4, #20
 8006e40:	f105 0914 	add.w	r9, r5, #20
 8006e44:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e4c:	3410      	adds	r4, #16
 8006e4e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006e52:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e56:	fa1f f18b 	uxth.w	r1, fp
 8006e5a:	448c      	add	ip, r1
 8006e5c:	b299      	uxth	r1, r3
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	ebac 0101 	sub.w	r1, ip, r1
 8006e64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e6c:	b289      	uxth	r1, r1
 8006e6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e72:	454e      	cmp	r6, r9
 8006e74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e78:	f84a 3b04 	str.w	r3, [sl], #4
 8006e7c:	d8e7      	bhi.n	8006e4e <__mdiff+0x7e>
 8006e7e:	1b73      	subs	r3, r6, r5
 8006e80:	3b15      	subs	r3, #21
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	3515      	adds	r5, #21
 8006e88:	3304      	adds	r3, #4
 8006e8a:	42ae      	cmp	r6, r5
 8006e8c:	bf38      	it	cc
 8006e8e:	2304      	movcc	r3, #4
 8006e90:	4418      	add	r0, r3
 8006e92:	4443      	add	r3, r8
 8006e94:	461e      	mov	r6, r3
 8006e96:	4605      	mov	r5, r0
 8006e98:	4575      	cmp	r5, lr
 8006e9a:	d30e      	bcc.n	8006eba <__mdiff+0xea>
 8006e9c:	f10e 0103 	add.w	r1, lr, #3
 8006ea0:	1a09      	subs	r1, r1, r0
 8006ea2:	f021 0103 	bic.w	r1, r1, #3
 8006ea6:	3803      	subs	r0, #3
 8006ea8:	4586      	cmp	lr, r0
 8006eaa:	bf38      	it	cc
 8006eac:	2100      	movcc	r1, #0
 8006eae:	4419      	add	r1, r3
 8006eb0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006eb4:	b18b      	cbz	r3, 8006eda <__mdiff+0x10a>
 8006eb6:	6117      	str	r7, [r2, #16]
 8006eb8:	e7a4      	b.n	8006e04 <__mdiff+0x34>
 8006eba:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ebe:	fa1f f188 	uxth.w	r1, r8
 8006ec2:	4461      	add	r1, ip
 8006ec4:	140c      	asrs	r4, r1, #16
 8006ec6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006eca:	b289      	uxth	r1, r1
 8006ecc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ed0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006ed4:	f846 1b04 	str.w	r1, [r6], #4
 8006ed8:	e7de      	b.n	8006e98 <__mdiff+0xc8>
 8006eda:	3f01      	subs	r7, #1
 8006edc:	e7e8      	b.n	8006eb0 <__mdiff+0xe0>
 8006ede:	bf00      	nop
 8006ee0:	08008153 	.word	0x08008153
 8006ee4:	08008164 	.word	0x08008164

08006ee8 <__d2b>:
 8006ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006eec:	2101      	movs	r1, #1
 8006eee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	461d      	mov	r5, r3
 8006ef6:	f7ff fcd1 	bl	800689c <_Balloc>
 8006efa:	4604      	mov	r4, r0
 8006efc:	b930      	cbnz	r0, 8006f0c <__d2b+0x24>
 8006efe:	4602      	mov	r2, r0
 8006f00:	f240 310a 	movw	r1, #778	; 0x30a
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <__d2b+0xb0>)
 8006f06:	4825      	ldr	r0, [pc, #148]	; (8006f9c <__d2b+0xb4>)
 8006f08:	f000 faa6 	bl	8007458 <__assert_func>
 8006f0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006f10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006f14:	bb2d      	cbnz	r5, 8006f62 <__d2b+0x7a>
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	f1b8 0300 	subs.w	r3, r8, #0
 8006f1c:	d026      	beq.n	8006f6c <__d2b+0x84>
 8006f1e:	4668      	mov	r0, sp
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	f7ff fd83 	bl	8006a2c <__lo0bits>
 8006f26:	9900      	ldr	r1, [sp, #0]
 8006f28:	b1f0      	cbz	r0, 8006f68 <__d2b+0x80>
 8006f2a:	9a01      	ldr	r2, [sp, #4]
 8006f2c:	f1c0 0320 	rsb	r3, r0, #32
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	430b      	orrs	r3, r1
 8006f36:	40c2      	lsrs	r2, r0
 8006f38:	6163      	str	r3, [r4, #20]
 8006f3a:	9201      	str	r2, [sp, #4]
 8006f3c:	9b01      	ldr	r3, [sp, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf14      	ite	ne
 8006f42:	2102      	movne	r1, #2
 8006f44:	2101      	moveq	r1, #1
 8006f46:	61a3      	str	r3, [r4, #24]
 8006f48:	6121      	str	r1, [r4, #16]
 8006f4a:	b1c5      	cbz	r5, 8006f7e <__d2b+0x96>
 8006f4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f50:	4405      	add	r5, r0
 8006f52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f56:	603d      	str	r5, [r7, #0]
 8006f58:	6030      	str	r0, [r6, #0]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	b002      	add	sp, #8
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f66:	e7d6      	b.n	8006f16 <__d2b+0x2e>
 8006f68:	6161      	str	r1, [r4, #20]
 8006f6a:	e7e7      	b.n	8006f3c <__d2b+0x54>
 8006f6c:	a801      	add	r0, sp, #4
 8006f6e:	f7ff fd5d 	bl	8006a2c <__lo0bits>
 8006f72:	2101      	movs	r1, #1
 8006f74:	9b01      	ldr	r3, [sp, #4]
 8006f76:	6121      	str	r1, [r4, #16]
 8006f78:	6163      	str	r3, [r4, #20]
 8006f7a:	3020      	adds	r0, #32
 8006f7c:	e7e5      	b.n	8006f4a <__d2b+0x62>
 8006f7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006f82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f86:	6038      	str	r0, [r7, #0]
 8006f88:	6918      	ldr	r0, [r3, #16]
 8006f8a:	f7ff fd2f 	bl	80069ec <__hi0bits>
 8006f8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006f92:	6031      	str	r1, [r6, #0]
 8006f94:	e7e1      	b.n	8006f5a <__d2b+0x72>
 8006f96:	bf00      	nop
 8006f98:	08008153 	.word	0x08008153
 8006f9c:	08008164 	.word	0x08008164

08006fa0 <_calloc_r>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	fba1 5402 	umull	r5, r4, r1, r2
 8006fa6:	b934      	cbnz	r4, 8006fb6 <_calloc_r+0x16>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f000 f875 	bl	8007098 <_malloc_r>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	b928      	cbnz	r0, 8006fbe <_calloc_r+0x1e>
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	220c      	movs	r2, #12
 8006fb8:	2600      	movs	r6, #0
 8006fba:	6002      	str	r2, [r0, #0]
 8006fbc:	e7f9      	b.n	8006fb2 <_calloc_r+0x12>
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	f7fe f941 	bl	8005248 <memset>
 8006fc6:	e7f4      	b.n	8006fb2 <_calloc_r+0x12>

08006fc8 <_free_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4605      	mov	r5, r0
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d040      	beq.n	8007052 <_free_r+0x8a>
 8006fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd4:	1f0c      	subs	r4, r1, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bfb8      	it	lt
 8006fda:	18e4      	addlt	r4, r4, r3
 8006fdc:	f000 fa98 	bl	8007510 <__malloc_lock>
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <_free_r+0x8c>)
 8006fe2:	6813      	ldr	r3, [r2, #0]
 8006fe4:	b933      	cbnz	r3, 8006ff4 <_free_r+0x2c>
 8006fe6:	6063      	str	r3, [r4, #4]
 8006fe8:	6014      	str	r4, [r2, #0]
 8006fea:	4628      	mov	r0, r5
 8006fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ff0:	f000 ba94 	b.w	800751c <__malloc_unlock>
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d908      	bls.n	800700a <_free_r+0x42>
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	1821      	adds	r1, r4, r0
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf01      	itttt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	1809      	addeq	r1, r1, r0
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	e7ed      	b.n	8006fe6 <_free_r+0x1e>
 800700a:	461a      	mov	r2, r3
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b10b      	cbz	r3, 8007014 <_free_r+0x4c>
 8007010:	42a3      	cmp	r3, r4
 8007012:	d9fa      	bls.n	800700a <_free_r+0x42>
 8007014:	6811      	ldr	r1, [r2, #0]
 8007016:	1850      	adds	r0, r2, r1
 8007018:	42a0      	cmp	r0, r4
 800701a:	d10b      	bne.n	8007034 <_free_r+0x6c>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	4401      	add	r1, r0
 8007020:	1850      	adds	r0, r2, r1
 8007022:	4283      	cmp	r3, r0
 8007024:	6011      	str	r1, [r2, #0]
 8007026:	d1e0      	bne.n	8006fea <_free_r+0x22>
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4401      	add	r1, r0
 800702e:	6011      	str	r1, [r2, #0]
 8007030:	6053      	str	r3, [r2, #4]
 8007032:	e7da      	b.n	8006fea <_free_r+0x22>
 8007034:	d902      	bls.n	800703c <_free_r+0x74>
 8007036:	230c      	movs	r3, #12
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	e7d6      	b.n	8006fea <_free_r+0x22>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	1821      	adds	r1, r4, r0
 8007040:	428b      	cmp	r3, r1
 8007042:	bf01      	itttt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	1809      	addeq	r1, r1, r0
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	6063      	str	r3, [r4, #4]
 800704e:	6054      	str	r4, [r2, #4]
 8007050:	e7cb      	b.n	8006fea <_free_r+0x22>
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	200003a8 	.word	0x200003a8

08007058 <sbrk_aligned>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4e0e      	ldr	r6, [pc, #56]	; (8007094 <sbrk_aligned+0x3c>)
 800705c:	460c      	mov	r4, r1
 800705e:	6831      	ldr	r1, [r6, #0]
 8007060:	4605      	mov	r5, r0
 8007062:	b911      	cbnz	r1, 800706a <sbrk_aligned+0x12>
 8007064:	f000 f9e8 	bl	8007438 <_sbrk_r>
 8007068:	6030      	str	r0, [r6, #0]
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f9e3 	bl	8007438 <_sbrk_r>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d00a      	beq.n	800708c <sbrk_aligned+0x34>
 8007076:	1cc4      	adds	r4, r0, #3
 8007078:	f024 0403 	bic.w	r4, r4, #3
 800707c:	42a0      	cmp	r0, r4
 800707e:	d007      	beq.n	8007090 <sbrk_aligned+0x38>
 8007080:	1a21      	subs	r1, r4, r0
 8007082:	4628      	mov	r0, r5
 8007084:	f000 f9d8 	bl	8007438 <_sbrk_r>
 8007088:	3001      	adds	r0, #1
 800708a:	d101      	bne.n	8007090 <sbrk_aligned+0x38>
 800708c:	f04f 34ff 	mov.w	r4, #4294967295
 8007090:	4620      	mov	r0, r4
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	200003ac 	.word	0x200003ac

08007098 <_malloc_r>:
 8007098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709c:	1ccd      	adds	r5, r1, #3
 800709e:	f025 0503 	bic.w	r5, r5, #3
 80070a2:	3508      	adds	r5, #8
 80070a4:	2d0c      	cmp	r5, #12
 80070a6:	bf38      	it	cc
 80070a8:	250c      	movcc	r5, #12
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	4607      	mov	r7, r0
 80070ae:	db01      	blt.n	80070b4 <_malloc_r+0x1c>
 80070b0:	42a9      	cmp	r1, r5
 80070b2:	d905      	bls.n	80070c0 <_malloc_r+0x28>
 80070b4:	230c      	movs	r3, #12
 80070b6:	2600      	movs	r6, #0
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	4630      	mov	r0, r6
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c0:	4e2e      	ldr	r6, [pc, #184]	; (800717c <_malloc_r+0xe4>)
 80070c2:	f000 fa25 	bl	8007510 <__malloc_lock>
 80070c6:	6833      	ldr	r3, [r6, #0]
 80070c8:	461c      	mov	r4, r3
 80070ca:	bb34      	cbnz	r4, 800711a <_malloc_r+0x82>
 80070cc:	4629      	mov	r1, r5
 80070ce:	4638      	mov	r0, r7
 80070d0:	f7ff ffc2 	bl	8007058 <sbrk_aligned>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	4604      	mov	r4, r0
 80070d8:	d14d      	bne.n	8007176 <_malloc_r+0xde>
 80070da:	6834      	ldr	r4, [r6, #0]
 80070dc:	4626      	mov	r6, r4
 80070de:	2e00      	cmp	r6, #0
 80070e0:	d140      	bne.n	8007164 <_malloc_r+0xcc>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	4631      	mov	r1, r6
 80070e6:	4638      	mov	r0, r7
 80070e8:	eb04 0803 	add.w	r8, r4, r3
 80070ec:	f000 f9a4 	bl	8007438 <_sbrk_r>
 80070f0:	4580      	cmp	r8, r0
 80070f2:	d13a      	bne.n	800716a <_malloc_r+0xd2>
 80070f4:	6821      	ldr	r1, [r4, #0]
 80070f6:	3503      	adds	r5, #3
 80070f8:	1a6d      	subs	r5, r5, r1
 80070fa:	f025 0503 	bic.w	r5, r5, #3
 80070fe:	3508      	adds	r5, #8
 8007100:	2d0c      	cmp	r5, #12
 8007102:	bf38      	it	cc
 8007104:	250c      	movcc	r5, #12
 8007106:	4638      	mov	r0, r7
 8007108:	4629      	mov	r1, r5
 800710a:	f7ff ffa5 	bl	8007058 <sbrk_aligned>
 800710e:	3001      	adds	r0, #1
 8007110:	d02b      	beq.n	800716a <_malloc_r+0xd2>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	442b      	add	r3, r5
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	e00e      	b.n	8007138 <_malloc_r+0xa0>
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	1b52      	subs	r2, r2, r5
 800711e:	d41e      	bmi.n	800715e <_malloc_r+0xc6>
 8007120:	2a0b      	cmp	r2, #11
 8007122:	d916      	bls.n	8007152 <_malloc_r+0xba>
 8007124:	1961      	adds	r1, r4, r5
 8007126:	42a3      	cmp	r3, r4
 8007128:	6025      	str	r5, [r4, #0]
 800712a:	bf18      	it	ne
 800712c:	6059      	strne	r1, [r3, #4]
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	bf08      	it	eq
 8007132:	6031      	streq	r1, [r6, #0]
 8007134:	5162      	str	r2, [r4, r5]
 8007136:	604b      	str	r3, [r1, #4]
 8007138:	4638      	mov	r0, r7
 800713a:	f104 060b 	add.w	r6, r4, #11
 800713e:	f000 f9ed 	bl	800751c <__malloc_unlock>
 8007142:	f026 0607 	bic.w	r6, r6, #7
 8007146:	1d23      	adds	r3, r4, #4
 8007148:	1af2      	subs	r2, r6, r3
 800714a:	d0b6      	beq.n	80070ba <_malloc_r+0x22>
 800714c:	1b9b      	subs	r3, r3, r6
 800714e:	50a3      	str	r3, [r4, r2]
 8007150:	e7b3      	b.n	80070ba <_malloc_r+0x22>
 8007152:	6862      	ldr	r2, [r4, #4]
 8007154:	42a3      	cmp	r3, r4
 8007156:	bf0c      	ite	eq
 8007158:	6032      	streq	r2, [r6, #0]
 800715a:	605a      	strne	r2, [r3, #4]
 800715c:	e7ec      	b.n	8007138 <_malloc_r+0xa0>
 800715e:	4623      	mov	r3, r4
 8007160:	6864      	ldr	r4, [r4, #4]
 8007162:	e7b2      	b.n	80070ca <_malloc_r+0x32>
 8007164:	4634      	mov	r4, r6
 8007166:	6876      	ldr	r6, [r6, #4]
 8007168:	e7b9      	b.n	80070de <_malloc_r+0x46>
 800716a:	230c      	movs	r3, #12
 800716c:	4638      	mov	r0, r7
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	f000 f9d4 	bl	800751c <__malloc_unlock>
 8007174:	e7a1      	b.n	80070ba <_malloc_r+0x22>
 8007176:	6025      	str	r5, [r4, #0]
 8007178:	e7de      	b.n	8007138 <_malloc_r+0xa0>
 800717a:	bf00      	nop
 800717c:	200003a8 	.word	0x200003a8

08007180 <__ssputs_r>:
 8007180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	688e      	ldr	r6, [r1, #8]
 8007186:	4682      	mov	sl, r0
 8007188:	429e      	cmp	r6, r3
 800718a:	460c      	mov	r4, r1
 800718c:	4690      	mov	r8, r2
 800718e:	461f      	mov	r7, r3
 8007190:	d838      	bhi.n	8007204 <__ssputs_r+0x84>
 8007192:	898a      	ldrh	r2, [r1, #12]
 8007194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007198:	d032      	beq.n	8007200 <__ssputs_r+0x80>
 800719a:	6825      	ldr	r5, [r4, #0]
 800719c:	6909      	ldr	r1, [r1, #16]
 800719e:	3301      	adds	r3, #1
 80071a0:	eba5 0901 	sub.w	r9, r5, r1
 80071a4:	6965      	ldr	r5, [r4, #20]
 80071a6:	444b      	add	r3, r9
 80071a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	429d      	cmp	r5, r3
 80071b4:	bf38      	it	cc
 80071b6:	461d      	movcc	r5, r3
 80071b8:	0553      	lsls	r3, r2, #21
 80071ba:	d531      	bpl.n	8007220 <__ssputs_r+0xa0>
 80071bc:	4629      	mov	r1, r5
 80071be:	f7ff ff6b 	bl	8007098 <_malloc_r>
 80071c2:	4606      	mov	r6, r0
 80071c4:	b950      	cbnz	r0, 80071dc <__ssputs_r+0x5c>
 80071c6:	230c      	movs	r3, #12
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	f8ca 3000 	str.w	r3, [sl]
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071dc:	464a      	mov	r2, r9
 80071de:	6921      	ldr	r1, [r4, #16]
 80071e0:	f7ff fb4e 	bl	8006880 <memcpy>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	6126      	str	r6, [r4, #16]
 80071f2:	444e      	add	r6, r9
 80071f4:	6026      	str	r6, [r4, #0]
 80071f6:	463e      	mov	r6, r7
 80071f8:	6165      	str	r5, [r4, #20]
 80071fa:	eba5 0509 	sub.w	r5, r5, r9
 80071fe:	60a5      	str	r5, [r4, #8]
 8007200:	42be      	cmp	r6, r7
 8007202:	d900      	bls.n	8007206 <__ssputs_r+0x86>
 8007204:	463e      	mov	r6, r7
 8007206:	4632      	mov	r2, r6
 8007208:	4641      	mov	r1, r8
 800720a:	6820      	ldr	r0, [r4, #0]
 800720c:	f000 f966 	bl	80074dc <memmove>
 8007210:	68a3      	ldr	r3, [r4, #8]
 8007212:	2000      	movs	r0, #0
 8007214:	1b9b      	subs	r3, r3, r6
 8007216:	60a3      	str	r3, [r4, #8]
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	4433      	add	r3, r6
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	e7db      	b.n	80071d8 <__ssputs_r+0x58>
 8007220:	462a      	mov	r2, r5
 8007222:	f000 f981 	bl	8007528 <_realloc_r>
 8007226:	4606      	mov	r6, r0
 8007228:	2800      	cmp	r0, #0
 800722a:	d1e1      	bne.n	80071f0 <__ssputs_r+0x70>
 800722c:	4650      	mov	r0, sl
 800722e:	6921      	ldr	r1, [r4, #16]
 8007230:	f7ff feca 	bl	8006fc8 <_free_r>
 8007234:	e7c7      	b.n	80071c6 <__ssputs_r+0x46>
	...

08007238 <_svfiprintf_r>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	4698      	mov	r8, r3
 800723e:	898b      	ldrh	r3, [r1, #12]
 8007240:	4607      	mov	r7, r0
 8007242:	061b      	lsls	r3, r3, #24
 8007244:	460d      	mov	r5, r1
 8007246:	4614      	mov	r4, r2
 8007248:	b09d      	sub	sp, #116	; 0x74
 800724a:	d50e      	bpl.n	800726a <_svfiprintf_r+0x32>
 800724c:	690b      	ldr	r3, [r1, #16]
 800724e:	b963      	cbnz	r3, 800726a <_svfiprintf_r+0x32>
 8007250:	2140      	movs	r1, #64	; 0x40
 8007252:	f7ff ff21 	bl	8007098 <_malloc_r>
 8007256:	6028      	str	r0, [r5, #0]
 8007258:	6128      	str	r0, [r5, #16]
 800725a:	b920      	cbnz	r0, 8007266 <_svfiprintf_r+0x2e>
 800725c:	230c      	movs	r3, #12
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	e0d1      	b.n	800740a <_svfiprintf_r+0x1d2>
 8007266:	2340      	movs	r3, #64	; 0x40
 8007268:	616b      	str	r3, [r5, #20]
 800726a:	2300      	movs	r3, #0
 800726c:	9309      	str	r3, [sp, #36]	; 0x24
 800726e:	2320      	movs	r3, #32
 8007270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007274:	2330      	movs	r3, #48	; 0x30
 8007276:	f04f 0901 	mov.w	r9, #1
 800727a:	f8cd 800c 	str.w	r8, [sp, #12]
 800727e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007424 <_svfiprintf_r+0x1ec>
 8007282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007286:	4623      	mov	r3, r4
 8007288:	469a      	mov	sl, r3
 800728a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800728e:	b10a      	cbz	r2, 8007294 <_svfiprintf_r+0x5c>
 8007290:	2a25      	cmp	r2, #37	; 0x25
 8007292:	d1f9      	bne.n	8007288 <_svfiprintf_r+0x50>
 8007294:	ebba 0b04 	subs.w	fp, sl, r4
 8007298:	d00b      	beq.n	80072b2 <_svfiprintf_r+0x7a>
 800729a:	465b      	mov	r3, fp
 800729c:	4622      	mov	r2, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ff6d 	bl	8007180 <__ssputs_r>
 80072a6:	3001      	adds	r0, #1
 80072a8:	f000 80aa 	beq.w	8007400 <_svfiprintf_r+0x1c8>
 80072ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ae:	445a      	add	r2, fp
 80072b0:	9209      	str	r2, [sp, #36]	; 0x24
 80072b2:	f89a 3000 	ldrb.w	r3, [sl]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80a2 	beq.w	8007400 <_svfiprintf_r+0x1c8>
 80072bc:	2300      	movs	r3, #0
 80072be:	f04f 32ff 	mov.w	r2, #4294967295
 80072c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c6:	f10a 0a01 	add.w	sl, sl, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	9307      	str	r3, [sp, #28]
 80072ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072d2:	931a      	str	r3, [sp, #104]	; 0x68
 80072d4:	4654      	mov	r4, sl
 80072d6:	2205      	movs	r2, #5
 80072d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072dc:	4851      	ldr	r0, [pc, #324]	; (8007424 <_svfiprintf_r+0x1ec>)
 80072de:	f7ff fac1 	bl	8006864 <memchr>
 80072e2:	9a04      	ldr	r2, [sp, #16]
 80072e4:	b9d8      	cbnz	r0, 800731e <_svfiprintf_r+0xe6>
 80072e6:	06d0      	lsls	r0, r2, #27
 80072e8:	bf44      	itt	mi
 80072ea:	2320      	movmi	r3, #32
 80072ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f0:	0711      	lsls	r1, r2, #28
 80072f2:	bf44      	itt	mi
 80072f4:	232b      	movmi	r3, #43	; 0x2b
 80072f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072fa:	f89a 3000 	ldrb.w	r3, [sl]
 80072fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007300:	d015      	beq.n	800732e <_svfiprintf_r+0xf6>
 8007302:	4654      	mov	r4, sl
 8007304:	2000      	movs	r0, #0
 8007306:	f04f 0c0a 	mov.w	ip, #10
 800730a:	9a07      	ldr	r2, [sp, #28]
 800730c:	4621      	mov	r1, r4
 800730e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007312:	3b30      	subs	r3, #48	; 0x30
 8007314:	2b09      	cmp	r3, #9
 8007316:	d94e      	bls.n	80073b6 <_svfiprintf_r+0x17e>
 8007318:	b1b0      	cbz	r0, 8007348 <_svfiprintf_r+0x110>
 800731a:	9207      	str	r2, [sp, #28]
 800731c:	e014      	b.n	8007348 <_svfiprintf_r+0x110>
 800731e:	eba0 0308 	sub.w	r3, r0, r8
 8007322:	fa09 f303 	lsl.w	r3, r9, r3
 8007326:	4313      	orrs	r3, r2
 8007328:	46a2      	mov	sl, r4
 800732a:	9304      	str	r3, [sp, #16]
 800732c:	e7d2      	b.n	80072d4 <_svfiprintf_r+0x9c>
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	1d19      	adds	r1, r3, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	9103      	str	r1, [sp, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	bfbb      	ittet	lt
 800733a:	425b      	neglt	r3, r3
 800733c:	f042 0202 	orrlt.w	r2, r2, #2
 8007340:	9307      	strge	r3, [sp, #28]
 8007342:	9307      	strlt	r3, [sp, #28]
 8007344:	bfb8      	it	lt
 8007346:	9204      	strlt	r2, [sp, #16]
 8007348:	7823      	ldrb	r3, [r4, #0]
 800734a:	2b2e      	cmp	r3, #46	; 0x2e
 800734c:	d10c      	bne.n	8007368 <_svfiprintf_r+0x130>
 800734e:	7863      	ldrb	r3, [r4, #1]
 8007350:	2b2a      	cmp	r3, #42	; 0x2a
 8007352:	d135      	bne.n	80073c0 <_svfiprintf_r+0x188>
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	3402      	adds	r4, #2
 8007358:	1d1a      	adds	r2, r3, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	9203      	str	r2, [sp, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	bfb8      	it	lt
 8007362:	f04f 33ff 	movlt.w	r3, #4294967295
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007428 <_svfiprintf_r+0x1f0>
 800736c:	2203      	movs	r2, #3
 800736e:	4650      	mov	r0, sl
 8007370:	7821      	ldrb	r1, [r4, #0]
 8007372:	f7ff fa77 	bl	8006864 <memchr>
 8007376:	b140      	cbz	r0, 800738a <_svfiprintf_r+0x152>
 8007378:	2340      	movs	r3, #64	; 0x40
 800737a:	eba0 000a 	sub.w	r0, r0, sl
 800737e:	fa03 f000 	lsl.w	r0, r3, r0
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	3401      	adds	r4, #1
 8007386:	4303      	orrs	r3, r0
 8007388:	9304      	str	r3, [sp, #16]
 800738a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738e:	2206      	movs	r2, #6
 8007390:	4826      	ldr	r0, [pc, #152]	; (800742c <_svfiprintf_r+0x1f4>)
 8007392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007396:	f7ff fa65 	bl	8006864 <memchr>
 800739a:	2800      	cmp	r0, #0
 800739c:	d038      	beq.n	8007410 <_svfiprintf_r+0x1d8>
 800739e:	4b24      	ldr	r3, [pc, #144]	; (8007430 <_svfiprintf_r+0x1f8>)
 80073a0:	bb1b      	cbnz	r3, 80073ea <_svfiprintf_r+0x1b2>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	3307      	adds	r3, #7
 80073a6:	f023 0307 	bic.w	r3, r3, #7
 80073aa:	3308      	adds	r3, #8
 80073ac:	9303      	str	r3, [sp, #12]
 80073ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b0:	4433      	add	r3, r6
 80073b2:	9309      	str	r3, [sp, #36]	; 0x24
 80073b4:	e767      	b.n	8007286 <_svfiprintf_r+0x4e>
 80073b6:	460c      	mov	r4, r1
 80073b8:	2001      	movs	r0, #1
 80073ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80073be:	e7a5      	b.n	800730c <_svfiprintf_r+0xd4>
 80073c0:	2300      	movs	r3, #0
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4619      	mov	r1, r3
 80073c8:	3401      	adds	r4, #1
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	4620      	mov	r0, r4
 80073ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d2:	3a30      	subs	r2, #48	; 0x30
 80073d4:	2a09      	cmp	r2, #9
 80073d6:	d903      	bls.n	80073e0 <_svfiprintf_r+0x1a8>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0c5      	beq.n	8007368 <_svfiprintf_r+0x130>
 80073dc:	9105      	str	r1, [sp, #20]
 80073de:	e7c3      	b.n	8007368 <_svfiprintf_r+0x130>
 80073e0:	4604      	mov	r4, r0
 80073e2:	2301      	movs	r3, #1
 80073e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e8:	e7f0      	b.n	80073cc <_svfiprintf_r+0x194>
 80073ea:	ab03      	add	r3, sp, #12
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	462a      	mov	r2, r5
 80073f0:	4638      	mov	r0, r7
 80073f2:	4b10      	ldr	r3, [pc, #64]	; (8007434 <_svfiprintf_r+0x1fc>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	f7fd ffcd 	bl	8005394 <_printf_float>
 80073fa:	1c42      	adds	r2, r0, #1
 80073fc:	4606      	mov	r6, r0
 80073fe:	d1d6      	bne.n	80073ae <_svfiprintf_r+0x176>
 8007400:	89ab      	ldrh	r3, [r5, #12]
 8007402:	065b      	lsls	r3, r3, #25
 8007404:	f53f af2c 	bmi.w	8007260 <_svfiprintf_r+0x28>
 8007408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800740a:	b01d      	add	sp, #116	; 0x74
 800740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007410:	ab03      	add	r3, sp, #12
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	462a      	mov	r2, r5
 8007416:	4638      	mov	r0, r7
 8007418:	4b06      	ldr	r3, [pc, #24]	; (8007434 <_svfiprintf_r+0x1fc>)
 800741a:	a904      	add	r1, sp, #16
 800741c:	f7fe fa56 	bl	80058cc <_printf_i>
 8007420:	e7eb      	b.n	80073fa <_svfiprintf_r+0x1c2>
 8007422:	bf00      	nop
 8007424:	080082bc 	.word	0x080082bc
 8007428:	080082c2 	.word	0x080082c2
 800742c:	080082c6 	.word	0x080082c6
 8007430:	08005395 	.word	0x08005395
 8007434:	08007181 	.word	0x08007181

08007438 <_sbrk_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	2300      	movs	r3, #0
 800743c:	4d05      	ldr	r5, [pc, #20]	; (8007454 <_sbrk_r+0x1c>)
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fb f842 	bl	80024cc <_sbrk>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_sbrk_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_sbrk_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	200003b0 	.word	0x200003b0

08007458 <__assert_func>:
 8007458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800745a:	4614      	mov	r4, r2
 800745c:	461a      	mov	r2, r3
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <__assert_func+0x2c>)
 8007460:	4605      	mov	r5, r0
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68d8      	ldr	r0, [r3, #12]
 8007466:	b14c      	cbz	r4, 800747c <__assert_func+0x24>
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <__assert_func+0x30>)
 800746a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800746e:	9100      	str	r1, [sp, #0]
 8007470:	462b      	mov	r3, r5
 8007472:	4906      	ldr	r1, [pc, #24]	; (800748c <__assert_func+0x34>)
 8007474:	f000 f80e 	bl	8007494 <fiprintf>
 8007478:	f000 faaa 	bl	80079d0 <abort>
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <__assert_func+0x38>)
 800747e:	461c      	mov	r4, r3
 8007480:	e7f3      	b.n	800746a <__assert_func+0x12>
 8007482:	bf00      	nop
 8007484:	20000044 	.word	0x20000044
 8007488:	080082cd 	.word	0x080082cd
 800748c:	080082da 	.word	0x080082da
 8007490:	08008308 	.word	0x08008308

08007494 <fiprintf>:
 8007494:	b40e      	push	{r1, r2, r3}
 8007496:	b503      	push	{r0, r1, lr}
 8007498:	4601      	mov	r1, r0
 800749a:	ab03      	add	r3, sp, #12
 800749c:	4805      	ldr	r0, [pc, #20]	; (80074b4 <fiprintf+0x20>)
 800749e:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a2:	6800      	ldr	r0, [r0, #0]
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	f000 f895 	bl	80075d4 <_vfiprintf_r>
 80074aa:	b002      	add	sp, #8
 80074ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80074b0:	b003      	add	sp, #12
 80074b2:	4770      	bx	lr
 80074b4:	20000044 	.word	0x20000044

080074b8 <__ascii_mbtowc>:
 80074b8:	b082      	sub	sp, #8
 80074ba:	b901      	cbnz	r1, 80074be <__ascii_mbtowc+0x6>
 80074bc:	a901      	add	r1, sp, #4
 80074be:	b142      	cbz	r2, 80074d2 <__ascii_mbtowc+0x1a>
 80074c0:	b14b      	cbz	r3, 80074d6 <__ascii_mbtowc+0x1e>
 80074c2:	7813      	ldrb	r3, [r2, #0]
 80074c4:	600b      	str	r3, [r1, #0]
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	1e10      	subs	r0, r2, #0
 80074ca:	bf18      	it	ne
 80074cc:	2001      	movne	r0, #1
 80074ce:	b002      	add	sp, #8
 80074d0:	4770      	bx	lr
 80074d2:	4610      	mov	r0, r2
 80074d4:	e7fb      	b.n	80074ce <__ascii_mbtowc+0x16>
 80074d6:	f06f 0001 	mvn.w	r0, #1
 80074da:	e7f8      	b.n	80074ce <__ascii_mbtowc+0x16>

080074dc <memmove>:
 80074dc:	4288      	cmp	r0, r1
 80074de:	b510      	push	{r4, lr}
 80074e0:	eb01 0402 	add.w	r4, r1, r2
 80074e4:	d902      	bls.n	80074ec <memmove+0x10>
 80074e6:	4284      	cmp	r4, r0
 80074e8:	4623      	mov	r3, r4
 80074ea:	d807      	bhi.n	80074fc <memmove+0x20>
 80074ec:	1e43      	subs	r3, r0, #1
 80074ee:	42a1      	cmp	r1, r4
 80074f0:	d008      	beq.n	8007504 <memmove+0x28>
 80074f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074fa:	e7f8      	b.n	80074ee <memmove+0x12>
 80074fc:	4601      	mov	r1, r0
 80074fe:	4402      	add	r2, r0
 8007500:	428a      	cmp	r2, r1
 8007502:	d100      	bne.n	8007506 <memmove+0x2a>
 8007504:	bd10      	pop	{r4, pc}
 8007506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800750a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800750e:	e7f7      	b.n	8007500 <memmove+0x24>

08007510 <__malloc_lock>:
 8007510:	4801      	ldr	r0, [pc, #4]	; (8007518 <__malloc_lock+0x8>)
 8007512:	f000 bc19 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	200003b4 	.word	0x200003b4

0800751c <__malloc_unlock>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__malloc_unlock+0x8>)
 800751e:	f000 bc14 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	200003b4 	.word	0x200003b4

08007528 <_realloc_r>:
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	4680      	mov	r8, r0
 800752e:	4614      	mov	r4, r2
 8007530:	460e      	mov	r6, r1
 8007532:	b921      	cbnz	r1, 800753e <_realloc_r+0x16>
 8007534:	4611      	mov	r1, r2
 8007536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	f7ff bdad 	b.w	8007098 <_malloc_r>
 800753e:	b92a      	cbnz	r2, 800754c <_realloc_r+0x24>
 8007540:	f7ff fd42 	bl	8006fc8 <_free_r>
 8007544:	4625      	mov	r5, r4
 8007546:	4628      	mov	r0, r5
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754c:	f000 fc64 	bl	8007e18 <_malloc_usable_size_r>
 8007550:	4284      	cmp	r4, r0
 8007552:	4607      	mov	r7, r0
 8007554:	d802      	bhi.n	800755c <_realloc_r+0x34>
 8007556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800755a:	d812      	bhi.n	8007582 <_realloc_r+0x5a>
 800755c:	4621      	mov	r1, r4
 800755e:	4640      	mov	r0, r8
 8007560:	f7ff fd9a 	bl	8007098 <_malloc_r>
 8007564:	4605      	mov	r5, r0
 8007566:	2800      	cmp	r0, #0
 8007568:	d0ed      	beq.n	8007546 <_realloc_r+0x1e>
 800756a:	42bc      	cmp	r4, r7
 800756c:	4622      	mov	r2, r4
 800756e:	4631      	mov	r1, r6
 8007570:	bf28      	it	cs
 8007572:	463a      	movcs	r2, r7
 8007574:	f7ff f984 	bl	8006880 <memcpy>
 8007578:	4631      	mov	r1, r6
 800757a:	4640      	mov	r0, r8
 800757c:	f7ff fd24 	bl	8006fc8 <_free_r>
 8007580:	e7e1      	b.n	8007546 <_realloc_r+0x1e>
 8007582:	4635      	mov	r5, r6
 8007584:	e7df      	b.n	8007546 <_realloc_r+0x1e>

08007586 <__sfputc_r>:
 8007586:	6893      	ldr	r3, [r2, #8]
 8007588:	b410      	push	{r4}
 800758a:	3b01      	subs	r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	6093      	str	r3, [r2, #8]
 8007590:	da07      	bge.n	80075a2 <__sfputc_r+0x1c>
 8007592:	6994      	ldr	r4, [r2, #24]
 8007594:	42a3      	cmp	r3, r4
 8007596:	db01      	blt.n	800759c <__sfputc_r+0x16>
 8007598:	290a      	cmp	r1, #10
 800759a:	d102      	bne.n	80075a2 <__sfputc_r+0x1c>
 800759c:	bc10      	pop	{r4}
 800759e:	f000 b949 	b.w	8007834 <__swbuf_r>
 80075a2:	6813      	ldr	r3, [r2, #0]
 80075a4:	1c58      	adds	r0, r3, #1
 80075a6:	6010      	str	r0, [r2, #0]
 80075a8:	7019      	strb	r1, [r3, #0]
 80075aa:	4608      	mov	r0, r1
 80075ac:	bc10      	pop	{r4}
 80075ae:	4770      	bx	lr

080075b0 <__sfputs_r>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	4614      	mov	r4, r2
 80075b8:	18d5      	adds	r5, r2, r3
 80075ba:	42ac      	cmp	r4, r5
 80075bc:	d101      	bne.n	80075c2 <__sfputs_r+0x12>
 80075be:	2000      	movs	r0, #0
 80075c0:	e007      	b.n	80075d2 <__sfputs_r+0x22>
 80075c2:	463a      	mov	r2, r7
 80075c4:	4630      	mov	r0, r6
 80075c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ca:	f7ff ffdc 	bl	8007586 <__sfputc_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	d1f3      	bne.n	80075ba <__sfputs_r+0xa>
 80075d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075d4 <_vfiprintf_r>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	460d      	mov	r5, r1
 80075da:	4614      	mov	r4, r2
 80075dc:	4698      	mov	r8, r3
 80075de:	4606      	mov	r6, r0
 80075e0:	b09d      	sub	sp, #116	; 0x74
 80075e2:	b118      	cbz	r0, 80075ec <_vfiprintf_r+0x18>
 80075e4:	6983      	ldr	r3, [r0, #24]
 80075e6:	b90b      	cbnz	r3, 80075ec <_vfiprintf_r+0x18>
 80075e8:	f000 fb10 	bl	8007c0c <__sinit>
 80075ec:	4b89      	ldr	r3, [pc, #548]	; (8007814 <_vfiprintf_r+0x240>)
 80075ee:	429d      	cmp	r5, r3
 80075f0:	d11b      	bne.n	800762a <_vfiprintf_r+0x56>
 80075f2:	6875      	ldr	r5, [r6, #4]
 80075f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d405      	bmi.n	8007606 <_vfiprintf_r+0x32>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	059a      	lsls	r2, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_vfiprintf_r+0x32>
 8007600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007602:	f000 fba1 	bl	8007d48 <__retarget_lock_acquire_recursive>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	d501      	bpl.n	8007610 <_vfiprintf_r+0x3c>
 800760c:	692b      	ldr	r3, [r5, #16]
 800760e:	b9eb      	cbnz	r3, 800764c <_vfiprintf_r+0x78>
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f000 f96e 	bl	80078f4 <__swsetup_r>
 8007618:	b1c0      	cbz	r0, 800764c <_vfiprintf_r+0x78>
 800761a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761c:	07dc      	lsls	r4, r3, #31
 800761e:	d50e      	bpl.n	800763e <_vfiprintf_r+0x6a>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b01d      	add	sp, #116	; 0x74
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	4b7b      	ldr	r3, [pc, #492]	; (8007818 <_vfiprintf_r+0x244>)
 800762c:	429d      	cmp	r5, r3
 800762e:	d101      	bne.n	8007634 <_vfiprintf_r+0x60>
 8007630:	68b5      	ldr	r5, [r6, #8]
 8007632:	e7df      	b.n	80075f4 <_vfiprintf_r+0x20>
 8007634:	4b79      	ldr	r3, [pc, #484]	; (800781c <_vfiprintf_r+0x248>)
 8007636:	429d      	cmp	r5, r3
 8007638:	bf08      	it	eq
 800763a:	68f5      	ldreq	r5, [r6, #12]
 800763c:	e7da      	b.n	80075f4 <_vfiprintf_r+0x20>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	0598      	lsls	r0, r3, #22
 8007642:	d4ed      	bmi.n	8007620 <_vfiprintf_r+0x4c>
 8007644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007646:	f000 fb80 	bl	8007d4a <__retarget_lock_release_recursive>
 800764a:	e7e9      	b.n	8007620 <_vfiprintf_r+0x4c>
 800764c:	2300      	movs	r3, #0
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	2320      	movs	r3, #32
 8007652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007656:	2330      	movs	r3, #48	; 0x30
 8007658:	f04f 0901 	mov.w	r9, #1
 800765c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007660:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007820 <_vfiprintf_r+0x24c>
 8007664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007668:	4623      	mov	r3, r4
 800766a:	469a      	mov	sl, r3
 800766c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007670:	b10a      	cbz	r2, 8007676 <_vfiprintf_r+0xa2>
 8007672:	2a25      	cmp	r2, #37	; 0x25
 8007674:	d1f9      	bne.n	800766a <_vfiprintf_r+0x96>
 8007676:	ebba 0b04 	subs.w	fp, sl, r4
 800767a:	d00b      	beq.n	8007694 <_vfiprintf_r+0xc0>
 800767c:	465b      	mov	r3, fp
 800767e:	4622      	mov	r2, r4
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ff94 	bl	80075b0 <__sfputs_r>
 8007688:	3001      	adds	r0, #1
 800768a:	f000 80aa 	beq.w	80077e2 <_vfiprintf_r+0x20e>
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	445a      	add	r2, fp
 8007692:	9209      	str	r2, [sp, #36]	; 0x24
 8007694:	f89a 3000 	ldrb.w	r3, [sl]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80a2 	beq.w	80077e2 <_vfiprintf_r+0x20e>
 800769e:	2300      	movs	r3, #0
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a8:	f10a 0a01 	add.w	sl, sl, #1
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b4:	931a      	str	r3, [sp, #104]	; 0x68
 80076b6:	4654      	mov	r4, sl
 80076b8:	2205      	movs	r2, #5
 80076ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076be:	4858      	ldr	r0, [pc, #352]	; (8007820 <_vfiprintf_r+0x24c>)
 80076c0:	f7ff f8d0 	bl	8006864 <memchr>
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	b9d8      	cbnz	r0, 8007700 <_vfiprintf_r+0x12c>
 80076c8:	06d1      	lsls	r1, r2, #27
 80076ca:	bf44      	itt	mi
 80076cc:	2320      	movmi	r3, #32
 80076ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d2:	0713      	lsls	r3, r2, #28
 80076d4:	bf44      	itt	mi
 80076d6:	232b      	movmi	r3, #43	; 0x2b
 80076d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b2a      	cmp	r3, #42	; 0x2a
 80076e2:	d015      	beq.n	8007710 <_vfiprintf_r+0x13c>
 80076e4:	4654      	mov	r4, sl
 80076e6:	2000      	movs	r0, #0
 80076e8:	f04f 0c0a 	mov.w	ip, #10
 80076ec:	9a07      	ldr	r2, [sp, #28]
 80076ee:	4621      	mov	r1, r4
 80076f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f4:	3b30      	subs	r3, #48	; 0x30
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d94e      	bls.n	8007798 <_vfiprintf_r+0x1c4>
 80076fa:	b1b0      	cbz	r0, 800772a <_vfiprintf_r+0x156>
 80076fc:	9207      	str	r2, [sp, #28]
 80076fe:	e014      	b.n	800772a <_vfiprintf_r+0x156>
 8007700:	eba0 0308 	sub.w	r3, r0, r8
 8007704:	fa09 f303 	lsl.w	r3, r9, r3
 8007708:	4313      	orrs	r3, r2
 800770a:	46a2      	mov	sl, r4
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	e7d2      	b.n	80076b6 <_vfiprintf_r+0xe2>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	1d19      	adds	r1, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	9103      	str	r1, [sp, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bfbb      	ittet	lt
 800771c:	425b      	neglt	r3, r3
 800771e:	f042 0202 	orrlt.w	r2, r2, #2
 8007722:	9307      	strge	r3, [sp, #28]
 8007724:	9307      	strlt	r3, [sp, #28]
 8007726:	bfb8      	it	lt
 8007728:	9204      	strlt	r2, [sp, #16]
 800772a:	7823      	ldrb	r3, [r4, #0]
 800772c:	2b2e      	cmp	r3, #46	; 0x2e
 800772e:	d10c      	bne.n	800774a <_vfiprintf_r+0x176>
 8007730:	7863      	ldrb	r3, [r4, #1]
 8007732:	2b2a      	cmp	r3, #42	; 0x2a
 8007734:	d135      	bne.n	80077a2 <_vfiprintf_r+0x1ce>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3402      	adds	r4, #2
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	9203      	str	r2, [sp, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfb8      	it	lt
 8007744:	f04f 33ff 	movlt.w	r3, #4294967295
 8007748:	9305      	str	r3, [sp, #20]
 800774a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007824 <_vfiprintf_r+0x250>
 800774e:	2203      	movs	r2, #3
 8007750:	4650      	mov	r0, sl
 8007752:	7821      	ldrb	r1, [r4, #0]
 8007754:	f7ff f886 	bl	8006864 <memchr>
 8007758:	b140      	cbz	r0, 800776c <_vfiprintf_r+0x198>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	eba0 000a 	sub.w	r0, r0, sl
 8007760:	fa03 f000 	lsl.w	r0, r3, r0
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	3401      	adds	r4, #1
 8007768:	4303      	orrs	r3, r0
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	2206      	movs	r2, #6
 8007772:	482d      	ldr	r0, [pc, #180]	; (8007828 <_vfiprintf_r+0x254>)
 8007774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007778:	f7ff f874 	bl	8006864 <memchr>
 800777c:	2800      	cmp	r0, #0
 800777e:	d03f      	beq.n	8007800 <_vfiprintf_r+0x22c>
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <_vfiprintf_r+0x258>)
 8007782:	bb1b      	cbnz	r3, 80077cc <_vfiprintf_r+0x1f8>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	3307      	adds	r3, #7
 8007788:	f023 0307 	bic.w	r3, r3, #7
 800778c:	3308      	adds	r3, #8
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	443b      	add	r3, r7
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	e767      	b.n	8007668 <_vfiprintf_r+0x94>
 8007798:	460c      	mov	r4, r1
 800779a:	2001      	movs	r0, #1
 800779c:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a0:	e7a5      	b.n	80076ee <_vfiprintf_r+0x11a>
 80077a2:	2300      	movs	r3, #0
 80077a4:	f04f 0c0a 	mov.w	ip, #10
 80077a8:	4619      	mov	r1, r3
 80077aa:	3401      	adds	r4, #1
 80077ac:	9305      	str	r3, [sp, #20]
 80077ae:	4620      	mov	r0, r4
 80077b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b4:	3a30      	subs	r2, #48	; 0x30
 80077b6:	2a09      	cmp	r2, #9
 80077b8:	d903      	bls.n	80077c2 <_vfiprintf_r+0x1ee>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0c5      	beq.n	800774a <_vfiprintf_r+0x176>
 80077be:	9105      	str	r1, [sp, #20]
 80077c0:	e7c3      	b.n	800774a <_vfiprintf_r+0x176>
 80077c2:	4604      	mov	r4, r0
 80077c4:	2301      	movs	r3, #1
 80077c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ca:	e7f0      	b.n	80077ae <_vfiprintf_r+0x1da>
 80077cc:	ab03      	add	r3, sp, #12
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4630      	mov	r0, r6
 80077d4:	4b16      	ldr	r3, [pc, #88]	; (8007830 <_vfiprintf_r+0x25c>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	f7fd fddc 	bl	8005394 <_printf_float>
 80077dc:	4607      	mov	r7, r0
 80077de:	1c78      	adds	r0, r7, #1
 80077e0:	d1d6      	bne.n	8007790 <_vfiprintf_r+0x1bc>
 80077e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077e4:	07d9      	lsls	r1, r3, #31
 80077e6:	d405      	bmi.n	80077f4 <_vfiprintf_r+0x220>
 80077e8:	89ab      	ldrh	r3, [r5, #12]
 80077ea:	059a      	lsls	r2, r3, #22
 80077ec:	d402      	bmi.n	80077f4 <_vfiprintf_r+0x220>
 80077ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077f0:	f000 faab 	bl	8007d4a <__retarget_lock_release_recursive>
 80077f4:	89ab      	ldrh	r3, [r5, #12]
 80077f6:	065b      	lsls	r3, r3, #25
 80077f8:	f53f af12 	bmi.w	8007620 <_vfiprintf_r+0x4c>
 80077fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fe:	e711      	b.n	8007624 <_vfiprintf_r+0x50>
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	462a      	mov	r2, r5
 8007806:	4630      	mov	r0, r6
 8007808:	4b09      	ldr	r3, [pc, #36]	; (8007830 <_vfiprintf_r+0x25c>)
 800780a:	a904      	add	r1, sp, #16
 800780c:	f7fe f85e 	bl	80058cc <_printf_i>
 8007810:	e7e4      	b.n	80077dc <_vfiprintf_r+0x208>
 8007812:	bf00      	nop
 8007814:	08008434 	.word	0x08008434
 8007818:	08008454 	.word	0x08008454
 800781c:	08008414 	.word	0x08008414
 8007820:	080082bc 	.word	0x080082bc
 8007824:	080082c2 	.word	0x080082c2
 8007828:	080082c6 	.word	0x080082c6
 800782c:	08005395 	.word	0x08005395
 8007830:	080075b1 	.word	0x080075b1

08007834 <__swbuf_r>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	460e      	mov	r6, r1
 8007838:	4614      	mov	r4, r2
 800783a:	4605      	mov	r5, r0
 800783c:	b118      	cbz	r0, 8007846 <__swbuf_r+0x12>
 800783e:	6983      	ldr	r3, [r0, #24]
 8007840:	b90b      	cbnz	r3, 8007846 <__swbuf_r+0x12>
 8007842:	f000 f9e3 	bl	8007c0c <__sinit>
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <__swbuf_r+0x98>)
 8007848:	429c      	cmp	r4, r3
 800784a:	d12b      	bne.n	80078a4 <__swbuf_r+0x70>
 800784c:	686c      	ldr	r4, [r5, #4]
 800784e:	69a3      	ldr	r3, [r4, #24]
 8007850:	60a3      	str	r3, [r4, #8]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	071a      	lsls	r2, r3, #28
 8007856:	d52f      	bpl.n	80078b8 <__swbuf_r+0x84>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	b36b      	cbz	r3, 80078b8 <__swbuf_r+0x84>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	6820      	ldr	r0, [r4, #0]
 8007860:	b2f6      	uxtb	r6, r6
 8007862:	1ac0      	subs	r0, r0, r3
 8007864:	6963      	ldr	r3, [r4, #20]
 8007866:	4637      	mov	r7, r6
 8007868:	4283      	cmp	r3, r0
 800786a:	dc04      	bgt.n	8007876 <__swbuf_r+0x42>
 800786c:	4621      	mov	r1, r4
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f938 	bl	8007ae4 <_fflush_r>
 8007874:	bb30      	cbnz	r0, 80078c4 <__swbuf_r+0x90>
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	3001      	adds	r0, #1
 800787a:	3b01      	subs	r3, #1
 800787c:	60a3      	str	r3, [r4, #8]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	6022      	str	r2, [r4, #0]
 8007884:	701e      	strb	r6, [r3, #0]
 8007886:	6963      	ldr	r3, [r4, #20]
 8007888:	4283      	cmp	r3, r0
 800788a:	d004      	beq.n	8007896 <__swbuf_r+0x62>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	07db      	lsls	r3, r3, #31
 8007890:	d506      	bpl.n	80078a0 <__swbuf_r+0x6c>
 8007892:	2e0a      	cmp	r6, #10
 8007894:	d104      	bne.n	80078a0 <__swbuf_r+0x6c>
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f923 	bl	8007ae4 <_fflush_r>
 800789e:	b988      	cbnz	r0, 80078c4 <__swbuf_r+0x90>
 80078a0:	4638      	mov	r0, r7
 80078a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <__swbuf_r+0x9c>)
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d101      	bne.n	80078ae <__swbuf_r+0x7a>
 80078aa:	68ac      	ldr	r4, [r5, #8]
 80078ac:	e7cf      	b.n	800784e <__swbuf_r+0x1a>
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <__swbuf_r+0xa0>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	bf08      	it	eq
 80078b4:	68ec      	ldreq	r4, [r5, #12]
 80078b6:	e7ca      	b.n	800784e <__swbuf_r+0x1a>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f81a 	bl	80078f4 <__swsetup_r>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d0cb      	beq.n	800785c <__swbuf_r+0x28>
 80078c4:	f04f 37ff 	mov.w	r7, #4294967295
 80078c8:	e7ea      	b.n	80078a0 <__swbuf_r+0x6c>
 80078ca:	bf00      	nop
 80078cc:	08008434 	.word	0x08008434
 80078d0:	08008454 	.word	0x08008454
 80078d4:	08008414 	.word	0x08008414

080078d8 <__ascii_wctomb>:
 80078d8:	4603      	mov	r3, r0
 80078da:	4608      	mov	r0, r1
 80078dc:	b141      	cbz	r1, 80078f0 <__ascii_wctomb+0x18>
 80078de:	2aff      	cmp	r2, #255	; 0xff
 80078e0:	d904      	bls.n	80078ec <__ascii_wctomb+0x14>
 80078e2:	228a      	movs	r2, #138	; 0x8a
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	4770      	bx	lr
 80078ec:	2001      	movs	r0, #1
 80078ee:	700a      	strb	r2, [r1, #0]
 80078f0:	4770      	bx	lr
	...

080078f4 <__swsetup_r>:
 80078f4:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <__swsetup_r+0xcc>)
 80078f6:	b570      	push	{r4, r5, r6, lr}
 80078f8:	681d      	ldr	r5, [r3, #0]
 80078fa:	4606      	mov	r6, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	b125      	cbz	r5, 800790a <__swsetup_r+0x16>
 8007900:	69ab      	ldr	r3, [r5, #24]
 8007902:	b913      	cbnz	r3, 800790a <__swsetup_r+0x16>
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f981 	bl	8007c0c <__sinit>
 800790a:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <__swsetup_r+0xd0>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d10f      	bne.n	8007930 <__swsetup_r+0x3c>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007918:	0719      	lsls	r1, r3, #28
 800791a:	d42c      	bmi.n	8007976 <__swsetup_r+0x82>
 800791c:	06dd      	lsls	r5, r3, #27
 800791e:	d411      	bmi.n	8007944 <__swsetup_r+0x50>
 8007920:	2309      	movs	r3, #9
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	e03e      	b.n	80079ae <__swsetup_r+0xba>
 8007930:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <__swsetup_r+0xd4>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <__swsetup_r+0x46>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7eb      	b.n	8007912 <__swsetup_r+0x1e>
 800793a:	4b24      	ldr	r3, [pc, #144]	; (80079cc <__swsetup_r+0xd8>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7e6      	b.n	8007912 <__swsetup_r+0x1e>
 8007944:	0758      	lsls	r0, r3, #29
 8007946:	d512      	bpl.n	800796e <__swsetup_r+0x7a>
 8007948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794a:	b141      	cbz	r1, 800795e <__swsetup_r+0x6a>
 800794c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <__swsetup_r+0x66>
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff fb37 	bl	8006fc8 <_free_r>
 800795a:	2300      	movs	r3, #0
 800795c:	6363      	str	r3, [r4, #52]	; 0x34
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	2300      	movs	r3, #0
 8007968:	6063      	str	r3, [r4, #4]
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	f043 0308 	orr.w	r3, r3, #8
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	b94b      	cbnz	r3, 800798e <__swsetup_r+0x9a>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007984:	d003      	beq.n	800798e <__swsetup_r+0x9a>
 8007986:	4621      	mov	r1, r4
 8007988:	4630      	mov	r0, r6
 800798a:	f000 fa05 	bl	8007d98 <__smakebuf_r>
 800798e:	89a0      	ldrh	r0, [r4, #12]
 8007990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007994:	f010 0301 	ands.w	r3, r0, #1
 8007998:	d00a      	beq.n	80079b0 <__swsetup_r+0xbc>
 800799a:	2300      	movs	r3, #0
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	425b      	negs	r3, r3
 80079a2:	61a3      	str	r3, [r4, #24]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	b943      	cbnz	r3, 80079ba <__swsetup_r+0xc6>
 80079a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ac:	d1ba      	bne.n	8007924 <__swsetup_r+0x30>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	0781      	lsls	r1, r0, #30
 80079b2:	bf58      	it	pl
 80079b4:	6963      	ldrpl	r3, [r4, #20]
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	e7f4      	b.n	80079a4 <__swsetup_r+0xb0>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e7f7      	b.n	80079ae <__swsetup_r+0xba>
 80079be:	bf00      	nop
 80079c0:	20000044 	.word	0x20000044
 80079c4:	08008434 	.word	0x08008434
 80079c8:	08008454 	.word	0x08008454
 80079cc:	08008414 	.word	0x08008414

080079d0 <abort>:
 80079d0:	2006      	movs	r0, #6
 80079d2:	b508      	push	{r3, lr}
 80079d4:	f000 fa50 	bl	8007e78 <raise>
 80079d8:	2001      	movs	r0, #1
 80079da:	f7fa fd04 	bl	80023e6 <_exit>
	...

080079e0 <__sflush_r>:
 80079e0:	898a      	ldrh	r2, [r1, #12]
 80079e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e4:	4605      	mov	r5, r0
 80079e6:	0710      	lsls	r0, r2, #28
 80079e8:	460c      	mov	r4, r1
 80079ea:	d457      	bmi.n	8007a9c <__sflush_r+0xbc>
 80079ec:	684b      	ldr	r3, [r1, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dc04      	bgt.n	80079fc <__sflush_r+0x1c>
 80079f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dc01      	bgt.n	80079fc <__sflush_r+0x1c>
 80079f8:	2000      	movs	r0, #0
 80079fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d0fa      	beq.n	80079f8 <__sflush_r+0x18>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a08:	682f      	ldr	r7, [r5, #0]
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	d032      	beq.n	8007a74 <__sflush_r+0x94>
 8007a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	075a      	lsls	r2, r3, #29
 8007a14:	d505      	bpl.n	8007a22 <__sflush_r+0x42>
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	1ac0      	subs	r0, r0, r3
 8007a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a1c:	b10b      	cbz	r3, 8007a22 <__sflush_r+0x42>
 8007a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a20:	1ac0      	subs	r0, r0, r3
 8007a22:	2300      	movs	r3, #0
 8007a24:	4602      	mov	r2, r0
 8007a26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a28:	4628      	mov	r0, r5
 8007a2a:	6a21      	ldr	r1, [r4, #32]
 8007a2c:	47b0      	blx	r6
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	d106      	bne.n	8007a42 <__sflush_r+0x62>
 8007a34:	6829      	ldr	r1, [r5, #0]
 8007a36:	291d      	cmp	r1, #29
 8007a38:	d82c      	bhi.n	8007a94 <__sflush_r+0xb4>
 8007a3a:	4a29      	ldr	r2, [pc, #164]	; (8007ae0 <__sflush_r+0x100>)
 8007a3c:	40ca      	lsrs	r2, r1
 8007a3e:	07d6      	lsls	r6, r2, #31
 8007a40:	d528      	bpl.n	8007a94 <__sflush_r+0xb4>
 8007a42:	2200      	movs	r2, #0
 8007a44:	6062      	str	r2, [r4, #4]
 8007a46:	6922      	ldr	r2, [r4, #16]
 8007a48:	04d9      	lsls	r1, r3, #19
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	d504      	bpl.n	8007a58 <__sflush_r+0x78>
 8007a4e:	1c42      	adds	r2, r0, #1
 8007a50:	d101      	bne.n	8007a56 <__sflush_r+0x76>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b903      	cbnz	r3, 8007a58 <__sflush_r+0x78>
 8007a56:	6560      	str	r0, [r4, #84]	; 0x54
 8007a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5a:	602f      	str	r7, [r5, #0]
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d0cb      	beq.n	80079f8 <__sflush_r+0x18>
 8007a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a64:	4299      	cmp	r1, r3
 8007a66:	d002      	beq.n	8007a6e <__sflush_r+0x8e>
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f7ff faad 	bl	8006fc8 <_free_r>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	6360      	str	r0, [r4, #52]	; 0x34
 8007a72:	e7c2      	b.n	80079fa <__sflush_r+0x1a>
 8007a74:	6a21      	ldr	r1, [r4, #32]
 8007a76:	2301      	movs	r3, #1
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b0      	blx	r6
 8007a7c:	1c41      	adds	r1, r0, #1
 8007a7e:	d1c7      	bne.n	8007a10 <__sflush_r+0x30>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0c4      	beq.n	8007a10 <__sflush_r+0x30>
 8007a86:	2b1d      	cmp	r3, #29
 8007a88:	d001      	beq.n	8007a8e <__sflush_r+0xae>
 8007a8a:	2b16      	cmp	r3, #22
 8007a8c:	d101      	bne.n	8007a92 <__sflush_r+0xb2>
 8007a8e:	602f      	str	r7, [r5, #0]
 8007a90:	e7b2      	b.n	80079f8 <__sflush_r+0x18>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e7ae      	b.n	80079fa <__sflush_r+0x1a>
 8007a9c:	690f      	ldr	r7, [r1, #16]
 8007a9e:	2f00      	cmp	r7, #0
 8007aa0:	d0aa      	beq.n	80079f8 <__sflush_r+0x18>
 8007aa2:	0793      	lsls	r3, r2, #30
 8007aa4:	bf18      	it	ne
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	680e      	ldr	r6, [r1, #0]
 8007aaa:	bf08      	it	eq
 8007aac:	694b      	ldreq	r3, [r1, #20]
 8007aae:	1bf6      	subs	r6, r6, r7
 8007ab0:	600f      	str	r7, [r1, #0]
 8007ab2:	608b      	str	r3, [r1, #8]
 8007ab4:	2e00      	cmp	r6, #0
 8007ab6:	dd9f      	ble.n	80079f8 <__sflush_r+0x18>
 8007ab8:	4633      	mov	r3, r6
 8007aba:	463a      	mov	r2, r7
 8007abc:	4628      	mov	r0, r5
 8007abe:	6a21      	ldr	r1, [r4, #32]
 8007ac0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ac4:	47e0      	blx	ip
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	dc06      	bgt.n	8007ad8 <__sflush_r+0xf8>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	e790      	b.n	80079fa <__sflush_r+0x1a>
 8007ad8:	4407      	add	r7, r0
 8007ada:	1a36      	subs	r6, r6, r0
 8007adc:	e7ea      	b.n	8007ab4 <__sflush_r+0xd4>
 8007ade:	bf00      	nop
 8007ae0:	20400001 	.word	0x20400001

08007ae4 <_fflush_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	690b      	ldr	r3, [r1, #16]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b913      	cbnz	r3, 8007af4 <_fflush_r+0x10>
 8007aee:	2500      	movs	r5, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	b118      	cbz	r0, 8007afe <_fflush_r+0x1a>
 8007af6:	6983      	ldr	r3, [r0, #24]
 8007af8:	b90b      	cbnz	r3, 8007afe <_fflush_r+0x1a>
 8007afa:	f000 f887 	bl	8007c0c <__sinit>
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <_fflush_r+0x6c>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d11b      	bne.n	8007b3c <_fflush_r+0x58>
 8007b04:	686c      	ldr	r4, [r5, #4]
 8007b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0ef      	beq.n	8007aee <_fflush_r+0xa>
 8007b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b10:	07d0      	lsls	r0, r2, #31
 8007b12:	d404      	bmi.n	8007b1e <_fflush_r+0x3a>
 8007b14:	0599      	lsls	r1, r3, #22
 8007b16:	d402      	bmi.n	8007b1e <_fflush_r+0x3a>
 8007b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1a:	f000 f915 	bl	8007d48 <__retarget_lock_acquire_recursive>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	4621      	mov	r1, r4
 8007b22:	f7ff ff5d 	bl	80079e0 <__sflush_r>
 8007b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b28:	4605      	mov	r5, r0
 8007b2a:	07da      	lsls	r2, r3, #31
 8007b2c:	d4e0      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	059b      	lsls	r3, r3, #22
 8007b32:	d4dd      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b36:	f000 f908 	bl	8007d4a <__retarget_lock_release_recursive>
 8007b3a:	e7d9      	b.n	8007af0 <_fflush_r+0xc>
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <_fflush_r+0x70>)
 8007b3e:	429c      	cmp	r4, r3
 8007b40:	d101      	bne.n	8007b46 <_fflush_r+0x62>
 8007b42:	68ac      	ldr	r4, [r5, #8]
 8007b44:	e7df      	b.n	8007b06 <_fflush_r+0x22>
 8007b46:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <_fflush_r+0x74>)
 8007b48:	429c      	cmp	r4, r3
 8007b4a:	bf08      	it	eq
 8007b4c:	68ec      	ldreq	r4, [r5, #12]
 8007b4e:	e7da      	b.n	8007b06 <_fflush_r+0x22>
 8007b50:	08008434 	.word	0x08008434
 8007b54:	08008454 	.word	0x08008454
 8007b58:	08008414 	.word	0x08008414

08007b5c <std>:
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
 8007b62:	e9c0 3300 	strd	r3, r3, [r0]
 8007b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6a:	6083      	str	r3, [r0, #8]
 8007b6c:	8181      	strh	r1, [r0, #12]
 8007b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b70:	81c2      	strh	r2, [r0, #14]
 8007b72:	6183      	str	r3, [r0, #24]
 8007b74:	4619      	mov	r1, r3
 8007b76:	2208      	movs	r2, #8
 8007b78:	305c      	adds	r0, #92	; 0x5c
 8007b7a:	f7fd fb65 	bl	8005248 <memset>
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x38>)
 8007b80:	6224      	str	r4, [r4, #32]
 8007b82:	6263      	str	r3, [r4, #36]	; 0x24
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <std+0x3c>)
 8007b86:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <std+0x40>)
 8007b8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8c:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <std+0x44>)
 8007b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08007eb1 	.word	0x08007eb1
 8007b98:	08007ed3 	.word	0x08007ed3
 8007b9c:	08007f0b 	.word	0x08007f0b
 8007ba0:	08007f2f 	.word	0x08007f2f

08007ba4 <_cleanup_r>:
 8007ba4:	4901      	ldr	r1, [pc, #4]	; (8007bac <_cleanup_r+0x8>)
 8007ba6:	f000 b8af 	b.w	8007d08 <_fwalk_reent>
 8007baa:	bf00      	nop
 8007bac:	08007ae5 	.word	0x08007ae5

08007bb0 <__sfmoreglue>:
 8007bb0:	2268      	movs	r2, #104	; 0x68
 8007bb2:	b570      	push	{r4, r5, r6, lr}
 8007bb4:	1e4d      	subs	r5, r1, #1
 8007bb6:	4355      	muls	r5, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bbe:	f7ff fa6b 	bl	8007098 <_malloc_r>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b140      	cbz	r0, 8007bd8 <__sfmoreglue+0x28>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bcc:	300c      	adds	r0, #12
 8007bce:	60a0      	str	r0, [r4, #8]
 8007bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd4:	f7fd fb38 	bl	8005248 <memset>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <__sfp_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sfp_lock_acquire+0x8>)
 8007bde:	f000 b8b3 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	200003b5 	.word	0x200003b5

08007be8 <__sfp_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sfp_lock_release+0x8>)
 8007bea:	f000 b8ae 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	200003b5 	.word	0x200003b5

08007bf4 <__sinit_lock_acquire>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sinit_lock_acquire+0x8>)
 8007bf6:	f000 b8a7 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	200003b6 	.word	0x200003b6

08007c00 <__sinit_lock_release>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__sinit_lock_release+0x8>)
 8007c02:	f000 b8a2 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	200003b6 	.word	0x200003b6

08007c0c <__sinit>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7ff fff0 	bl	8007bf4 <__sinit_lock_acquire>
 8007c14:	69a3      	ldr	r3, [r4, #24]
 8007c16:	b11b      	cbz	r3, 8007c20 <__sinit+0x14>
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bff0 	b.w	8007c00 <__sinit_lock_release>
 8007c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c24:	6523      	str	r3, [r4, #80]	; 0x50
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <__sinit+0x68>)
 8007c28:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <__sinit+0x6c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	bf08      	it	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	4620      	mov	r0, r4
 8007c36:	bf08      	it	eq
 8007c38:	61a3      	streq	r3, [r4, #24]
 8007c3a:	f000 f81f 	bl	8007c7c <__sfp>
 8007c3e:	6060      	str	r0, [r4, #4]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 f81b 	bl	8007c7c <__sfp>
 8007c46:	60a0      	str	r0, [r4, #8]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 f817 	bl	8007c7c <__sfp>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2104      	movs	r1, #4
 8007c52:	60e0      	str	r0, [r4, #12]
 8007c54:	6860      	ldr	r0, [r4, #4]
 8007c56:	f7ff ff81 	bl	8007b5c <std>
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2109      	movs	r1, #9
 8007c5e:	68a0      	ldr	r0, [r4, #8]
 8007c60:	f7ff ff7c 	bl	8007b5c <std>
 8007c64:	2202      	movs	r2, #2
 8007c66:	2112      	movs	r1, #18
 8007c68:	68e0      	ldr	r0, [r4, #12]
 8007c6a:	f7ff ff77 	bl	8007b5c <std>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	61a3      	str	r3, [r4, #24]
 8007c72:	e7d1      	b.n	8007c18 <__sinit+0xc>
 8007c74:	0800809c 	.word	0x0800809c
 8007c78:	08007ba5 	.word	0x08007ba5

08007c7c <__sfp>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7ff ffac 	bl	8007bdc <__sfp_lock_acquire>
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <__sfp+0x84>)
 8007c86:	681e      	ldr	r6, [r3, #0]
 8007c88:	69b3      	ldr	r3, [r6, #24]
 8007c8a:	b913      	cbnz	r3, 8007c92 <__sfp+0x16>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffbd 	bl	8007c0c <__sinit>
 8007c92:	3648      	adds	r6, #72	; 0x48
 8007c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	d503      	bpl.n	8007ca4 <__sfp+0x28>
 8007c9c:	6833      	ldr	r3, [r6, #0]
 8007c9e:	b30b      	cbz	r3, 8007ce4 <__sfp+0x68>
 8007ca0:	6836      	ldr	r6, [r6, #0]
 8007ca2:	e7f7      	b.n	8007c94 <__sfp+0x18>
 8007ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ca8:	b9d5      	cbnz	r5, 8007ce0 <__sfp+0x64>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <__sfp+0x88>)
 8007cac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb0:	60e3      	str	r3, [r4, #12]
 8007cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb4:	f000 f847 	bl	8007d46 <__retarget_lock_init_recursive>
 8007cb8:	f7ff ff96 	bl	8007be8 <__sfp_lock_release>
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc8:	6025      	str	r5, [r4, #0]
 8007cca:	61a5      	str	r5, [r4, #24]
 8007ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd0:	f7fd faba 	bl	8005248 <memset>
 8007cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	3468      	adds	r4, #104	; 0x68
 8007ce2:	e7d9      	b.n	8007c98 <__sfp+0x1c>
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff62 	bl	8007bb0 <__sfmoreglue>
 8007cec:	4604      	mov	r4, r0
 8007cee:	6030      	str	r0, [r6, #0]
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1d5      	bne.n	8007ca0 <__sfp+0x24>
 8007cf4:	f7ff ff78 	bl	8007be8 <__sfp_lock_release>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	e7ee      	b.n	8007cdc <__sfp+0x60>
 8007cfe:	bf00      	nop
 8007d00:	0800809c 	.word	0x0800809c
 8007d04:	ffff0001 	.word	0xffff0001

08007d08 <_fwalk_reent>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	4688      	mov	r8, r1
 8007d10:	2700      	movs	r7, #0
 8007d12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d1e:	d505      	bpl.n	8007d2c <_fwalk_reent+0x24>
 8007d20:	6824      	ldr	r4, [r4, #0]
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1f7      	bne.n	8007d16 <_fwalk_reent+0xe>
 8007d26:	4638      	mov	r0, r7
 8007d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2c:	89ab      	ldrh	r3, [r5, #12]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d907      	bls.n	8007d42 <_fwalk_reent+0x3a>
 8007d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d36:	3301      	adds	r3, #1
 8007d38:	d003      	beq.n	8007d42 <_fwalk_reent+0x3a>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	47c0      	blx	r8
 8007d40:	4307      	orrs	r7, r0
 8007d42:	3568      	adds	r5, #104	; 0x68
 8007d44:	e7e9      	b.n	8007d1a <_fwalk_reent+0x12>

08007d46 <__retarget_lock_init_recursive>:
 8007d46:	4770      	bx	lr

08007d48 <__retarget_lock_acquire_recursive>:
 8007d48:	4770      	bx	lr

08007d4a <__retarget_lock_release_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <__swhatbuf_r>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	460e      	mov	r6, r1
 8007d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d54:	4614      	mov	r4, r2
 8007d56:	2900      	cmp	r1, #0
 8007d58:	461d      	mov	r5, r3
 8007d5a:	b096      	sub	sp, #88	; 0x58
 8007d5c:	da08      	bge.n	8007d70 <__swhatbuf_r+0x24>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	061a      	lsls	r2, r3, #24
 8007d68:	d410      	bmi.n	8007d8c <__swhatbuf_r+0x40>
 8007d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d6e:	e00e      	b.n	8007d8e <__swhatbuf_r+0x42>
 8007d70:	466a      	mov	r2, sp
 8007d72:	f000 f903 	bl	8007f7c <_fstat_r>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	dbf1      	blt.n	8007d5e <__swhatbuf_r+0x12>
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d84:	425a      	negs	r2, r3
 8007d86:	415a      	adcs	r2, r3
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	e7ee      	b.n	8007d6a <__swhatbuf_r+0x1e>
 8007d8c:	2340      	movs	r3, #64	; 0x40
 8007d8e:	2000      	movs	r0, #0
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	b016      	add	sp, #88	; 0x58
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d98 <__smakebuf_r>:
 8007d98:	898b      	ldrh	r3, [r1, #12]
 8007d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d9c:	079d      	lsls	r5, r3, #30
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460c      	mov	r4, r1
 8007da2:	d507      	bpl.n	8007db4 <__smakebuf_r+0x1c>
 8007da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	6123      	str	r3, [r4, #16]
 8007dac:	2301      	movs	r3, #1
 8007dae:	6163      	str	r3, [r4, #20]
 8007db0:	b002      	add	sp, #8
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	466a      	mov	r2, sp
 8007db6:	ab01      	add	r3, sp, #4
 8007db8:	f7ff ffc8 	bl	8007d4c <__swhatbuf_r>
 8007dbc:	9900      	ldr	r1, [sp, #0]
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7ff f969 	bl	8007098 <_malloc_r>
 8007dc6:	b948      	cbnz	r0, 8007ddc <__smakebuf_r+0x44>
 8007dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dcc:	059a      	lsls	r2, r3, #22
 8007dce:	d4ef      	bmi.n	8007db0 <__smakebuf_r+0x18>
 8007dd0:	f023 0303 	bic.w	r3, r3, #3
 8007dd4:	f043 0302 	orr.w	r3, r3, #2
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	e7e3      	b.n	8007da4 <__smakebuf_r+0xc>
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <__smakebuf_r+0x7c>)
 8007dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	6020      	str	r0, [r4, #0]
 8007de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	9b00      	ldr	r3, [sp, #0]
 8007dec:	6120      	str	r0, [r4, #16]
 8007dee:	6163      	str	r3, [r4, #20]
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	b15b      	cbz	r3, 8007e0c <__smakebuf_r+0x74>
 8007df4:	4630      	mov	r0, r6
 8007df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfa:	f000 f8d1 	bl	8007fa0 <_isatty_r>
 8007dfe:	b128      	cbz	r0, 8007e0c <__smakebuf_r+0x74>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f023 0303 	bic.w	r3, r3, #3
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	89a0      	ldrh	r0, [r4, #12]
 8007e0e:	4305      	orrs	r5, r0
 8007e10:	81a5      	strh	r5, [r4, #12]
 8007e12:	e7cd      	b.n	8007db0 <__smakebuf_r+0x18>
 8007e14:	08007ba5 	.word	0x08007ba5

08007e18 <_malloc_usable_size_r>:
 8007e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1c:	1f18      	subs	r0, r3, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfbc      	itt	lt
 8007e22:	580b      	ldrlt	r3, [r1, r0]
 8007e24:	18c0      	addlt	r0, r0, r3
 8007e26:	4770      	bx	lr

08007e28 <_raise_r>:
 8007e28:	291f      	cmp	r1, #31
 8007e2a:	b538      	push	{r3, r4, r5, lr}
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	460d      	mov	r5, r1
 8007e30:	d904      	bls.n	8007e3c <_raise_r+0x14>
 8007e32:	2316      	movs	r3, #22
 8007e34:	6003      	str	r3, [r0, #0]
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e3e:	b112      	cbz	r2, 8007e46 <_raise_r+0x1e>
 8007e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e44:	b94b      	cbnz	r3, 8007e5a <_raise_r+0x32>
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 f830 	bl	8007eac <_getpid_r>
 8007e4c:	462a      	mov	r2, r5
 8007e4e:	4601      	mov	r1, r0
 8007e50:	4620      	mov	r0, r4
 8007e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e56:	f000 b817 	b.w	8007e88 <_kill_r>
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d00a      	beq.n	8007e74 <_raise_r+0x4c>
 8007e5e:	1c59      	adds	r1, r3, #1
 8007e60:	d103      	bne.n	8007e6a <_raise_r+0x42>
 8007e62:	2316      	movs	r3, #22
 8007e64:	6003      	str	r3, [r0, #0]
 8007e66:	2001      	movs	r0, #1
 8007e68:	e7e7      	b.n	8007e3a <_raise_r+0x12>
 8007e6a:	2400      	movs	r4, #0
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e72:	4798      	blx	r3
 8007e74:	2000      	movs	r0, #0
 8007e76:	e7e0      	b.n	8007e3a <_raise_r+0x12>

08007e78 <raise>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <raise+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f7ff bfd3 	b.w	8007e28 <_raise_r>
 8007e82:	bf00      	nop
 8007e84:	20000044 	.word	0x20000044

08007e88 <_kill_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4d06      	ldr	r5, [pc, #24]	; (8007ea8 <_kill_r+0x20>)
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	f7fa fa96 	bl	80023c6 <_kill>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	d102      	bne.n	8007ea4 <_kill_r+0x1c>
 8007e9e:	682b      	ldr	r3, [r5, #0]
 8007ea0:	b103      	cbz	r3, 8007ea4 <_kill_r+0x1c>
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200003b0 	.word	0x200003b0

08007eac <_getpid_r>:
 8007eac:	f7fa ba84 	b.w	80023b8 <_getpid>

08007eb0 <__sread>:
 8007eb0:	b510      	push	{r4, lr}
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb8:	f000 f894 	bl	8007fe4 <_read_r>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	bfab      	itete	ge
 8007ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ec4:	181b      	addge	r3, r3, r0
 8007ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eca:	bfac      	ite	ge
 8007ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ece:	81a3      	strhlt	r3, [r4, #12]
 8007ed0:	bd10      	pop	{r4, pc}

08007ed2 <__swrite>:
 8007ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed6:	461f      	mov	r7, r3
 8007ed8:	898b      	ldrh	r3, [r1, #12]
 8007eda:	4605      	mov	r5, r0
 8007edc:	05db      	lsls	r3, r3, #23
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4616      	mov	r6, r2
 8007ee2:	d505      	bpl.n	8007ef0 <__swrite+0x1e>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	f000 f868 	bl	8007fc0 <_lseek_r>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	4632      	mov	r2, r6
 8007ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	4628      	mov	r0, r5
 8007efc:	463b      	mov	r3, r7
 8007efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f06:	f000 b817 	b.w	8007f38 <_write_r>

08007f0a <__sseek>:
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f12:	f000 f855 	bl	8007fc0 <_lseek_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	bf15      	itete	ne
 8007f1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f26:	81a3      	strheq	r3, [r4, #12]
 8007f28:	bf18      	it	ne
 8007f2a:	81a3      	strhne	r3, [r4, #12]
 8007f2c:	bd10      	pop	{r4, pc}

08007f2e <__sclose>:
 8007f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f32:	f000 b813 	b.w	8007f5c <_close_r>
	...

08007f38 <_write_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	4611      	mov	r1, r2
 8007f40:	2200      	movs	r2, #0
 8007f42:	4d05      	ldr	r5, [pc, #20]	; (8007f58 <_write_r+0x20>)
 8007f44:	602a      	str	r2, [r5, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f7fa fa74 	bl	8002434 <_write>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_write_r+0x1e>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_write_r+0x1e>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	200003b0 	.word	0x200003b0

08007f5c <_close_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4d05      	ldr	r5, [pc, #20]	; (8007f78 <_close_r+0x1c>)
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f7fa fa80 	bl	800246c <_close>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_close_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_close_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	200003b0 	.word	0x200003b0

08007f7c <_fstat_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_fstat_r+0x20>)
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	4611      	mov	r1, r2
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	f7fa fa7a 	bl	8002482 <_fstat>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	d102      	bne.n	8007f98 <_fstat_r+0x1c>
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	b103      	cbz	r3, 8007f98 <_fstat_r+0x1c>
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200003b0 	.word	0x200003b0

08007fa0 <_isatty_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4d05      	ldr	r5, [pc, #20]	; (8007fbc <_isatty_r+0x1c>)
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7fa fa78 	bl	80024a0 <_isatty>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_isatty_r+0x1a>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_isatty_r+0x1a>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	200003b0 	.word	0x200003b0

08007fc0 <_lseek_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4d05      	ldr	r5, [pc, #20]	; (8007fe0 <_lseek_r+0x20>)
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7fa fa70 	bl	80024b4 <_lseek>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_lseek_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_lseek_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	200003b0 	.word	0x200003b0

08007fe4 <_read_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4611      	mov	r1, r2
 8007fec:	2200      	movs	r2, #0
 8007fee:	4d05      	ldr	r5, [pc, #20]	; (8008004 <_read_r+0x20>)
 8007ff0:	602a      	str	r2, [r5, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f7fa fa01 	bl	80023fa <_read>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_read_r+0x1e>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_read_r+0x1e>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	200003b0 	.word	0x200003b0

08008008 <_init>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr

08008014 <_fini>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr
