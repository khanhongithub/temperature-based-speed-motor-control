
TKHTN_don_nhiem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08006e40  08006e40  00016e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800746c  0800746c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800746c  0800746c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800746c  0800746c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200001dc  08007650  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08007650  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee69  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248e  00000000  00000000  0002f06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b7  00000000  00000000  00032f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df03  00000000  00000000  0004bfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0a2  00000000  00000000  00059ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004950  00000000  00000000  000e5fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e24 	.word	0x08006e24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006e24 	.word	0x08006e24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fb2f 	bl	80015f4 <DELAY_TIM_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb29 	bl	800160a <DELAY_TIM_Us>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fb2f 	bl	8001638 <DELAY_TIM_Ms>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	889b      	ldrh	r3, [r3, #4]
 8000ffc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f107 0208 	add.w	r2, r7, #8
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f977 	bl	8002304 <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f107 0208 	add.w	r2, r7, #8
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f959 	bl	8002304 <HAL_GPIO_Init>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6898      	ldr	r0, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	78fa      	ldrb	r2, [r7, #3]
 8001070:	4619      	mov	r1, r3
 8001072:	f001 fae2 	bl	800263a <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	889b      	ldrh	r3, [r3, #4]
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f001 fabb 	bl	800260c <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff98 	bl	8000fe2 <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffd0 	bl	800105a <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);
 80010ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff6d 	bl	8000f9e <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffaa 	bl	800101e <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80);
 80010ca:	2150      	movs	r1, #80	; 0x50
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff66 	bl	8000f9e <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffd3 	bl	800107e <DS18B20_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <DS18B20_Start+0x44>
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e001      	b.n	80010e8 <DS18B20_Start+0x48>
	else Response = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 80010e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff56 	bl	8000f9e <DS18B20_DelayUs>

	return Response;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff6a 	bl	8000fe2 <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e02b      	b.n	800116c <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 8001114:	78fa      	ldrb	r2, [r7, #3]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	fa42 f303 	asr.w	r3, r2, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d012      	beq.n	800114a <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff5c 	bl	8000fe2 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff94 	bl	800105a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 8001132:	2101      	movs	r1, #1
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff32 	bl	8000f9e <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff6f 	bl	800101e <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8001140:	2132      	movs	r1, #50	; 0x32
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff2b 	bl	8000f9e <DS18B20_DelayUs>
 8001148:	e00d      	b.n	8001166 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff49 	bl	8000fe2 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8001150:	2100      	movs	r1, #0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff81 	bl	800105a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8001158:	2132      	movs	r1, #50	; 0x32
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff1f 	bl	8000f9e <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff5c 	bl	800101e <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b07      	cmp	r3, #7
 8001170:	ddd0      	ble.n	8001114 <DS18B20_Write+0x18>
		}
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff48 	bl	800101e <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	e024      	b.n	80011de <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff24 	bl	8000fe2 <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff5c 	bl	800105a <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 80011a2:	2101      	movs	r1, #1
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fefa 	bl	8000f9e <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff37 	bl	800101e <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff64 	bl	800107e <DS18B20_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d009      	beq.n	80011d0 <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 80011bc:	2201      	movs	r2, #1
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 80011d0:	2132      	movs	r1, #50	; 0x32
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fee3 	bl	8000f9e <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	ddd7      	ble.n	8001194 <DS18B20_Read+0x18>
	}
	return Value;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	887a      	ldrh	r2, [r7, #2]
 8001206:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff feb8 	bl	8000f84 <DS18B20_DelayInit>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	float Temp;
	DS18B20_Start(DS18B20);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff3b 	bl	80010a0 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 800122a:	2101      	movs	r1, #1
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fec7 	bl	8000fc0 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001232:	21cc      	movs	r1, #204	; 0xcc
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff61 	bl	80010fc <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 800123a:	2144      	movs	r1, #68	; 0x44
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff5d 	bl	80010fc <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8001242:	21c8      	movs	r1, #200	; 0xc8
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff febb 	bl	8000fc0 <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff28 	bl	80010a0 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8001250:	2101      	movs	r1, #1
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff feb4 	bl	8000fc0 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001258:	21cc      	movs	r1, #204	; 0xcc
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff4e 	bl	80010fc <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8001260:	21be      	movs	r1, #190	; 0xbe
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff4a 	bl	80010fc <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff87 	bl	800117c <DS18B20_Read>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff82 	bl	800117c <DS18B20_Read>
 8001278:	4603      	mov	r3, r0
 800127a:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	021a      	lsls	r2, r3, #8
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4313      	orrs	r3, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fcb9 	bl	8000bfc <__aeabi_i2f>
 800128a:	4603      	mov	r3, r0
 800128c:	60bb      	str	r3, [r7, #8]
	DS18B20->Temp = (float)(Temp/16);
 800128e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f7ff fdba 	bl	8000e0c <__aeabi_fdiv>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <Menu_Print>:
 */
#include "Menu_print.h"

/***********printf********/
void Menu_Print(UART_HandleTypeDef *huart, uint16_t* period_array, Motor_Name* Motor)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	printf("*******BTL_TKHTN*********\n\n");
 80012b8:	4827      	ldr	r0, [pc, #156]	; (8001358 <Menu_Print+0xac>)
 80012ba:	f003 fca7 	bl	8004c0c <puts>

	printf("SETTING SCHEDULER TIME\n");
 80012be:	4827      	ldr	r0, [pc, #156]	; (800135c <Menu_Print+0xb0>)
 80012c0:	f003 fca4 	bl	8004c0c <puts>
	printf("Task_read_temp period (ms) = \n");
 80012c4:	4826      	ldr	r0, [pc, #152]	; (8001360 <Menu_Print+0xb4>)
 80012c6:	f003 fca1 	bl	8004c0c <puts>
	period_array[0] = get_int_from_uart(huart);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f856 	bl	800137c <get_int_from_uart>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	801a      	strh	r2, [r3, #0]
	printf("\nTask_read_speed period (ms) = \n");
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <Menu_Print+0xb8>)
 80012da:	f003 fc97 	bl	8004c0c <puts>
	period_array[1] = get_int_from_uart(huart);
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f84c 	bl	800137c <get_int_from_uart>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3302      	adds	r3, #2
 80012ea:	b292      	uxth	r2, r2
 80012ec:	801a      	strh	r2, [r3, #0]
	printf("\nTask_set_speed period (ms) = \n");
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <Menu_Print+0xbc>)
 80012f0:	f003 fc8c 	bl	8004c0c <puts>
	period_array[2] = get_int_from_uart(huart);
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f841 	bl	800137c <get_int_from_uart>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3304      	adds	r3, #4
 8001300:	b292      	uxth	r2, r2
 8001302:	801a      	strh	r2, [r3, #0]

	do {
		printf("\nSETTING MODE MOTOR\n");
 8001304:	4819      	ldr	r0, [pc, #100]	; (800136c <Menu_Print+0xc0>)
 8001306:	f003 fc81 	bl	8004c0c <puts>
		printf("MOTOR SPEED MANUAL:.........1\n");
 800130a:	4819      	ldr	r0, [pc, #100]	; (8001370 <Menu_Print+0xc4>)
 800130c:	f003 fc7e 	bl	8004c0c <puts>
		printf("MOTOR SPEED TEMP:...........2\n");
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <Menu_Print+0xc8>)
 8001312:	f003 fc7b 	bl	8004c0c <puts>
		Motor->mode = get_int_from_uart(huart);
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f830 	bl	800137c <get_int_from_uart>
 800131c:	4603      	mov	r3, r0
 800131e:	b2da      	uxtb	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	761a      	strb	r2, [r3, #24]
	} while ((Motor->mode != MODE_MOTOR_MUNUAL) && (Motor->mode != MODE_MOTOR_TEMP));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7e1b      	ldrb	r3, [r3, #24]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d003      	beq.n	8001334 <Menu_Print+0x88>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e1b      	ldrb	r3, [r3, #24]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d1e7      	bne.n	8001304 <Menu_Print+0x58>

	if(Motor->mode == MODE_MOTOR_MUNUAL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e1b      	ldrb	r3, [r3, #24]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d109      	bne.n	8001350 <Menu_Print+0xa4>
	{
		printf("\nEnter duty speed for Motor (0 < duty < 100):\n");
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <Menu_Print+0xcc>)
 800133e:	f003 fc65 	bl	8004c0c <puts>
		Motor->duty = get_int_from_uart(huart);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f81a 	bl	800137c <get_int_from_uart>
 8001348:	4603      	mov	r3, r0
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	751a      	strb	r2, [r3, #20]
	}

}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08006e40 	.word	0x08006e40
 800135c:	08006e5c 	.word	0x08006e5c
 8001360:	08006e74 	.word	0x08006e74
 8001364:	08006e94 	.word	0x08006e94
 8001368:	08006eb4 	.word	0x08006eb4
 800136c:	08006ed4 	.word	0x08006ed4
 8001370:	08006ee8 	.word	0x08006ee8
 8001374:	08006f08 	.word	0x08006f08
 8001378:	08006f28 	.word	0x08006f28

0800137c <get_int_from_uart>:
	printf("Medium level:......1\n");
	printf("Max level:.........2\n");
}

int get_int_from_uart(UART_HandleTypeDef *huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint8_t rxBuff[10] = "";		//Buffer for receiver Uart
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	809a      	strh	r2, [r3, #4]
	int result = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
	while(rxBuff[0] == '\0')
 8001396:	e006      	b.n	80013a6 <get_int_from_uart+0x2a>
	{
		HAL_UART_Receive(huart, rxBuff, 10, 200);
 8001398:	f107 010c 	add.w	r1, r7, #12
 800139c:	23c8      	movs	r3, #200	; 0xc8
 800139e:	220a      	movs	r2, #10
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f002 fd9c 	bl	8003ede <HAL_UART_Receive>
	while(rxBuff[0] == '\0')
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f5      	beq.n	8001398 <get_int_from_uart+0x1c>
	}
	result = atoi((char*)rxBuff);
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 ff0f 	bl	80041d4 <atoi>
 80013b6:	61b8      	str	r0, [r7, #24]

	for(int i = 0; i < 10; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	e008      	b.n	80013d0 <get_int_from_uart+0x54>
	{
		rxBuff[i] = '\0';
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	ddf3      	ble.n	80013be <get_int_from_uart+0x42>
	}
	return result;
 80013d6:	69bb      	ldr	r3, [r7, #24]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <Motor_Init_PWM>:
  * 		frequency: frequency of PWM
  * @retval None
  */

void Motor_Init_PWM(Motor_Name* Motor, TIM_HandleTypeDef* Timer, uint32_t Channel, 	uint32_t frequency, uint8_t duty)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
	Motor->Timer_PWM = Timer;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	601a      	str	r2, [r3, #0]
	Motor->Channel_PWM = Channel;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	605a      	str	r2, [r3, #4]
	//Start Timer
	HAL_TIM_PWM_Start(Timer, Channel);
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f001 fe39 	bl	8003074 <HAL_TIM_PWM_Start>
	Motor_Set_Duty(Motor, duty);
 8001402:	7e3b      	ldrb	r3, [r7, #24]
 8001404:	4619      	mov	r1, r3
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f81c 	bl	8001444 <Motor_Set_Duty>
	Motor_Set_Frequency(Motor, frequency);
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f862 	bl	80014d8 <Motor_Set_Frequency>
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <Motor_Init_Encoder>:
  * @param	Timer,channel for Encoder
  *
  * @retval None
  */
void Motor_Init_Encoder(Motor_Name* Motor, TIM_HandleTypeDef* Timer, uint32_t Channel)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	Motor->Timer_Encoder = Timer;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	609a      	str	r2, [r3, #8]
	Motor->Channel_Encoder = Channel;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(Timer, Channel);
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	68b8      	ldr	r0, [r7, #8]
 8001438:	f001 ff60 	bl	80032fc <HAL_TIM_Encoder_Start>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <Motor_Set_Duty>:
  * @brief Set duty cycle for PWM
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void Motor_Set_Duty(Motor_Name* Motor,uint8_t duty)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	if(duty > DUTY_MAX)
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <Motor_Set_Duty+0x16>
		duty = DUTY_MAX;
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	70fb      	strb	r3, [r7, #3]
	if(duty <= DUTY_MIN)
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d801      	bhi.n	8001464 <Motor_Set_Duty+0x20>
		duty = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	70fb      	strb	r3, [r7, #3]

	Motor->duty = duty;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	751a      	strb	r2, [r3, #20]
	uint16_t compare = (Motor->Timer_PWM->Init.Period + 1) * duty / 100;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <Motor_Set_Duty+0x90>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <Motor_Set_Duty+0x52>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	89fa      	ldrh	r2, [r7, #14]
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001494:	e018      	b.n	80014c8 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d105      	bne.n	80014aa <Motor_Set_Duty+0x66>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014a8:	e00e      	b.n	80014c8 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d105      	bne.n	80014be <Motor_Set_Duty+0x7a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80014bc:	e004      	b.n	80014c8 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	51eb851f 	.word	0x51eb851f

080014d8 <Motor_Set_Frequency>:
  * @brief Set frequency for PWM
  * @param frequency(Hz); should  2 < f < 10000
  * @retval None
  */
void Motor_Set_Frequency(Motor_Name* Motor, uint32_t frequency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / ((period + 1)*frequency) - 1;
	Motor->frequency = frequency;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	611a      	str	r2, [r3, #16]
	uint32_t period = Motor->Timer_PWM->Init.Period;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	60fb      	str	r3, [r7, #12]
	uint32_t f_timer = HAL_RCC_GetHCLKFreq();
 80014f0:	f001 fc86 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 80014f4:	60b8      	str	r0, [r7, #8]
	TIM2->PSC = f_timer / ((period + 1) * frequency) - 1;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150a:	3b01      	subs	r3, #1
 800150c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <Motor_Get_Speed>:
  * @brief read speed
  * @param
  * @retval None
  */
uint16_t Motor_Get_Speed(Motor_Name* Motor)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	Motor->speed = speed;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <Motor_Get_Speed+0x20>)
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	82da      	strh	r2, [r3, #22]
	return speed;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <Motor_Get_Speed+0x20>)
 800152a:	881b      	ldrh	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000200 	.word	0x20000200

0800153c <HAL_SYSTICK_Callback>:
  * @brief update speed for motor through encoder
  * @param
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
	if(idx == SAMPLING_TIME)	//update speed after every sampling time
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_SYSTICK_Callback+0x50>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2bc8      	cmp	r3, #200	; 0xc8
 8001546:	d119      	bne.n	800157c <HAL_SYSTICK_Callback+0x40>
	{
		pre_counter = __HAL_TIM_GET_COUNTER(Motor.Timer_Encoder);
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_SYSTICK_Callback+0x54>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_SYSTICK_Callback+0x58>)
 8001554:	801a      	strh	r2, [r3, #0]
		speed = caculate_speed(pre_counter, old_counter);
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_SYSTICK_Callback+0x58>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_SYSTICK_Callback+0x5c>)
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f81d 	bl	80015a0 <caculate_speed>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_SYSTICK_Callback+0x60>)
 800156c:	801a      	strh	r2, [r3, #0]
		old_counter = pre_counter;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_SYSTICK_Callback+0x58>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_SYSTICK_Callback+0x5c>)
 8001574:	801a      	strh	r2, [r3, #0]
		idx = 0;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_SYSTICK_Callback+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
	}
	idx++;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_SYSTICK_Callback+0x50>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a02      	ldr	r2, [pc, #8]	; (800158c <HAL_SYSTICK_Callback+0x50>)
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001f8 	.word	0x200001f8
 8001590:	20000348 	.word	0x20000348
 8001594:	200001fc 	.word	0x200001fc
 8001598:	200001fe 	.word	0x200001fe
 800159c:	20000200 	.word	0x20000200

080015a0 <caculate_speed>:

uint16_t caculate_speed(uint16_t pre_counter, uint16_t old_counter)
		{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	80fb      	strh	r3, [r7, #6]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80bb      	strh	r3, [r7, #4]
			if(pre_counter < old_counter)
 80015b0:	88fa      	ldrh	r2, [r7, #6]
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d206      	bcs.n	80015c6 <caculate_speed+0x26>
				pre_counter += Motor.Timer_Encoder->Init.Period;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <caculate_speed+0x4c>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4413      	add	r3, r2
 80015c4:	80fb      	strh	r3, [r7, #6]
			return (pre_counter - old_counter) * (1000 / SAMPLING_TIME) * 60 / 334; 	//number of pulses in one  minutes / 334 = rpm
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <caculate_speed+0x50>)
 80015d6:	fb82 1203 	smull	r1, r2, r2, r3
 80015da:	11d2      	asrs	r2, r2, #7
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b29b      	uxth	r3, r3
		}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000348 	.word	0x20000348
 80015f0:	621b97c3 	.word	0x621b97c3

080015f4 <DELAY_TIM_Init>:
 *      Author: acer
 */
#include "delay_timer.h"

void	DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 fc9f 	bl	8002f40 <HAL_TIM_Base_Start>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <DELAY_TIM_Us>:

void 	DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t us)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 800161e:	bf00      	nop
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3f9      	bcc.n	8001620 <DELAY_TIM_Us+0x16>
//        while (__HAL_TIM_GET_COUNTER(htim) < period);  // wait for the counter to reach the us input in the parameter
//        while (__HAL_TIM_GET_COUNTER(htim) < last_cnt - period);  // wait for the counter to reach the us input in the parameter
//    }
//

}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <DELAY_TIM_Ms>:

void	DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t ms)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
	while(ms--)
 8001644:	e004      	b.n	8001650 <DELAY_TIM_Ms+0x18>
	{
		DELAY_TIM_Us(htim, 1000);
 8001646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffdd 	bl	800160a <DELAY_TIM_Us>
	while(ms--)
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	807a      	strh	r2, [r7, #2]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f5      	bne.n	8001646 <DELAY_TIM_Ms+0xe>
	}
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <TASK1_READ_TEMP>:
DS18B20_Name DS;

/*******************************************TASK*****************************************/

void TASK1_READ_TEMP(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	temp = DS18B20_ReadTemp(&DS);
 8001668:	4808      	ldr	r0, [pc, #32]	; (800168c <TASK1_READ_TEMP+0x28>)
 800166a:	f7ff fdd7 	bl	800121c <DS18B20_ReadTemp>
 800166e:	4603      	mov	r3, r0
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <TASK1_READ_TEMP+0x2c>)
 8001672:	6013      	str	r3, [r2, #0]
	printf("Temperature: %f C\n", temp);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <TASK1_READ_TEMP+0x2c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fed5 	bl	8000428 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <TASK1_READ_TEMP+0x30>)
 8001684:	f003 fa3c 	bl	8004b00 <iprintf>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002f0 	.word	0x200002f0
 8001690:	20000204 	.word	0x20000204
 8001694:	08006fe4 	.word	0x08006fe4

08001698 <TASK2_READ_SPEED>:

void TASK2_READ_SPEED(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	printf("Speed: %d rpm\n", Motor_Get_Speed(&Motor));
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <TASK2_READ_SPEED+0x18>)
 800169e:	f7ff ff3b 	bl	8001518 <Motor_Get_Speed>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <TASK2_READ_SPEED+0x1c>)
 80016a8:	f003 fa2a 	bl	8004b00 <iprintf>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000348 	.word	0x20000348
 80016b4:	08006ff8 	.word	0x08006ff8

080016b8 <TASK3_SET_MOTOR>:

void TASK3_SET_MOTOR(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	if(Motor.mode == MODE_MOTOR_TEMP)
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <TASK3_SET_MOTOR+0x2c>)
 80016be:	7e1b      	ldrb	r3, [r3, #24]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d10d      	bne.n	80016e0 <TASK3_SET_MOTOR+0x28>
	{
		Motor_Set_Duty(&Motor, (uint8_t)temp);
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <TASK3_SET_MOTOR+0x30>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc3b 	bl	8000f44 <__aeabi_f2uiz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <TASK3_SET_MOTOR+0x2c>)
 80016d6:	f7ff feb5 	bl	8001444 <Motor_Set_Duty>
		printf("Set speed Motor\n");
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <TASK3_SET_MOTOR+0x34>)
 80016dc:	f003 fa96 	bl	8004c0c <puts>
	}
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000348 	.word	0x20000348
 80016e8:	20000204 	.word	0x20000204
 80016ec:	08007008 	.word	0x08007008

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b096      	sub	sp, #88	; 0x58
 80016f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t i = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	void (*Task_point_array[11]) (void) = {TASK3_SET_MOTOR, TASK2_READ_SPEED, TASK1_READ_TEMP, TASK2_READ_SPEED, TASK3_SET_MOTOR, TASK2_READ_SPEED, TASK1_READ_TEMP, TASK3_SET_MOTOR, TASK2_READ_SPEED, TASK2_READ_SPEED, TASK3_SET_MOTOR};
 80016fc:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <main+0xfc>)
 80016fe:	f107 041c 	add.w	r4, r7, #28
 8001702:	461d      	mov	r5, r3
 8001704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//uint16_t tk[11] = {50, 100, 200, 400, 402, 500, 600, 800, 804, 900, 920};
	uint16_t tk[11] = {50, 100, 200, 420, 430, 500, 600, 820, 830, 900, 920};
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <main+0x100>)
 8001716:	1d3c      	adds	r4, r7, #4
 8001718:	461d      	mov	r5, r3
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001722:	6020      	str	r0, [r4, #0]
 8001724:	3404      	adds	r4, #4
 8001726:	8021      	strh	r1, [r4, #0]
	uint16_t P = 1000;
 8001728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t n = 11;
 8001730:	230b      	movs	r3, #11
 8001732:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001736:	f000 fc99 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173a:	f000 f86d 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173e:	f000 f9d5 	bl	8001aec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001742:	f000 f9a9 	bl	8001a98 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001746:	f000 f8ad 	bl	80018a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800174a:	f000 f903 	bl	8001954 <MX_TIM3_Init>
  MX_TIM4_Init();
 800174e:	f000 f955 	bl	80019fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Menu_Print(&huart1, period_array, &Motor);
 8001752:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <main+0x104>)
 8001754:	4928      	ldr	r1, [pc, #160]	; (80017f8 <main+0x108>)
 8001756:	4829      	ldr	r0, [pc, #164]	; (80017fc <main+0x10c>)
 8001758:	f7ff fda8 	bl	80012ac <Menu_Print>
  DS18B20_Init(&DS, &htim4, DS18b20_GPIO_Port , DS18b20_Pin);
 800175c:	2302      	movs	r3, #2
 800175e:	4a28      	ldr	r2, [pc, #160]	; (8001800 <main+0x110>)
 8001760:	4928      	ldr	r1, [pc, #160]	; (8001804 <main+0x114>)
 8001762:	4829      	ldr	r0, [pc, #164]	; (8001808 <main+0x118>)
 8001764:	f7ff fd43 	bl	80011ee <DS18B20_Init>
  Motor_Init_PWM(&Motor, &htim2, TIM_CHANNEL_4, 2000, Motor.duty);
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <main+0x104>)
 800176a:	7d1b      	ldrb	r3, [r3, #20]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001772:	220c      	movs	r2, #12
 8001774:	4925      	ldr	r1, [pc, #148]	; (800180c <main+0x11c>)
 8001776:	481f      	ldr	r0, [pc, #124]	; (80017f4 <main+0x104>)
 8001778:	f7ff fe32 	bl	80013e0 <Motor_Init_PWM>
  Motor_Init_Encoder(&Motor, &htim3, TIM_CHANNEL_1);
 800177c:	2200      	movs	r2, #0
 800177e:	4924      	ldr	r1, [pc, #144]	; (8001810 <main+0x120>)
 8001780:	481c      	ldr	r0, [pc, #112]	; (80017f4 <main+0x104>)
 8001782:	f7ff fe4b 	bl	800141c <Motor_Init_Encoder>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((uwTick%P) == tk[i%n])
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <main+0x124>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800178e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001792:	fb02 f201 	mul.w	r2, r2, r1
 8001796:	1a99      	subs	r1, r3, r2
 8001798:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800179c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80017a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80017a4:	fb02 f200 	mul.w	r2, r2, r0
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80017b2:	4413      	add	r3, r2
 80017b4:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 80017b8:	4299      	cmp	r1, r3
 80017ba:	d1e4      	bne.n	8001786 <main+0x96>
	  {
		  Task_point_array[i%n]();
 80017bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017c0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80017c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80017c8:	fb02 f201 	mul.w	r2, r2, r1
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80017d6:	4413      	add	r3, r2
 80017d8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80017dc:	4798      	blx	r3
		  i++;
 80017de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017e2:	3301      	adds	r3, #1
 80017e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  if((uwTick%P) == tk[i%n])
 80017e8:	e7cd      	b.n	8001786 <main+0x96>
 80017ea:	bf00      	nop
 80017ec:	08007018 	.word	0x08007018
 80017f0:	08007044 	.word	0x08007044
 80017f4:	20000348 	.word	0x20000348
 80017f8:	2000025c 	.word	0x2000025c
 80017fc:	200002ac 	.word	0x200002ac
 8001800:	40010c00 	.word	0x40010c00
 8001804:	20000214 	.word	0x20000214
 8001808:	200002f0 	.word	0x200002f0
 800180c:	20000300 	.word	0x20000300
 8001810:	20000264 	.word	0x20000264
 8001814:	20000364 	.word	0x20000364

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	; 0x40
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	2228      	movs	r2, #40	; 0x28
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fd02 	bl	8004230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184c:	2302      	movs	r3, #2
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001856:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	4618      	mov	r0, r3
 8001862:	f000 ff03 	bl	800266c <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800186c:	f000 f9bc 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2302      	movs	r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2102      	movs	r1, #2
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f96e 	bl	8002b6c <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001896:	f000 f9a7 	bl	8001be8 <Error_Handler>
  }
}
 800189a:	bf00      	nop
 800189c:	3740      	adds	r7, #64	; 0x40
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_TIM2_Init+0xac>)
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_TIM2_Init+0xac>)
 80018d0:	2208      	movs	r2, #8
 80018d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MX_TIM2_Init+0xac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_TIM2_Init+0xac>)
 80018dc:	2263      	movs	r2, #99	; 0x63
 80018de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_TIM2_Init+0xac>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_TIM2_Init+0xac>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ec:	4818      	ldr	r0, [pc, #96]	; (8001950 <MX_TIM2_Init+0xac>)
 80018ee:	f001 fb71 	bl	8002fd4 <HAL_TIM_PWM_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80018f8:	f000 f976 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4619      	mov	r1, r3
 800190a:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_TIM2_Init+0xac>)
 800190c:	f002 f9aa 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001916:	f000 f967 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191a:	2360      	movs	r3, #96	; 0x60
 800191c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	220c      	movs	r2, #12
 800192e:	4619      	mov	r1, r3
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM2_Init+0xac>)
 8001932:	f001 fd71 	bl	8003418 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800193c:	f000 f954 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM2_Init+0xac>)
 8001942:	f000 fa01 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000300 	.word	0x20000300

08001954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	2224      	movs	r2, #36	; 0x24
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fc64 	bl	8004230 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <MX_TIM3_Init+0xa0>)
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <MX_TIM3_Init+0xa4>)
 8001974:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_TIM3_Init+0xa0>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_TIM3_Init+0xa0>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_TIM3_Init+0xa0>)
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_TIM3_Init+0xa0>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MX_TIM3_Init+0xa0>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800199a:	2302      	movs	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800199e:	2301      	movs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80019aa:	2302      	movs	r3, #2
 80019ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ae:	2301      	movs	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <MX_TIM3_Init+0xa0>)
 80019c2:	f001 fbf9 	bl	80031b8 <HAL_TIM_Encoder_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019cc:	f000 f90c 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_TIM3_Init+0xa0>)
 80019de:	f002 f941 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80019e8:	f000 f8fe 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3730      	adds	r7, #48	; 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000264 	.word	0x20000264
 80019f8:	40000400 	.word	0x40000400

080019fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <MX_TIM4_Init+0x98>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a20:	2247      	movs	r2, #71	; 0x47
 8001a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a3e:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a40:	f001 fa2e 	bl	8002ea0 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f000 f8cd 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a5c:	f001 fd9a 	bl	8003594 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f000 f8bf 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_TIM4_Init+0x94>)
 8001a78:	f002 f8f4 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a82:	f000 f8b1 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000214 	.word	0x20000214
 8001a94:	40000800 	.word	0x40000800

08001a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <MX_USART1_UART_Init+0x50>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	f002 f926 	bl	8003d20 <HAL_UART_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ada:	f000 f885 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002ac 	.word	0x200002ac
 8001ae8:	40013800 	.word	0x40013800

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_GPIO_Init+0xcc>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	4815      	ldr	r0, [pc, #84]	; (8001bbc <MX_GPIO_Init+0xd0>)
 8001b68:	f000 fd67 	bl	800263a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18b20_GPIO_Port, DS18b20_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <MX_GPIO_Init+0xd4>)
 8001b72:	f000 fd62 	bl	800263a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480b      	ldr	r0, [pc, #44]	; (8001bbc <MX_GPIO_Init+0xd0>)
 8001b90:	f000 fbb8 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18b20_Pin */
  GPIO_InitStruct.Pin = DS18b20_Pin;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18b20_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_GPIO_Init+0xd4>)
 8001bac:	f000 fbaa 	bl	8002304 <HAL_GPIO_Init>

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	40010c00 	.word	0x40010c00

08001bc4 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, 500);
 8001bcc:	1d39      	adds	r1, r7, #4
 8001bce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <__io_putchar+0x20>)
 8001bd6:	f002 f8f0 	bl	8003dba <HAL_UART_Transmit>

	return ch;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200002ac 	.word	0x200002ac

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <Error_Handler+0x8>
	...

08001bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_MspInit+0x5c>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_MspInit+0x5c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_MspInit+0x5c>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_MspInit+0x5c>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_MspInit+0x5c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_MspInit+0x5c>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_MspInit+0x60>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_MspInit+0x60>)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010000 	.word	0x40010000

08001c58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c68:	d10b      	bne.n	8001c82 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_TIM_PWM_MspInit+0x34>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_TIM_PWM_MspInit+0x34>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_TIM_PWM_MspInit+0x34>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x70>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d123      	bne.n	8001cf8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	61d3      	str	r3, [r2, #28]
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TI1_Encoder_Pin|TI2_Encoder_Pin;
 8001ce0:	23c0      	movs	r3, #192	; 0xc0
 8001ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x78>)
 8001cf4:	f000 fb06 	bl	8002304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010800 	.word	0x40010800

08001d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_TIM_Base_MspInit+0x34>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10b      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_TIM_Base_MspInit+0x38>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_TIM_Base_MspInit+0x38>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_TIM_Base_MspInit+0x38>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40000800 	.word	0x40000800
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d66:	d117      	bne.n	8001d98 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_TIM_MspPostInit+0x58>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_TIM_MspPostInit+0x58>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_MspPostInit+0x58>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001d80:	2308      	movs	r3, #8
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	4804      	ldr	r0, [pc, #16]	; (8001da4 <HAL_TIM_MspPostInit+0x5c>)
 8001d94:	f000 fab6 	bl	8002304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010800 	.word	0x40010800

08001da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_UART_MspInit+0x8c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d131      	bne.n	8001e2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_UART_MspInit+0x90>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_UART_MspInit+0x90>)
 8001dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_UART_MspInit+0x90>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_UART_MspInit+0x90>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_UART_MspInit+0x90>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_UART_MspInit+0x90>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480b      	ldr	r0, [pc, #44]	; (8001e3c <HAL_UART_MspInit+0x94>)
 8001e0e:	f000 fa79 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <HAL_UART_MspInit+0x94>)
 8001e28:	f000 fa6c 	bl	8002304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010800 	.word	0x40010800

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e86:	f000 f937 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001e8a:	f000 fa34 	bl	80022f6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
	return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_kill>:

int _kill(int pid, int sig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eaa:	f002 f997 	bl	80041dc <__errno>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2216      	movs	r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffe7 	bl	8001ea0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed2:	e7fe      	b.n	8001ed2 <_exit+0x12>

08001ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e00a      	b.n	8001efc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ee6:	f3af 8000 	nop.w
 8001eea:	4601      	mov	r1, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbf0      	blt.n	8001ee6 <_read+0x12>
	}

return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e009      	b.n	8001f34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe4b 	bl	8001bc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf1      	blt.n	8001f20 <_write+0x12>
	}
	return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_close>:

int _close(int file)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
	return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f002 f900 	bl	80041dc <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20005000 	.word	0x20005000
 8002008:	00000400 	.word	0x00000400
 800200c:	20000208 	.word	0x20000208
 8002010:	20000378 	.word	0x20000378

08002014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <Reset_Handler>:
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <LoopFillZerobss+0x12>)
 8002022:	490d      	ldr	r1, [pc, #52]	; (8002058 <LoopFillZerobss+0x16>)
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <LoopFillZerobss+0x1a>)
 8002026:	2300      	movs	r3, #0
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:
 800202a:	58d4      	ldr	r4, [r2, r3]
 800202c:	50c4      	str	r4, [r0, r3]
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:
 8002030:	18c4      	adds	r4, r0, r3
 8002032:	428c      	cmp	r4, r1
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <LoopFillZerobss+0x1e>)
 8002038:	4c0a      	ldr	r4, [pc, #40]	; (8002064 <LoopFillZerobss+0x22>)
 800203a:	2300      	movs	r3, #0
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:
 8002042:	42a2      	cmp	r2, r4
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>
 8002046:	f7ff ffe5 	bl	8002014 <SystemInit>
 800204a:	f002 f8cd 	bl	80041e8 <__libc_init_array>
 800204e:	f7ff fb4f 	bl	80016f0 <main>
 8002052:	4770      	bx	lr
 8002054:	20000000 	.word	0x20000000
 8002058:	200001dc 	.word	0x200001dc
 800205c:	08007474 	.word	0x08007474
 8002060:	200001dc 	.word	0x200001dc
 8002064:	20000378 	.word	0x20000378

08002068 <ADC1_2_IRQHandler>:
 8002068:	e7fe      	b.n	8002068 <ADC1_2_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x28>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x28>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f907 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fdb4 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x54>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f911 	bl	80022de <HAL_SYSTICK_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00e      	b.n	80020e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d80a      	bhi.n	80020e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f000 f8e7 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_InitTick+0x5c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_IncTick+0x20>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000008 	.word	0x20000008
 8002118:	20000364 	.word	0x20000364

0800211c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000364 	.word	0x20000364

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff90 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff49 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff5e 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff90 	bl	80021e8 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5f 	bl	8002194 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffb0 	bl	800224c <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80022fa:	f7ff f91f 	bl	800153c <HAL_SYSTICK_Callback>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b08b      	sub	sp, #44	; 0x2c
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	e169      	b.n	80025ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002318:	2201      	movs	r2, #1
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 8158 	bne.w	80025e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a9a      	ldr	r2, [pc, #616]	; (80025a4 <HAL_GPIO_Init+0x2a0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d05e      	beq.n	80023fe <HAL_GPIO_Init+0xfa>
 8002340:	4a98      	ldr	r2, [pc, #608]	; (80025a4 <HAL_GPIO_Init+0x2a0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d875      	bhi.n	8002432 <HAL_GPIO_Init+0x12e>
 8002346:	4a98      	ldr	r2, [pc, #608]	; (80025a8 <HAL_GPIO_Init+0x2a4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d058      	beq.n	80023fe <HAL_GPIO_Init+0xfa>
 800234c:	4a96      	ldr	r2, [pc, #600]	; (80025a8 <HAL_GPIO_Init+0x2a4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d86f      	bhi.n	8002432 <HAL_GPIO_Init+0x12e>
 8002352:	4a96      	ldr	r2, [pc, #600]	; (80025ac <HAL_GPIO_Init+0x2a8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d052      	beq.n	80023fe <HAL_GPIO_Init+0xfa>
 8002358:	4a94      	ldr	r2, [pc, #592]	; (80025ac <HAL_GPIO_Init+0x2a8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d869      	bhi.n	8002432 <HAL_GPIO_Init+0x12e>
 800235e:	4a94      	ldr	r2, [pc, #592]	; (80025b0 <HAL_GPIO_Init+0x2ac>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d04c      	beq.n	80023fe <HAL_GPIO_Init+0xfa>
 8002364:	4a92      	ldr	r2, [pc, #584]	; (80025b0 <HAL_GPIO_Init+0x2ac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d863      	bhi.n	8002432 <HAL_GPIO_Init+0x12e>
 800236a:	4a92      	ldr	r2, [pc, #584]	; (80025b4 <HAL_GPIO_Init+0x2b0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d046      	beq.n	80023fe <HAL_GPIO_Init+0xfa>
 8002370:	4a90      	ldr	r2, [pc, #576]	; (80025b4 <HAL_GPIO_Init+0x2b0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d85d      	bhi.n	8002432 <HAL_GPIO_Init+0x12e>
 8002376:	2b12      	cmp	r3, #18
 8002378:	d82a      	bhi.n	80023d0 <HAL_GPIO_Init+0xcc>
 800237a:	2b12      	cmp	r3, #18
 800237c:	d859      	bhi.n	8002432 <HAL_GPIO_Init+0x12e>
 800237e:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <HAL_GPIO_Init+0x80>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	080023ff 	.word	0x080023ff
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080023eb 	.word	0x080023eb
 8002390:	0800242d 	.word	0x0800242d
 8002394:	08002433 	.word	0x08002433
 8002398:	08002433 	.word	0x08002433
 800239c:	08002433 	.word	0x08002433
 80023a0:	08002433 	.word	0x08002433
 80023a4:	08002433 	.word	0x08002433
 80023a8:	08002433 	.word	0x08002433
 80023ac:	08002433 	.word	0x08002433
 80023b0:	08002433 	.word	0x08002433
 80023b4:	08002433 	.word	0x08002433
 80023b8:	08002433 	.word	0x08002433
 80023bc:	08002433 	.word	0x08002433
 80023c0:	08002433 	.word	0x08002433
 80023c4:	08002433 	.word	0x08002433
 80023c8:	080023e1 	.word	0x080023e1
 80023cc:	080023f5 	.word	0x080023f5
 80023d0:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_GPIO_Init+0x2b4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023d6:	e02c      	b.n	8002432 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e029      	b.n	8002434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	3304      	adds	r3, #4
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e024      	b.n	8002434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	3308      	adds	r3, #8
 80023f0:	623b      	str	r3, [r7, #32]
          break;
 80023f2:	e01f      	b.n	8002434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	330c      	adds	r3, #12
 80023fa:	623b      	str	r3, [r7, #32]
          break;
 80023fc:	e01a      	b.n	8002434 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002406:	2304      	movs	r3, #4
 8002408:	623b      	str	r3, [r7, #32]
          break;
 800240a:	e013      	b.n	8002434 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002414:	2308      	movs	r3, #8
 8002416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	611a      	str	r2, [r3, #16]
          break;
 800241e:	e009      	b.n	8002434 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002420:	2308      	movs	r3, #8
 8002422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	615a      	str	r2, [r3, #20]
          break;
 800242a:	e003      	b.n	8002434 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
          break;
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x130>
          break;
 8002432:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	d801      	bhi.n	800243e <HAL_GPIO_Init+0x13a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	e001      	b.n	8002442 <HAL_GPIO_Init+0x13e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d802      	bhi.n	8002450 <HAL_GPIO_Init+0x14c>
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	e002      	b.n	8002456 <HAL_GPIO_Init+0x152>
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3b08      	subs	r3, #8
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	210f      	movs	r1, #15
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	6a39      	ldr	r1, [r7, #32]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	431a      	orrs	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80b1 	beq.w	80025e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x2b8>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_GPIO_Init+0x2b8>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_GPIO_Init+0x2b8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800249c:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_GPIO_Init+0x2bc>)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <HAL_GPIO_Init+0x2c0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x1ec>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3f      	ldr	r2, [pc, #252]	; (80025c8 <HAL_GPIO_Init+0x2c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x1e8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3e      	ldr	r2, [pc, #248]	; (80025cc <HAL_GPIO_Init+0x2c8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x1e4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <HAL_GPIO_Init+0x2cc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x1e0>
 80024e0:	2303      	movs	r3, #3
 80024e2:	e006      	b.n	80024f2 <HAL_GPIO_Init+0x1ee>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e004      	b.n	80024f2 <HAL_GPIO_Init+0x1ee>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x1ee>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_GPIO_Init+0x1ee>
 80024f0:	2300      	movs	r3, #0
 80024f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002502:	492f      	ldr	r1, [pc, #188]	; (80025c0 <HAL_GPIO_Init+0x2bc>)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	492c      	ldr	r1, [pc, #176]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	43db      	mvns	r3, r3
 8002532:	4928      	ldr	r1, [pc, #160]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002534:	4013      	ands	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4922      	ldr	r1, [pc, #136]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	43db      	mvns	r3, r3
 800255a:	491e      	ldr	r1, [pc, #120]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800255c:	4013      	ands	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	4914      	ldr	r1, [pc, #80]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002584:	4013      	ands	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d021      	beq.n	80025d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	490e      	ldr	r1, [pc, #56]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
 80025a0:	e021      	b.n	80025e6 <HAL_GPIO_Init+0x2e2>
 80025a2:	bf00      	nop
 80025a4:	10320000 	.word	0x10320000
 80025a8:	10310000 	.word	0x10310000
 80025ac:	10220000 	.word	0x10220000
 80025b0:	10210000 	.word	0x10210000
 80025b4:	10120000 	.word	0x10120000
 80025b8:	10110000 	.word	0x10110000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40010800 	.word	0x40010800
 80025c8:	40010c00 	.word	0x40010c00
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40011400 	.word	0x40011400
 80025d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	43db      	mvns	r3, r3
 80025e0:	4909      	ldr	r1, [pc, #36]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f ae8e 	bne.w	8002318 <HAL_GPIO_Init+0x14>
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	372c      	adds	r7, #44	; 0x2c
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e001      	b.n	800262e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	807b      	strh	r3, [r7, #2]
 8002646:	4613      	mov	r3, r2
 8002648:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800264a:	787b      	ldrb	r3, [r7, #1]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002650:	887a      	ldrh	r2, [r7, #2]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002656:	e003      	b.n	8002660 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	041a      	lsls	r2, r3, #16
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	611a      	str	r2, [r3, #16]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e26c      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8087 	beq.w	800279a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800268c:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002698:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d112      	bne.n	80026ca <HAL_RCC_OscConfig+0x5e>
 80026a4:	4b8c      	ldr	r3, [pc, #560]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d10b      	bne.n	80026ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d06c      	beq.n	8002798 <HAL_RCC_OscConfig+0x12c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d168      	bne.n	8002798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e246      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x76>
 80026d4:	4b80      	ldr	r3, [pc, #512]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a7f      	ldr	r2, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e02e      	b.n	8002740 <HAL_RCC_OscConfig+0xd4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x98>
 80026ea:	4b7b      	ldr	r3, [pc, #492]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7a      	ldr	r2, [pc, #488]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b78      	ldr	r3, [pc, #480]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a77      	ldr	r2, [pc, #476]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xd4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0xbc>
 800270e:	4b72      	ldr	r3, [pc, #456]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6e      	ldr	r2, [pc, #440]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xd4>
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6a      	ldr	r2, [pc, #424]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a67      	ldr	r2, [pc, #412]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff fce8 	bl	800211c <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff fce4 	bl	800211c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1fa      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xe4>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff fcd4 	bl	800211c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fcd0 	bl	800211c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1e6      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x10c>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d063      	beq.n	800286e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a6:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d11c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x18c>
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x176>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1ba      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4939      	ldr	r1, [pc, #228]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	e03a      	b.n	800286e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_RCC_OscConfig+0x270>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff fc89 	bl	800211c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280e:	f7ff fc85 	bl	800211c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e19b      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4927      	ldr	r1, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
 8002840:	e015      	b.n	800286e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_RCC_OscConfig+0x270>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fc68 	bl	800211c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002850:	f7ff fc64 	bl	800211c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e17a      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03a      	beq.n	80028f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d019      	beq.n	80028b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_RCC_OscConfig+0x274>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7ff fc48 	bl	800211c <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002890:	f7ff fc44 	bl	800211c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e15a      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ae:	2001      	movs	r0, #1
 80028b0:	f000 fad8 	bl	8002e64 <RCC_Delay>
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_OscConfig+0x274>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7ff fc2e 	bl	800211c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c4:	f7ff fc2a 	bl	800211c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d908      	bls.n	80028e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e140      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	42420000 	.word	0x42420000
 80028e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	4b9e      	ldr	r3, [pc, #632]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e9      	bne.n	80028c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a6 	beq.w	8002a4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002902:	4b97      	ldr	r3, [pc, #604]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b94      	ldr	r3, [pc, #592]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4a93      	ldr	r2, [pc, #588]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	61d3      	str	r3, [r2, #28]
 800291a:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b8e      	ldr	r3, [pc, #568]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d118      	bne.n	8002968 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002936:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7ff fbeb 	bl	800211c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294a:	f7ff fbe7 	bl	800211c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	; 0x64
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0fd      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x312>
 8002970:	4b7b      	ldr	r3, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a7a      	ldr	r2, [pc, #488]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	e02d      	b.n	80029da <HAL_RCC_OscConfig+0x36e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x334>
 8002986:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	f023 0304 	bic.w	r3, r3, #4
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	e01c      	b.n	80029da <HAL_RCC_OscConfig+0x36e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x356>
 80029a8:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a6c      	ldr	r2, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0x36e>
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a66      	ldr	r2, [pc, #408]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6213      	str	r3, [r2, #32]
 80029ce:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a63      	ldr	r2, [pc, #396]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fb9b 	bl	800211c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff fb97 	bl	800211c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0ab      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCC_OscConfig+0x37e>
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7ff fb85 	bl	800211c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7ff fb81 	bl	800211c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e095      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4a47      	ldr	r2, [pc, #284]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8081 	beq.w	8002b56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a54:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d061      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d146      	bne.n	8002af6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fb55 	bl	800211c <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff fb51 	bl	800211c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e067      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	492d      	ldr	r1, [pc, #180]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a19      	ldr	r1, [r3, #32]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	4927      	ldr	r1, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7ff fb25 	bl	800211c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7ff fb21 	bl	800211c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e037      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x46a>
 8002af4:	e02f      	b.n	8002b56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff fb0e 	bl	800211c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7ff fb0a 	bl	800211c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e020      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x498>
 8002b22:	e018      	b.n	8002b56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e013      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	42420060 	.word	0x42420060

08002b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d0      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4965      	ldr	r1, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d040      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e073      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4936      	ldr	r1, [pc, #216]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7ff fa5e 	bl	800211c <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7ff fa5a 	bl	800211c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e053      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d210      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1cc>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1d0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f9bc 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	0800706c 	.word	0x0800706c
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000004 	.word	0x20000004

08002d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b490      	push	{r4, r7}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d46:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d48:	1d3c      	adds	r4, r7, #4
 8002d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d50:	f240 2301 	movw	r3, #513	; 0x201
 8002d54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x40>
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x46>
 8002d7e:	e02d      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d82:	623b      	str	r3, [r7, #32]
      break;
 8002d84:	e02d      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	0c9b      	lsrs	r3, r3, #18
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d92:	4413      	add	r3, r2
 8002d94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0c5b      	lsrs	r3, r3, #17
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db2:	4413      	add	r3, r2
 8002db4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002db8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dbe:	fb02 f203 	mul.w	r2, r2, r3
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e004      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	623b      	str	r3, [r7, #32]
      break;
 8002dda:	e002      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dde:	623b      	str	r3, [r7, #32]
      break;
 8002de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de2:	6a3b      	ldr	r3, [r7, #32]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc90      	pop	{r4, r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	0800705c 	.word	0x0800705c
 8002df4:	40021000 	.word	0x40021000
 8002df8:	007a1200 	.word	0x007a1200
 8002dfc:	003d0900 	.word	0x003d0900

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	20000000 	.word	0x20000000

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e18:	f7ff fff2 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	0800707c 	.word	0x0800707c

08002e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e40:	f7ff ffde 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	0adb      	lsrs	r3, r3, #11
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	0800707c 	.word	0x0800707c

08002e64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <RCC_Delay+0x34>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <RCC_Delay+0x38>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	0a5b      	lsrs	r3, r3, #9
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e80:	bf00      	nop
  }
  while (Delay --);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1e5a      	subs	r2, r3, #1
 8002e86:	60fa      	str	r2, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f9      	bne.n	8002e80 <RCC_Delay+0x1c>
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	10624dd3 	.word	0x10624dd3

08002ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e041      	b.n	8002f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe ff20 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f000 fc1c 	bl	800371c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d001      	beq.n	8002f58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e032      	b.n	8002fbe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_TIM_Base_Start+0x88>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_Base_Start+0x48>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_Base_Start+0x48>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_TIM_Base_Start+0x8c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_Base_Start+0x48>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_TIM_Base_Start+0x90>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d010      	beq.n	8002fbc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	e007      	b.n	8002fbc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e041      	b.n	800306a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe fe2c 	bl	8001c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f000 fb82 	bl	800371c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start+0x24>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e022      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d109      	bne.n	80030b2 <HAL_TIM_PWM_Start+0x3e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e015      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x58>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e008      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e05e      	b.n	80031a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0x82>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	e013      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start+0x92>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003104:	e00b      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start+0xa2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	e003      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd78 	bl	8003c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_TIM_PWM_Start+0x138>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d107      	bne.n	8003146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_TIM_PWM_Start+0x138>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIM_PWM_Start+0xfa>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d009      	beq.n	800316e <HAL_TIM_PWM_Start+0xfa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_TIM_PWM_Start+0x13c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIM_PWM_Start+0xfa>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <HAL_TIM_PWM_Start+0x140>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d111      	bne.n	8003192 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d010      	beq.n	80031a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	e007      	b.n	80031a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800

080031b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e093      	b.n	80032f4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fe fd55 	bl	8001c90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031fc:	f023 0307 	bic.w	r3, r3, #7
 8003200:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f000 fa85 	bl	800371c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	4313      	orrs	r3, r2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003258:	f023 030c 	bic.w	r3, r3, #12
 800325c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4313      	orrs	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	011a      	lsls	r2, r3, #4
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	031b      	lsls	r3, r3, #12
 8003288:	4313      	orrs	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4313      	orrs	r3, r2
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800330c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003314:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800331c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003324:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d110      	bne.n	800334e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d102      	bne.n	8003338 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003332:	7b7b      	ldrb	r3, [r7, #13]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d001      	beq.n	800333c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e069      	b.n	8003410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334c:	e031      	b.n	80033b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d110      	bne.n	8003376 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800335a:	7b3b      	ldrb	r3, [r7, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d001      	beq.n	8003364 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e055      	b.n	8003410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	e01d      	b.n	80033b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d108      	bne.n	800338e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800337c:	7bbb      	ldrb	r3, [r7, #14]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003382:	7b7b      	ldrb	r3, [r7, #13]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d102      	bne.n	800338e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003388:	7b3b      	ldrb	r3, [r7, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d001      	beq.n	8003392 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03e      	b.n	8003410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_TIM_Encoder_Start+0xc4>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d008      	beq.n	80033d0 <HAL_TIM_Encoder_Start+0xd4>
 80033be:	e00f      	b.n	80033e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2201      	movs	r2, #1
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fc27 	bl	8003c1c <TIM_CCxChannelCmd>
      break;
 80033ce:	e016      	b.n	80033fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	2104      	movs	r1, #4
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fc1f 	bl	8003c1c <TIM_CCxChannelCmd>
      break;
 80033de:	e00e      	b.n	80033fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc17 	bl	8003c1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	2104      	movs	r1, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fc10 	bl	8003c1c <TIM_CCxChannelCmd>
      break;
 80033fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800342e:	2302      	movs	r3, #2
 8003430:	e0ac      	b.n	800358c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b0c      	cmp	r3, #12
 800343e:	f200 809f 	bhi.w	8003580 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800347d 	.word	0x0800347d
 800344c:	08003581 	.word	0x08003581
 8003450:	08003581 	.word	0x08003581
 8003454:	08003581 	.word	0x08003581
 8003458:	080034bd 	.word	0x080034bd
 800345c:	08003581 	.word	0x08003581
 8003460:	08003581 	.word	0x08003581
 8003464:	08003581 	.word	0x08003581
 8003468:	080034ff 	.word	0x080034ff
 800346c:	08003581 	.word	0x08003581
 8003470:	08003581 	.word	0x08003581
 8003474:	08003581 	.word	0x08003581
 8003478:	0800353f 	.word	0x0800353f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f9ac 	bl	80037e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0208 	orr.w	r2, r2, #8
 8003496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6999      	ldr	r1, [r3, #24]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	619a      	str	r2, [r3, #24]
      break;
 80034ba:	e062      	b.n	8003582 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f9f2 	bl	80038ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6999      	ldr	r1, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	021a      	lsls	r2, r3, #8
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	619a      	str	r2, [r3, #24]
      break;
 80034fc:	e041      	b.n	8003582 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fa3b 	bl	8003980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0204 	bic.w	r2, r2, #4
 8003528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69d9      	ldr	r1, [r3, #28]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	61da      	str	r2, [r3, #28]
      break;
 800353c:	e021      	b.n	8003582 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa85 	bl	8003a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69d9      	ldr	r1, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	021a      	lsls	r2, r3, #8
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
      break;
 800357e:	e000      	b.n	8003582 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_ConfigClockSource+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0b3      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x180>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d03e      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0xd0>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	f200 8087 	bhi.w	80036fc <HAL_TIM_ConfigClockSource+0x168>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	f000 8085 	beq.w	8003700 <HAL_TIM_ConfigClockSource+0x16c>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d87f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 80035fc:	2b70      	cmp	r3, #112	; 0x70
 80035fe:	d01a      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xa2>
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d87b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d050      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x116>
 8003608:	2b60      	cmp	r3, #96	; 0x60
 800360a:	d877      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 800360c:	2b50      	cmp	r3, #80	; 0x50
 800360e:	d03c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0xf6>
 8003610:	2b50      	cmp	r3, #80	; 0x50
 8003612:	d873      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d058      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x136>
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d86f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 800361c:	2b30      	cmp	r3, #48	; 0x30
 800361e:	d064      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x156>
 8003620:	2b30      	cmp	r3, #48	; 0x30
 8003622:	d86b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 8003624:	2b20      	cmp	r3, #32
 8003626:	d060      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x156>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d867      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x156>
 8003630:	2b10      	cmp	r3, #16
 8003632:	d05a      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003634:	e062      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f000 faca 	bl	8003bde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003658:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	609a      	str	r2, [r3, #8]
      break;
 8003662:	e04e      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f000 fab3 	bl	8003bde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003686:	609a      	str	r2, [r3, #8]
      break;
 8003688:	e03b      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	461a      	mov	r2, r3
 8003698:	f000 fa2a 	bl	8003af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2150      	movs	r1, #80	; 0x50
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fa81 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 80036a8:	e02b      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f000 fa48 	bl	8003b4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2160      	movs	r1, #96	; 0x60
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fa71 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 80036c8:	e01b      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f000 fa0a 	bl	8003af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2140      	movs	r1, #64	; 0x40
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fa61 	bl	8003baa <TIM_ITRx_SetConfig>
      break;
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 fa58 	bl	8003baa <TIM_ITRx_SetConfig>
        break;
 80036fa:	e002      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003700:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <TIM_Base_SetConfig+0xb8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d007      	beq.n	800374c <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <TIM_Base_SetConfig+0xbc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0x30>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a25      	ldr	r2, [pc, #148]	; (80037dc <TIM_Base_SetConfig+0xc0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d108      	bne.n	800375e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <TIM_Base_SetConfig+0xb8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d007      	beq.n	800377e <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <TIM_Base_SetConfig+0xbc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_Base_SetConfig+0x62>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <TIM_Base_SetConfig+0xc0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d108      	bne.n	8003790 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <TIM_Base_SetConfig+0xb8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d103      	bne.n	80037c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	615a      	str	r2, [r3, #20]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800

080037e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 0302 	bic.w	r3, r3, #2
 8003828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <TIM_OC1_SetConfig+0xc8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d10c      	bne.n	8003856 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0308 	bic.w	r3, r3, #8
 8003842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <TIM_OC1_SetConfig+0xc8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d111      	bne.n	8003882 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800386c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40012c00 	.word	0x40012c00

080038ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0210 	bic.w	r2, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0320 	bic.w	r3, r3, #32
 80038f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <TIM_OC2_SetConfig+0xd0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10d      	bne.n	8003928 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a14      	ldr	r2, [pc, #80]	; (800397c <TIM_OC2_SetConfig+0xd0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d113      	bne.n	8003958 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40012c00 	.word	0x40012c00

08003980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <TIM_OC3_SetConfig+0xd0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10d      	bne.n	80039fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <TIM_OC3_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d113      	bne.n	8003a2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	621a      	str	r2, [r3, #32]
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40012c00 	.word	0x40012c00

08003a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <TIM_OC4_SetConfig+0x98>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d109      	bne.n	8003ac8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	019b      	lsls	r3, r3, #6
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00

08003af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 030a 	bic.w	r3, r3, #10
 8003b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 0210 	bic.w	r2, r3, #16
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	031b      	lsls	r3, r3, #12
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f043 0307 	orr.w	r3, r3, #7
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b087      	sub	sp, #28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	609a      	str	r2, [r3, #8]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2201      	movs	r2, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e046      	b.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d009      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800

08003d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e03f      	b.n	8003db2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fe f82e 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f9a7 	bl	80040b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b08a      	sub	sp, #40	; 0x28
 8003dbe:	af02      	add	r7, sp, #8
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d17c      	bne.n	8003ed4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_UART_Transmit+0x2c>
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e075      	b.n	8003ed6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Transmit+0x3e>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e06e      	b.n	8003ed6 <HAL_UART_Transmit+0x11c>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2221      	movs	r2, #33	; 0x21
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0e:	f7fe f985 	bl	800211c <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d108      	bne.n	8003e3c <HAL_UART_Transmit+0x82>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e003      	b.n	8003e44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e4c:	e02a      	b.n	8003ea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f8e2 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e036      	b.n	8003ed6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	3302      	adds	r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e007      	b.n	8003e96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	3301      	adds	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1cf      	bne.n	8003e4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2140      	movs	r1, #64	; 0x40
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8b2 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	; 0x28
 8003ee2:	af02      	add	r7, sp, #8
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	f040 808c 	bne.w	8004018 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_UART_Receive+0x2e>
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e084      	b.n	800401a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Receive+0x40>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e07d      	b.n	800401a <HAL_UART_Receive+0x13c>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2222      	movs	r2, #34	; 0x22
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3a:	f7fe f8ef 	bl	800211c <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f54:	d108      	bne.n	8003f68 <HAL_UART_Receive+0x8a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e003      	b.n	8003f70 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f78:	e043      	b.n	8004002 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2120      	movs	r1, #32
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f84c 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e042      	b.n	800401a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10c      	bne.n	8003fb4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e01f      	b.n	8003ff4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d007      	beq.n	8003fce <HAL_UART_Receive+0xf0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_UART_Receive+0xfe>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e008      	b.n	8003fee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1b6      	bne.n	8003f7a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	e02c      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d028      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x30>
 8004042:	f7fe f86b 	bl	800211c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	429a      	cmp	r2, r3
 8004050:	d21d      	bcs.n	800408e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004060:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d0c3      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040f2:	f023 030c 	bic.w	r3, r3, #12
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <UART_SetConfig+0x114>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d103      	bne.n	8004128 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe fe8c 	bl	8002e3c <HAL_RCC_GetPCLK2Freq>
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	e002      	b.n	800412e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7fe fe74 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 800412c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009a      	lsls	r2, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <UART_SetConfig+0x118>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	0119      	lsls	r1, r3, #4
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009a      	lsls	r2, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fbb2 f2f3 	udiv	r2, r2, r3
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <UART_SetConfig+0x118>)
 8004166:	fba3 0302 	umull	r0, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2064      	movs	r0, #100	; 0x64
 800416e:	fb00 f303 	mul.w	r3, r0, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	3332      	adds	r3, #50	; 0x32
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <UART_SetConfig+0x118>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004184:	4419      	add	r1, r3
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	fbb2 f2f3 	udiv	r2, r2, r3
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <UART_SetConfig+0x118>)
 800419e:	fba3 0302 	umull	r0, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2064      	movs	r0, #100	; 0x64
 80041a6:	fb00 f303 	mul.w	r3, r0, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <UART_SetConfig+0x118>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	440a      	add	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40013800 	.word	0x40013800
 80041d0:	51eb851f 	.word	0x51eb851f

080041d4 <atoi>:
 80041d4:	220a      	movs	r2, #10
 80041d6:	2100      	movs	r1, #0
 80041d8:	f000 bda6 	b.w	8004d28 <strtol>

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	2600      	movs	r6, #0
 80041ec:	4d0c      	ldr	r5, [pc, #48]	; (8004220 <__libc_init_array+0x38>)
 80041ee:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	f002 fe14 	bl	8006e24 <_init>
 80041fc:	2600      	movs	r6, #0
 80041fe:	4d0a      	ldr	r5, [pc, #40]	; (8004228 <__libc_init_array+0x40>)
 8004200:	4c0a      	ldr	r4, [pc, #40]	; (800422c <__libc_init_array+0x44>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f855 3b04 	ldr.w	r3, [r5], #4
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	0800746c 	.word	0x0800746c
 8004224:	0800746c 	.word	0x0800746c
 8004228:	0800746c 	.word	0x0800746c
 800422c:	08007470 	.word	0x08007470

08004230 <memset>:
 8004230:	4603      	mov	r3, r0
 8004232:	4402      	add	r2, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <__cvt>:
 8004240:	2b00      	cmp	r3, #0
 8004242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004246:	461f      	mov	r7, r3
 8004248:	bfbb      	ittet	lt
 800424a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800424e:	461f      	movlt	r7, r3
 8004250:	2300      	movge	r3, #0
 8004252:	232d      	movlt	r3, #45	; 0x2d
 8004254:	b088      	sub	sp, #32
 8004256:	4614      	mov	r4, r2
 8004258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800425a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800425c:	7013      	strb	r3, [r2, #0]
 800425e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004260:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004264:	f023 0820 	bic.w	r8, r3, #32
 8004268:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800426c:	d005      	beq.n	800427a <__cvt+0x3a>
 800426e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004272:	d100      	bne.n	8004276 <__cvt+0x36>
 8004274:	3501      	adds	r5, #1
 8004276:	2302      	movs	r3, #2
 8004278:	e000      	b.n	800427c <__cvt+0x3c>
 800427a:	2303      	movs	r3, #3
 800427c:	aa07      	add	r2, sp, #28
 800427e:	9204      	str	r2, [sp, #16]
 8004280:	aa06      	add	r2, sp, #24
 8004282:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004286:	e9cd 3500 	strd	r3, r5, [sp]
 800428a:	4622      	mov	r2, r4
 800428c:	463b      	mov	r3, r7
 800428e:	f000 fea3 	bl	8004fd8 <_dtoa_r>
 8004292:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004296:	4606      	mov	r6, r0
 8004298:	d102      	bne.n	80042a0 <__cvt+0x60>
 800429a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800429c:	07db      	lsls	r3, r3, #31
 800429e:	d522      	bpl.n	80042e6 <__cvt+0xa6>
 80042a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042a4:	eb06 0905 	add.w	r9, r6, r5
 80042a8:	d110      	bne.n	80042cc <__cvt+0x8c>
 80042aa:	7833      	ldrb	r3, [r6, #0]
 80042ac:	2b30      	cmp	r3, #48	; 0x30
 80042ae:	d10a      	bne.n	80042c6 <__cvt+0x86>
 80042b0:	2200      	movs	r2, #0
 80042b2:	2300      	movs	r3, #0
 80042b4:	4620      	mov	r0, r4
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fc fb76 	bl	80009a8 <__aeabi_dcmpeq>
 80042bc:	b918      	cbnz	r0, 80042c6 <__cvt+0x86>
 80042be:	f1c5 0501 	rsb	r5, r5, #1
 80042c2:	f8ca 5000 	str.w	r5, [sl]
 80042c6:	f8da 3000 	ldr.w	r3, [sl]
 80042ca:	4499      	add	r9, r3
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	4620      	mov	r0, r4
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fc fb68 	bl	80009a8 <__aeabi_dcmpeq>
 80042d8:	b108      	cbz	r0, 80042de <__cvt+0x9e>
 80042da:	f8cd 901c 	str.w	r9, [sp, #28]
 80042de:	2230      	movs	r2, #48	; 0x30
 80042e0:	9b07      	ldr	r3, [sp, #28]
 80042e2:	454b      	cmp	r3, r9
 80042e4:	d307      	bcc.n	80042f6 <__cvt+0xb6>
 80042e6:	4630      	mov	r0, r6
 80042e8:	9b07      	ldr	r3, [sp, #28]
 80042ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042ec:	1b9b      	subs	r3, r3, r6
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	b008      	add	sp, #32
 80042f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	9107      	str	r1, [sp, #28]
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e7f0      	b.n	80042e0 <__cvt+0xa0>

080042fe <__exponent>:
 80042fe:	4603      	mov	r3, r0
 8004300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004302:	2900      	cmp	r1, #0
 8004304:	f803 2b02 	strb.w	r2, [r3], #2
 8004308:	bfb6      	itet	lt
 800430a:	222d      	movlt	r2, #45	; 0x2d
 800430c:	222b      	movge	r2, #43	; 0x2b
 800430e:	4249      	neglt	r1, r1
 8004310:	2909      	cmp	r1, #9
 8004312:	7042      	strb	r2, [r0, #1]
 8004314:	dd2b      	ble.n	800436e <__exponent+0x70>
 8004316:	f10d 0407 	add.w	r4, sp, #7
 800431a:	46a4      	mov	ip, r4
 800431c:	270a      	movs	r7, #10
 800431e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004322:	460a      	mov	r2, r1
 8004324:	46a6      	mov	lr, r4
 8004326:	fb07 1516 	mls	r5, r7, r6, r1
 800432a:	2a63      	cmp	r2, #99	; 0x63
 800432c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004330:	4631      	mov	r1, r6
 8004332:	f104 34ff 	add.w	r4, r4, #4294967295
 8004336:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800433a:	dcf0      	bgt.n	800431e <__exponent+0x20>
 800433c:	3130      	adds	r1, #48	; 0x30
 800433e:	f1ae 0502 	sub.w	r5, lr, #2
 8004342:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004346:	4629      	mov	r1, r5
 8004348:	1c44      	adds	r4, r0, #1
 800434a:	4561      	cmp	r1, ip
 800434c:	d30a      	bcc.n	8004364 <__exponent+0x66>
 800434e:	f10d 0209 	add.w	r2, sp, #9
 8004352:	eba2 020e 	sub.w	r2, r2, lr
 8004356:	4565      	cmp	r5, ip
 8004358:	bf88      	it	hi
 800435a:	2200      	movhi	r2, #0
 800435c:	4413      	add	r3, r2
 800435e:	1a18      	subs	r0, r3, r0
 8004360:	b003      	add	sp, #12
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004368:	f804 2f01 	strb.w	r2, [r4, #1]!
 800436c:	e7ed      	b.n	800434a <__exponent+0x4c>
 800436e:	2330      	movs	r3, #48	; 0x30
 8004370:	3130      	adds	r1, #48	; 0x30
 8004372:	7083      	strb	r3, [r0, #2]
 8004374:	70c1      	strb	r1, [r0, #3]
 8004376:	1d03      	adds	r3, r0, #4
 8004378:	e7f1      	b.n	800435e <__exponent+0x60>
	...

0800437c <_printf_float>:
 800437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004380:	b091      	sub	sp, #68	; 0x44
 8004382:	460c      	mov	r4, r1
 8004384:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004388:	4616      	mov	r6, r2
 800438a:	461f      	mov	r7, r3
 800438c:	4605      	mov	r5, r0
 800438e:	f001 fdc9 	bl	8005f24 <_localeconv_r>
 8004392:	6803      	ldr	r3, [r0, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	9309      	str	r3, [sp, #36]	; 0x24
 8004398:	f7fb feda 	bl	8000150 <strlen>
 800439c:	2300      	movs	r3, #0
 800439e:	930e      	str	r3, [sp, #56]	; 0x38
 80043a0:	f8d8 3000 	ldr.w	r3, [r8]
 80043a4:	900a      	str	r0, [sp, #40]	; 0x28
 80043a6:	3307      	adds	r3, #7
 80043a8:	f023 0307 	bic.w	r3, r3, #7
 80043ac:	f103 0208 	add.w	r2, r3, #8
 80043b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043b4:	f8d4 b000 	ldr.w	fp, [r4]
 80043b8:	f8c8 2000 	str.w	r2, [r8]
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80043c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80043cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295
 80043d2:	4640      	mov	r0, r8
 80043d4:	4b9c      	ldr	r3, [pc, #624]	; (8004648 <_printf_float+0x2cc>)
 80043d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043d8:	f7fc fb18 	bl	8000a0c <__aeabi_dcmpun>
 80043dc:	bb70      	cbnz	r0, 800443c <_printf_float+0xc0>
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	4640      	mov	r0, r8
 80043e4:	4b98      	ldr	r3, [pc, #608]	; (8004648 <_printf_float+0x2cc>)
 80043e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043e8:	f7fc faf2 	bl	80009d0 <__aeabi_dcmple>
 80043ec:	bb30      	cbnz	r0, 800443c <_printf_float+0xc0>
 80043ee:	2200      	movs	r2, #0
 80043f0:	2300      	movs	r3, #0
 80043f2:	4640      	mov	r0, r8
 80043f4:	4651      	mov	r1, sl
 80043f6:	f7fc fae1 	bl	80009bc <__aeabi_dcmplt>
 80043fa:	b110      	cbz	r0, 8004402 <_printf_float+0x86>
 80043fc:	232d      	movs	r3, #45	; 0x2d
 80043fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004402:	4b92      	ldr	r3, [pc, #584]	; (800464c <_printf_float+0x2d0>)
 8004404:	4892      	ldr	r0, [pc, #584]	; (8004650 <_printf_float+0x2d4>)
 8004406:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800440a:	bf94      	ite	ls
 800440c:	4698      	movls	r8, r3
 800440e:	4680      	movhi	r8, r0
 8004410:	2303      	movs	r3, #3
 8004412:	f04f 0a00 	mov.w	sl, #0
 8004416:	6123      	str	r3, [r4, #16]
 8004418:	f02b 0304 	bic.w	r3, fp, #4
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	4633      	mov	r3, r6
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	9700      	str	r7, [sp, #0]
 8004426:	aa0f      	add	r2, sp, #60	; 0x3c
 8004428:	f000 f9d4 	bl	80047d4 <_printf_common>
 800442c:	3001      	adds	r0, #1
 800442e:	f040 8090 	bne.w	8004552 <_printf_float+0x1d6>
 8004432:	f04f 30ff 	mov.w	r0, #4294967295
 8004436:	b011      	add	sp, #68	; 0x44
 8004438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443c:	4642      	mov	r2, r8
 800443e:	4653      	mov	r3, sl
 8004440:	4640      	mov	r0, r8
 8004442:	4651      	mov	r1, sl
 8004444:	f7fc fae2 	bl	8000a0c <__aeabi_dcmpun>
 8004448:	b148      	cbz	r0, 800445e <_printf_float+0xe2>
 800444a:	f1ba 0f00 	cmp.w	sl, #0
 800444e:	bfb8      	it	lt
 8004450:	232d      	movlt	r3, #45	; 0x2d
 8004452:	4880      	ldr	r0, [pc, #512]	; (8004654 <_printf_float+0x2d8>)
 8004454:	bfb8      	it	lt
 8004456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <_printf_float+0x2dc>)
 800445c:	e7d3      	b.n	8004406 <_printf_float+0x8a>
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	d142      	bne.n	80044ee <_printf_float+0x172>
 8004468:	2306      	movs	r3, #6
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	9206      	str	r2, [sp, #24]
 8004470:	aa0e      	add	r2, sp, #56	; 0x38
 8004472:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004476:	aa0d      	add	r2, sp, #52	; 0x34
 8004478:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800447c:	9203      	str	r2, [sp, #12]
 800447e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004482:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	4642      	mov	r2, r8
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4628      	mov	r0, r5
 8004490:	4653      	mov	r3, sl
 8004492:	910b      	str	r1, [sp, #44]	; 0x2c
 8004494:	f7ff fed4 	bl	8004240 <__cvt>
 8004498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800449a:	4680      	mov	r8, r0
 800449c:	2947      	cmp	r1, #71	; 0x47
 800449e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044a0:	d108      	bne.n	80044b4 <_printf_float+0x138>
 80044a2:	1cc8      	adds	r0, r1, #3
 80044a4:	db02      	blt.n	80044ac <_printf_float+0x130>
 80044a6:	6863      	ldr	r3, [r4, #4]
 80044a8:	4299      	cmp	r1, r3
 80044aa:	dd40      	ble.n	800452e <_printf_float+0x1b2>
 80044ac:	f1a9 0902 	sub.w	r9, r9, #2
 80044b0:	fa5f f989 	uxtb.w	r9, r9
 80044b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044b8:	d81f      	bhi.n	80044fa <_printf_float+0x17e>
 80044ba:	464a      	mov	r2, r9
 80044bc:	3901      	subs	r1, #1
 80044be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044c2:	910d      	str	r1, [sp, #52]	; 0x34
 80044c4:	f7ff ff1b 	bl	80042fe <__exponent>
 80044c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ca:	4682      	mov	sl, r0
 80044cc:	1813      	adds	r3, r2, r0
 80044ce:	2a01      	cmp	r2, #1
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	dc02      	bgt.n	80044da <_printf_float+0x15e>
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	07d2      	lsls	r2, r2, #31
 80044d8:	d501      	bpl.n	80044de <_printf_float+0x162>
 80044da:	3301      	adds	r3, #1
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d09b      	beq.n	800441e <_printf_float+0xa2>
 80044e6:	232d      	movs	r3, #45	; 0x2d
 80044e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ec:	e797      	b.n	800441e <_printf_float+0xa2>
 80044ee:	2947      	cmp	r1, #71	; 0x47
 80044f0:	d1bc      	bne.n	800446c <_printf_float+0xf0>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ba      	bne.n	800446c <_printf_float+0xf0>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e7b7      	b.n	800446a <_printf_float+0xee>
 80044fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80044fe:	d118      	bne.n	8004532 <_printf_float+0x1b6>
 8004500:	2900      	cmp	r1, #0
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	dd0b      	ble.n	800451e <_printf_float+0x1a2>
 8004506:	6121      	str	r1, [r4, #16]
 8004508:	b913      	cbnz	r3, 8004510 <_printf_float+0x194>
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	07d0      	lsls	r0, r2, #31
 800450e:	d502      	bpl.n	8004516 <_printf_float+0x19a>
 8004510:	3301      	adds	r3, #1
 8004512:	440b      	add	r3, r1
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	f04f 0a00 	mov.w	sl, #0
 800451a:	65a1      	str	r1, [r4, #88]	; 0x58
 800451c:	e7df      	b.n	80044de <_printf_float+0x162>
 800451e:	b913      	cbnz	r3, 8004526 <_printf_float+0x1aa>
 8004520:	6822      	ldr	r2, [r4, #0]
 8004522:	07d2      	lsls	r2, r2, #31
 8004524:	d501      	bpl.n	800452a <_printf_float+0x1ae>
 8004526:	3302      	adds	r3, #2
 8004528:	e7f4      	b.n	8004514 <_printf_float+0x198>
 800452a:	2301      	movs	r3, #1
 800452c:	e7f2      	b.n	8004514 <_printf_float+0x198>
 800452e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004534:	4299      	cmp	r1, r3
 8004536:	db05      	blt.n	8004544 <_printf_float+0x1c8>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	6121      	str	r1, [r4, #16]
 800453c:	07d8      	lsls	r0, r3, #31
 800453e:	d5ea      	bpl.n	8004516 <_printf_float+0x19a>
 8004540:	1c4b      	adds	r3, r1, #1
 8004542:	e7e7      	b.n	8004514 <_printf_float+0x198>
 8004544:	2900      	cmp	r1, #0
 8004546:	bfcc      	ite	gt
 8004548:	2201      	movgt	r2, #1
 800454a:	f1c1 0202 	rsble	r2, r1, #2
 800454e:	4413      	add	r3, r2
 8004550:	e7e0      	b.n	8004514 <_printf_float+0x198>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	055a      	lsls	r2, r3, #21
 8004556:	d407      	bmi.n	8004568 <_printf_float+0x1ec>
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	4642      	mov	r2, r8
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	47b8      	blx	r7
 8004562:	3001      	adds	r0, #1
 8004564:	d12b      	bne.n	80045be <_printf_float+0x242>
 8004566:	e764      	b.n	8004432 <_printf_float+0xb6>
 8004568:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800456c:	f240 80dd 	bls.w	800472a <_printf_float+0x3ae>
 8004570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004574:	2200      	movs	r2, #0
 8004576:	2300      	movs	r3, #0
 8004578:	f7fc fa16 	bl	80009a8 <__aeabi_dcmpeq>
 800457c:	2800      	cmp	r0, #0
 800457e:	d033      	beq.n	80045e8 <_printf_float+0x26c>
 8004580:	2301      	movs	r3, #1
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	4a35      	ldr	r2, [pc, #212]	; (800465c <_printf_float+0x2e0>)
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	f43f af51 	beq.w	8004432 <_printf_float+0xb6>
 8004590:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004594:	429a      	cmp	r2, r3
 8004596:	db02      	blt.n	800459e <_printf_float+0x222>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	07d8      	lsls	r0, r3, #31
 800459c:	d50f      	bpl.n	80045be <_printf_float+0x242>
 800459e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	f43f af42 	beq.w	8004432 <_printf_float+0xb6>
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	f104 091a 	add.w	r9, r4, #26
 80045b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b8:	3b01      	subs	r3, #1
 80045ba:	4543      	cmp	r3, r8
 80045bc:	dc09      	bgt.n	80045d2 <_printf_float+0x256>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	079b      	lsls	r3, r3, #30
 80045c2:	f100 8102 	bmi.w	80047ca <_printf_float+0x44e>
 80045c6:	68e0      	ldr	r0, [r4, #12]
 80045c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045ca:	4298      	cmp	r0, r3
 80045cc:	bfb8      	it	lt
 80045ce:	4618      	movlt	r0, r3
 80045d0:	e731      	b.n	8004436 <_printf_float+0xba>
 80045d2:	2301      	movs	r3, #1
 80045d4:	464a      	mov	r2, r9
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f af28 	beq.w	8004432 <_printf_float+0xb6>
 80045e2:	f108 0801 	add.w	r8, r8, #1
 80045e6:	e7e6      	b.n	80045b6 <_printf_float+0x23a>
 80045e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dc38      	bgt.n	8004660 <_printf_float+0x2e4>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <_printf_float+0x2e0>)
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f af1a 	beq.w	8004432 <_printf_float+0xb6>
 80045fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004602:	4313      	orrs	r3, r2
 8004604:	d102      	bne.n	800460c <_printf_float+0x290>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	07d9      	lsls	r1, r3, #31
 800460a:	d5d8      	bpl.n	80045be <_printf_float+0x242>
 800460c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	f43f af0b 	beq.w	8004432 <_printf_float+0xb6>
 800461c:	f04f 0900 	mov.w	r9, #0
 8004620:	f104 0a1a 	add.w	sl, r4, #26
 8004624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004626:	425b      	negs	r3, r3
 8004628:	454b      	cmp	r3, r9
 800462a:	dc01      	bgt.n	8004630 <_printf_float+0x2b4>
 800462c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800462e:	e794      	b.n	800455a <_printf_float+0x1de>
 8004630:	2301      	movs	r3, #1
 8004632:	4652      	mov	r2, sl
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	f43f aef9 	beq.w	8004432 <_printf_float+0xb6>
 8004640:	f109 0901 	add.w	r9, r9, #1
 8004644:	e7ee      	b.n	8004624 <_printf_float+0x2a8>
 8004646:	bf00      	nop
 8004648:	7fefffff 	.word	0x7fefffff
 800464c:	08007088 	.word	0x08007088
 8004650:	0800708c 	.word	0x0800708c
 8004654:	08007094 	.word	0x08007094
 8004658:	08007090 	.word	0x08007090
 800465c:	08007098 	.word	0x08007098
 8004660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004664:	429a      	cmp	r2, r3
 8004666:	bfa8      	it	ge
 8004668:	461a      	movge	r2, r3
 800466a:	2a00      	cmp	r2, #0
 800466c:	4691      	mov	r9, r2
 800466e:	dc37      	bgt.n	80046e0 <_printf_float+0x364>
 8004670:	f04f 0b00 	mov.w	fp, #0
 8004674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004678:	f104 021a 	add.w	r2, r4, #26
 800467c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004680:	ebaa 0309 	sub.w	r3, sl, r9
 8004684:	455b      	cmp	r3, fp
 8004686:	dc33      	bgt.n	80046f0 <_printf_float+0x374>
 8004688:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800468c:	429a      	cmp	r2, r3
 800468e:	db3b      	blt.n	8004708 <_printf_float+0x38c>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	07da      	lsls	r2, r3, #31
 8004694:	d438      	bmi.n	8004708 <_printf_float+0x38c>
 8004696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004698:	990d      	ldr	r1, [sp, #52]	; 0x34
 800469a:	eba2 030a 	sub.w	r3, r2, sl
 800469e:	eba2 0901 	sub.w	r9, r2, r1
 80046a2:	4599      	cmp	r9, r3
 80046a4:	bfa8      	it	ge
 80046a6:	4699      	movge	r9, r3
 80046a8:	f1b9 0f00 	cmp.w	r9, #0
 80046ac:	dc34      	bgt.n	8004718 <_printf_float+0x39c>
 80046ae:	f04f 0800 	mov.w	r8, #0
 80046b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046b6:	f104 0a1a 	add.w	sl, r4, #26
 80046ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	eba3 0309 	sub.w	r3, r3, r9
 80046c4:	4543      	cmp	r3, r8
 80046c6:	f77f af7a 	ble.w	80045be <_printf_float+0x242>
 80046ca:	2301      	movs	r3, #1
 80046cc:	4652      	mov	r2, sl
 80046ce:	4631      	mov	r1, r6
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b8      	blx	r7
 80046d4:	3001      	adds	r0, #1
 80046d6:	f43f aeac 	beq.w	8004432 <_printf_float+0xb6>
 80046da:	f108 0801 	add.w	r8, r8, #1
 80046de:	e7ec      	b.n	80046ba <_printf_float+0x33e>
 80046e0:	4613      	mov	r3, r2
 80046e2:	4631      	mov	r1, r6
 80046e4:	4642      	mov	r2, r8
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	d1c0      	bne.n	8004670 <_printf_float+0x2f4>
 80046ee:	e6a0      	b.n	8004432 <_printf_float+0xb6>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	f43f ae99 	beq.w	8004432 <_printf_float+0xb6>
 8004700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004702:	f10b 0b01 	add.w	fp, fp, #1
 8004706:	e7b9      	b.n	800467c <_printf_float+0x300>
 8004708:	4631      	mov	r1, r6
 800470a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470e:	4628      	mov	r0, r5
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	d1bf      	bne.n	8004696 <_printf_float+0x31a>
 8004716:	e68c      	b.n	8004432 <_printf_float+0xb6>
 8004718:	464b      	mov	r3, r9
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	eb08 020a 	add.w	r2, r8, sl
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	d1c2      	bne.n	80046ae <_printf_float+0x332>
 8004728:	e683      	b.n	8004432 <_printf_float+0xb6>
 800472a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800472c:	2a01      	cmp	r2, #1
 800472e:	dc01      	bgt.n	8004734 <_printf_float+0x3b8>
 8004730:	07db      	lsls	r3, r3, #31
 8004732:	d537      	bpl.n	80047a4 <_printf_float+0x428>
 8004734:	2301      	movs	r3, #1
 8004736:	4642      	mov	r2, r8
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f ae77 	beq.w	8004432 <_printf_float+0xb6>
 8004744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004748:	4631      	mov	r1, r6
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	f43f ae6f 	beq.w	8004432 <_printf_float+0xb6>
 8004754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004758:	2200      	movs	r2, #0
 800475a:	2300      	movs	r3, #0
 800475c:	f7fc f924 	bl	80009a8 <__aeabi_dcmpeq>
 8004760:	b9d8      	cbnz	r0, 800479a <_printf_float+0x41e>
 8004762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004764:	f108 0201 	add.w	r2, r8, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	d10e      	bne.n	8004792 <_printf_float+0x416>
 8004774:	e65d      	b.n	8004432 <_printf_float+0xb6>
 8004776:	2301      	movs	r3, #1
 8004778:	464a      	mov	r2, r9
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	f43f ae56 	beq.w	8004432 <_printf_float+0xb6>
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800478c:	3b01      	subs	r3, #1
 800478e:	4543      	cmp	r3, r8
 8004790:	dcf1      	bgt.n	8004776 <_printf_float+0x3fa>
 8004792:	4653      	mov	r3, sl
 8004794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004798:	e6e0      	b.n	800455c <_printf_float+0x1e0>
 800479a:	f04f 0800 	mov.w	r8, #0
 800479e:	f104 091a 	add.w	r9, r4, #26
 80047a2:	e7f2      	b.n	800478a <_printf_float+0x40e>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4642      	mov	r2, r8
 80047a8:	e7df      	b.n	800476a <_printf_float+0x3ee>
 80047aa:	2301      	movs	r3, #1
 80047ac:	464a      	mov	r2, r9
 80047ae:	4631      	mov	r1, r6
 80047b0:	4628      	mov	r0, r5
 80047b2:	47b8      	blx	r7
 80047b4:	3001      	adds	r0, #1
 80047b6:	f43f ae3c 	beq.w	8004432 <_printf_float+0xb6>
 80047ba:	f108 0801 	add.w	r8, r8, #1
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047c2:	1a5b      	subs	r3, r3, r1
 80047c4:	4543      	cmp	r3, r8
 80047c6:	dcf0      	bgt.n	80047aa <_printf_float+0x42e>
 80047c8:	e6fd      	b.n	80045c6 <_printf_float+0x24a>
 80047ca:	f04f 0800 	mov.w	r8, #0
 80047ce:	f104 0919 	add.w	r9, r4, #25
 80047d2:	e7f4      	b.n	80047be <_printf_float+0x442>

080047d4 <_printf_common>:
 80047d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	4616      	mov	r6, r2
 80047da:	4699      	mov	r9, r3
 80047dc:	688a      	ldr	r2, [r1, #8]
 80047de:	690b      	ldr	r3, [r1, #16]
 80047e0:	4607      	mov	r7, r0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfb8      	it	lt
 80047e6:	4613      	movlt	r3, r2
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ee:	460c      	mov	r4, r1
 80047f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f4:	b10a      	cbz	r2, 80047fa <_printf_common+0x26>
 80047f6:	3301      	adds	r3, #1
 80047f8:	6033      	str	r3, [r6, #0]
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	0699      	lsls	r1, r3, #26
 80047fe:	bf42      	ittt	mi
 8004800:	6833      	ldrmi	r3, [r6, #0]
 8004802:	3302      	addmi	r3, #2
 8004804:	6033      	strmi	r3, [r6, #0]
 8004806:	6825      	ldr	r5, [r4, #0]
 8004808:	f015 0506 	ands.w	r5, r5, #6
 800480c:	d106      	bne.n	800481c <_printf_common+0x48>
 800480e:	f104 0a19 	add.w	sl, r4, #25
 8004812:	68e3      	ldr	r3, [r4, #12]
 8004814:	6832      	ldr	r2, [r6, #0]
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	42ab      	cmp	r3, r5
 800481a:	dc28      	bgt.n	800486e <_printf_common+0x9a>
 800481c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004820:	1e13      	subs	r3, r2, #0
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	bf18      	it	ne
 8004826:	2301      	movne	r3, #1
 8004828:	0692      	lsls	r2, r2, #26
 800482a:	d42d      	bmi.n	8004888 <_printf_common+0xb4>
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004834:	47c0      	blx	r8
 8004836:	3001      	adds	r0, #1
 8004838:	d020      	beq.n	800487c <_printf_common+0xa8>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	68e5      	ldr	r5, [r4, #12]
 800483e:	f003 0306 	and.w	r3, r3, #6
 8004842:	2b04      	cmp	r3, #4
 8004844:	bf18      	it	ne
 8004846:	2500      	movne	r5, #0
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	f04f 0600 	mov.w	r6, #0
 800484e:	68a3      	ldr	r3, [r4, #8]
 8004850:	bf08      	it	eq
 8004852:	1aad      	subeq	r5, r5, r2
 8004854:	6922      	ldr	r2, [r4, #16]
 8004856:	bf08      	it	eq
 8004858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800485c:	4293      	cmp	r3, r2
 800485e:	bfc4      	itt	gt
 8004860:	1a9b      	subgt	r3, r3, r2
 8004862:	18ed      	addgt	r5, r5, r3
 8004864:	341a      	adds	r4, #26
 8004866:	42b5      	cmp	r5, r6
 8004868:	d11a      	bne.n	80048a0 <_printf_common+0xcc>
 800486a:	2000      	movs	r0, #0
 800486c:	e008      	b.n	8004880 <_printf_common+0xac>
 800486e:	2301      	movs	r3, #1
 8004870:	4652      	mov	r2, sl
 8004872:	4649      	mov	r1, r9
 8004874:	4638      	mov	r0, r7
 8004876:	47c0      	blx	r8
 8004878:	3001      	adds	r0, #1
 800487a:	d103      	bne.n	8004884 <_printf_common+0xb0>
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004884:	3501      	adds	r5, #1
 8004886:	e7c4      	b.n	8004812 <_printf_common+0x3e>
 8004888:	2030      	movs	r0, #48	; 0x30
 800488a:	18e1      	adds	r1, r4, r3
 800488c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004896:	4422      	add	r2, r4
 8004898:	3302      	adds	r3, #2
 800489a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800489e:	e7c5      	b.n	800482c <_printf_common+0x58>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4622      	mov	r2, r4
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0e6      	beq.n	800487c <_printf_common+0xa8>
 80048ae:	3601      	adds	r6, #1
 80048b0:	e7d9      	b.n	8004866 <_printf_common+0x92>
	...

080048b4 <_printf_i>:
 80048b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	460c      	mov	r4, r1
 80048ba:	7e27      	ldrb	r7, [r4, #24]
 80048bc:	4691      	mov	r9, r2
 80048be:	2f78      	cmp	r7, #120	; 0x78
 80048c0:	4680      	mov	r8, r0
 80048c2:	469a      	mov	sl, r3
 80048c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ca:	d807      	bhi.n	80048dc <_printf_i+0x28>
 80048cc:	2f62      	cmp	r7, #98	; 0x62
 80048ce:	d80a      	bhi.n	80048e6 <_printf_i+0x32>
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f000 80d9 	beq.w	8004a88 <_printf_i+0x1d4>
 80048d6:	2f58      	cmp	r7, #88	; 0x58
 80048d8:	f000 80a4 	beq.w	8004a24 <_printf_i+0x170>
 80048dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e4:	e03a      	b.n	800495c <_printf_i+0xa8>
 80048e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ea:	2b15      	cmp	r3, #21
 80048ec:	d8f6      	bhi.n	80048dc <_printf_i+0x28>
 80048ee:	a001      	add	r0, pc, #4	; (adr r0, 80048f4 <_printf_i+0x40>)
 80048f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	08004961 	.word	0x08004961
 80048fc:	080048dd 	.word	0x080048dd
 8004900:	080048dd 	.word	0x080048dd
 8004904:	080048dd 	.word	0x080048dd
 8004908:	080048dd 	.word	0x080048dd
 800490c:	08004961 	.word	0x08004961
 8004910:	080048dd 	.word	0x080048dd
 8004914:	080048dd 	.word	0x080048dd
 8004918:	080048dd 	.word	0x080048dd
 800491c:	080048dd 	.word	0x080048dd
 8004920:	08004a6f 	.word	0x08004a6f
 8004924:	08004991 	.word	0x08004991
 8004928:	08004a51 	.word	0x08004a51
 800492c:	080048dd 	.word	0x080048dd
 8004930:	080048dd 	.word	0x080048dd
 8004934:	08004a91 	.word	0x08004a91
 8004938:	080048dd 	.word	0x080048dd
 800493c:	08004991 	.word	0x08004991
 8004940:	080048dd 	.word	0x080048dd
 8004944:	080048dd 	.word	0x080048dd
 8004948:	08004a59 	.word	0x08004a59
 800494c:	680b      	ldr	r3, [r1, #0]
 800494e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	600a      	str	r2, [r1, #0]
 8004958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800495c:	2301      	movs	r3, #1
 800495e:	e0a4      	b.n	8004aaa <_printf_i+0x1f6>
 8004960:	6825      	ldr	r5, [r4, #0]
 8004962:	6808      	ldr	r0, [r1, #0]
 8004964:	062e      	lsls	r6, r5, #24
 8004966:	f100 0304 	add.w	r3, r0, #4
 800496a:	d50a      	bpl.n	8004982 <_printf_i+0xce>
 800496c:	6805      	ldr	r5, [r0, #0]
 800496e:	600b      	str	r3, [r1, #0]
 8004970:	2d00      	cmp	r5, #0
 8004972:	da03      	bge.n	800497c <_printf_i+0xc8>
 8004974:	232d      	movs	r3, #45	; 0x2d
 8004976:	426d      	negs	r5, r5
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497c:	230a      	movs	r3, #10
 800497e:	485e      	ldr	r0, [pc, #376]	; (8004af8 <_printf_i+0x244>)
 8004980:	e019      	b.n	80049b6 <_printf_i+0x102>
 8004982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004986:	6805      	ldr	r5, [r0, #0]
 8004988:	600b      	str	r3, [r1, #0]
 800498a:	bf18      	it	ne
 800498c:	b22d      	sxthne	r5, r5
 800498e:	e7ef      	b.n	8004970 <_printf_i+0xbc>
 8004990:	680b      	ldr	r3, [r1, #0]
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	1d18      	adds	r0, r3, #4
 8004996:	6008      	str	r0, [r1, #0]
 8004998:	0628      	lsls	r0, r5, #24
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0xec>
 800499c:	681d      	ldr	r5, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0xf2>
 80049a0:	0669      	lsls	r1, r5, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0xe8>
 80049a4:	881d      	ldrh	r5, [r3, #0]
 80049a6:	2f6f      	cmp	r7, #111	; 0x6f
 80049a8:	bf0c      	ite	eq
 80049aa:	2308      	moveq	r3, #8
 80049ac:	230a      	movne	r3, #10
 80049ae:	4852      	ldr	r0, [pc, #328]	; (8004af8 <_printf_i+0x244>)
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b6:	6866      	ldr	r6, [r4, #4]
 80049b8:	2e00      	cmp	r6, #0
 80049ba:	bfa8      	it	ge
 80049bc:	6821      	ldrge	r1, [r4, #0]
 80049be:	60a6      	str	r6, [r4, #8]
 80049c0:	bfa4      	itt	ge
 80049c2:	f021 0104 	bicge.w	r1, r1, #4
 80049c6:	6021      	strge	r1, [r4, #0]
 80049c8:	b90d      	cbnz	r5, 80049ce <_printf_i+0x11a>
 80049ca:	2e00      	cmp	r6, #0
 80049cc:	d04d      	beq.n	8004a6a <_printf_i+0x1b6>
 80049ce:	4616      	mov	r6, r2
 80049d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80049d4:	fb03 5711 	mls	r7, r3, r1, r5
 80049d8:	5dc7      	ldrb	r7, [r0, r7]
 80049da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049de:	462f      	mov	r7, r5
 80049e0:	42bb      	cmp	r3, r7
 80049e2:	460d      	mov	r5, r1
 80049e4:	d9f4      	bls.n	80049d0 <_printf_i+0x11c>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d10b      	bne.n	8004a02 <_printf_i+0x14e>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	07df      	lsls	r7, r3, #31
 80049ee:	d508      	bpl.n	8004a02 <_printf_i+0x14e>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6861      	ldr	r1, [r4, #4]
 80049f4:	4299      	cmp	r1, r3
 80049f6:	bfde      	ittt	le
 80049f8:	2330      	movle	r3, #48	; 0x30
 80049fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a02:	1b92      	subs	r2, r2, r6
 8004a04:	6122      	str	r2, [r4, #16]
 8004a06:	464b      	mov	r3, r9
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f8cd a000 	str.w	sl, [sp]
 8004a10:	aa03      	add	r2, sp, #12
 8004a12:	f7ff fedf 	bl	80047d4 <_printf_common>
 8004a16:	3001      	adds	r0, #1
 8004a18:	d14c      	bne.n	8004ab4 <_printf_i+0x200>
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b004      	add	sp, #16
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	4834      	ldr	r0, [pc, #208]	; (8004af8 <_printf_i+0x244>)
 8004a26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a2a:	680e      	ldr	r6, [r1, #0]
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a32:	061f      	lsls	r7, r3, #24
 8004a34:	600e      	str	r6, [r1, #0]
 8004a36:	d514      	bpl.n	8004a62 <_printf_i+0x1ae>
 8004a38:	07d9      	lsls	r1, r3, #31
 8004a3a:	bf44      	itt	mi
 8004a3c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a40:	6023      	strmi	r3, [r4, #0]
 8004a42:	b91d      	cbnz	r5, 8004a4c <_printf_i+0x198>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	f023 0320 	bic.w	r3, r3, #32
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	e7af      	b.n	80049b0 <_printf_i+0xfc>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f043 0320 	orr.w	r3, r3, #32
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	2378      	movs	r3, #120	; 0x78
 8004a5a:	4828      	ldr	r0, [pc, #160]	; (8004afc <_printf_i+0x248>)
 8004a5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a60:	e7e3      	b.n	8004a2a <_printf_i+0x176>
 8004a62:	065e      	lsls	r6, r3, #25
 8004a64:	bf48      	it	mi
 8004a66:	b2ad      	uxthmi	r5, r5
 8004a68:	e7e6      	b.n	8004a38 <_printf_i+0x184>
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	e7bb      	b.n	80049e6 <_printf_i+0x132>
 8004a6e:	680b      	ldr	r3, [r1, #0]
 8004a70:	6826      	ldr	r6, [r4, #0]
 8004a72:	1d1d      	adds	r5, r3, #4
 8004a74:	6960      	ldr	r0, [r4, #20]
 8004a76:	600d      	str	r5, [r1, #0]
 8004a78:	0635      	lsls	r5, r6, #24
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	d501      	bpl.n	8004a82 <_printf_i+0x1ce>
 8004a7e:	6018      	str	r0, [r3, #0]
 8004a80:	e002      	b.n	8004a88 <_printf_i+0x1d4>
 8004a82:	0671      	lsls	r1, r6, #25
 8004a84:	d5fb      	bpl.n	8004a7e <_printf_i+0x1ca>
 8004a86:	8018      	strh	r0, [r3, #0]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4616      	mov	r6, r2
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	e7ba      	b.n	8004a06 <_printf_i+0x152>
 8004a90:	680b      	ldr	r3, [r1, #0]
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	600a      	str	r2, [r1, #0]
 8004a96:	681e      	ldr	r6, [r3, #0]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	6862      	ldr	r2, [r4, #4]
 8004a9e:	f001 fab5 	bl	800600c <memchr>
 8004aa2:	b108      	cbz	r0, 8004aa8 <_printf_i+0x1f4>
 8004aa4:	1b80      	subs	r0, r0, r6
 8004aa6:	6060      	str	r0, [r4, #4]
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	2300      	movs	r3, #0
 8004aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab2:	e7a8      	b.n	8004a06 <_printf_i+0x152>
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	4640      	mov	r0, r8
 8004aba:	6923      	ldr	r3, [r4, #16]
 8004abc:	47d0      	blx	sl
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d0ab      	beq.n	8004a1a <_printf_i+0x166>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	079b      	lsls	r3, r3, #30
 8004ac6:	d413      	bmi.n	8004af0 <_printf_i+0x23c>
 8004ac8:	68e0      	ldr	r0, [r4, #12]
 8004aca:	9b03      	ldr	r3, [sp, #12]
 8004acc:	4298      	cmp	r0, r3
 8004ace:	bfb8      	it	lt
 8004ad0:	4618      	movlt	r0, r3
 8004ad2:	e7a4      	b.n	8004a1e <_printf_i+0x16a>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	4649      	mov	r1, r9
 8004ada:	4640      	mov	r0, r8
 8004adc:	47d0      	blx	sl
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d09b      	beq.n	8004a1a <_printf_i+0x166>
 8004ae2:	3501      	adds	r5, #1
 8004ae4:	68e3      	ldr	r3, [r4, #12]
 8004ae6:	9903      	ldr	r1, [sp, #12]
 8004ae8:	1a5b      	subs	r3, r3, r1
 8004aea:	42ab      	cmp	r3, r5
 8004aec:	dcf2      	bgt.n	8004ad4 <_printf_i+0x220>
 8004aee:	e7eb      	b.n	8004ac8 <_printf_i+0x214>
 8004af0:	2500      	movs	r5, #0
 8004af2:	f104 0619 	add.w	r6, r4, #25
 8004af6:	e7f5      	b.n	8004ae4 <_printf_i+0x230>
 8004af8:	0800709a 	.word	0x0800709a
 8004afc:	080070ab 	.word	0x080070ab

08004b00 <iprintf>:
 8004b00:	b40f      	push	{r0, r1, r2, r3}
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <iprintf+0x2c>)
 8004b04:	b513      	push	{r0, r1, r4, lr}
 8004b06:	681c      	ldr	r4, [r3, #0]
 8004b08:	b124      	cbz	r4, 8004b14 <iprintf+0x14>
 8004b0a:	69a3      	ldr	r3, [r4, #24]
 8004b0c:	b913      	cbnz	r3, 8004b14 <iprintf+0x14>
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f001 f96a 	bl	8005de8 <__sinit>
 8004b14:	ab05      	add	r3, sp, #20
 8004b16:	4620      	mov	r0, r4
 8004b18:	9a04      	ldr	r2, [sp, #16]
 8004b1a:	68a1      	ldr	r1, [r4, #8]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	f001 feef 	bl	8006900 <_vfiprintf_r>
 8004b22:	b002      	add	sp, #8
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	b004      	add	sp, #16
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <_puts_r>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	460e      	mov	r6, r1
 8004b34:	4605      	mov	r5, r0
 8004b36:	b118      	cbz	r0, 8004b40 <_puts_r+0x10>
 8004b38:	6983      	ldr	r3, [r0, #24]
 8004b3a:	b90b      	cbnz	r3, 8004b40 <_puts_r+0x10>
 8004b3c:	f001 f954 	bl	8005de8 <__sinit>
 8004b40:	69ab      	ldr	r3, [r5, #24]
 8004b42:	68ac      	ldr	r4, [r5, #8]
 8004b44:	b913      	cbnz	r3, 8004b4c <_puts_r+0x1c>
 8004b46:	4628      	mov	r0, r5
 8004b48:	f001 f94e 	bl	8005de8 <__sinit>
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <_puts_r+0xd0>)
 8004b4e:	429c      	cmp	r4, r3
 8004b50:	d120      	bne.n	8004b94 <_puts_r+0x64>
 8004b52:	686c      	ldr	r4, [r5, #4]
 8004b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b56:	07db      	lsls	r3, r3, #31
 8004b58:	d405      	bmi.n	8004b66 <_puts_r+0x36>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	0598      	lsls	r0, r3, #22
 8004b5e:	d402      	bmi.n	8004b66 <_puts_r+0x36>
 8004b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b62:	f001 f9e4 	bl	8005f2e <__retarget_lock_acquire_recursive>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	0719      	lsls	r1, r3, #28
 8004b6a:	d51d      	bpl.n	8004ba8 <_puts_r+0x78>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	b1db      	cbz	r3, 8004ba8 <_puts_r+0x78>
 8004b70:	3e01      	subs	r6, #1
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	bb39      	cbnz	r1, 8004bce <_puts_r+0x9e>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da38      	bge.n	8004bf4 <_puts_r+0xc4>
 8004b82:	4622      	mov	r2, r4
 8004b84:	210a      	movs	r1, #10
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f8d8 	bl	8004d3c <__swbuf_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d011      	beq.n	8004bb4 <_puts_r+0x84>
 8004b90:	250a      	movs	r5, #10
 8004b92:	e011      	b.n	8004bb8 <_puts_r+0x88>
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <_puts_r+0xd4>)
 8004b96:	429c      	cmp	r4, r3
 8004b98:	d101      	bne.n	8004b9e <_puts_r+0x6e>
 8004b9a:	68ac      	ldr	r4, [r5, #8]
 8004b9c:	e7da      	b.n	8004b54 <_puts_r+0x24>
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <_puts_r+0xd8>)
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	bf08      	it	eq
 8004ba4:	68ec      	ldreq	r4, [r5, #12]
 8004ba6:	e7d5      	b.n	8004b54 <_puts_r+0x24>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 f918 	bl	8004de0 <__swsetup_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d0dd      	beq.n	8004b70 <_puts_r+0x40>
 8004bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bba:	07da      	lsls	r2, r3, #31
 8004bbc:	d405      	bmi.n	8004bca <_puts_r+0x9a>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	059b      	lsls	r3, r3, #22
 8004bc2:	d402      	bmi.n	8004bca <_puts_r+0x9a>
 8004bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc6:	f001 f9b3 	bl	8005f30 <__retarget_lock_release_recursive>
 8004bca:	4628      	mov	r0, r5
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da04      	bge.n	8004bdc <_puts_r+0xac>
 8004bd2:	69a2      	ldr	r2, [r4, #24]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	dc06      	bgt.n	8004be6 <_puts_r+0xb6>
 8004bd8:	290a      	cmp	r1, #10
 8004bda:	d004      	beq.n	8004be6 <_puts_r+0xb6>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	7019      	strb	r1, [r3, #0]
 8004be4:	e7c5      	b.n	8004b72 <_puts_r+0x42>
 8004be6:	4622      	mov	r2, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f8a7 	bl	8004d3c <__swbuf_r>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d1bf      	bne.n	8004b72 <_puts_r+0x42>
 8004bf2:	e7df      	b.n	8004bb4 <_puts_r+0x84>
 8004bf4:	250a      	movs	r5, #10
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	6022      	str	r2, [r4, #0]
 8004bfc:	701d      	strb	r5, [r3, #0]
 8004bfe:	e7db      	b.n	8004bb8 <_puts_r+0x88>
 8004c00:	08007274 	.word	0x08007274
 8004c04:	08007294 	.word	0x08007294
 8004c08:	08007254 	.word	0x08007254

08004c0c <puts>:
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <puts+0xc>)
 8004c0e:	4601      	mov	r1, r0
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	f7ff bf8d 	b.w	8004b30 <_puts_r>
 8004c16:	bf00      	nop
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <_strtol_l.isra.0>:
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c22:	4686      	mov	lr, r0
 8004c24:	d001      	beq.n	8004c2a <_strtol_l.isra.0+0xe>
 8004c26:	2b24      	cmp	r3, #36	; 0x24
 8004c28:	d906      	bls.n	8004c38 <_strtol_l.isra.0+0x1c>
 8004c2a:	f7ff fad7 	bl	80041dc <__errno>
 8004c2e:	2316      	movs	r3, #22
 8004c30:	6003      	str	r3, [r0, #0]
 8004c32:	2000      	movs	r0, #0
 8004c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c38:	468c      	mov	ip, r1
 8004c3a:	4e3a      	ldr	r6, [pc, #232]	; (8004d24 <_strtol_l.isra.0+0x108>)
 8004c3c:	4660      	mov	r0, ip
 8004c3e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004c42:	5da5      	ldrb	r5, [r4, r6]
 8004c44:	f015 0508 	ands.w	r5, r5, #8
 8004c48:	d1f8      	bne.n	8004c3c <_strtol_l.isra.0+0x20>
 8004c4a:	2c2d      	cmp	r4, #45	; 0x2d
 8004c4c:	d133      	bne.n	8004cb6 <_strtol_l.isra.0+0x9a>
 8004c4e:	f04f 0801 	mov.w	r8, #1
 8004c52:	f89c 4000 	ldrb.w	r4, [ip]
 8004c56:	f100 0c02 	add.w	ip, r0, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d05d      	beq.n	8004d1a <_strtol_l.isra.0+0xfe>
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d10c      	bne.n	8004c7c <_strtol_l.isra.0+0x60>
 8004c62:	2c30      	cmp	r4, #48	; 0x30
 8004c64:	d10a      	bne.n	8004c7c <_strtol_l.isra.0+0x60>
 8004c66:	f89c 0000 	ldrb.w	r0, [ip]
 8004c6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c6e:	2858      	cmp	r0, #88	; 0x58
 8004c70:	d14e      	bne.n	8004d10 <_strtol_l.isra.0+0xf4>
 8004c72:	2310      	movs	r3, #16
 8004c74:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004c78:	f10c 0c02 	add.w	ip, ip, #2
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004c82:	3f01      	subs	r7, #1
 8004c84:	fbb7 f9f3 	udiv	r9, r7, r3
 8004c88:	4628      	mov	r0, r5
 8004c8a:	fb03 7a19 	mls	sl, r3, r9, r7
 8004c8e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004c92:	2e09      	cmp	r6, #9
 8004c94:	d818      	bhi.n	8004cc8 <_strtol_l.isra.0+0xac>
 8004c96:	4634      	mov	r4, r6
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	dd24      	ble.n	8004ce6 <_strtol_l.isra.0+0xca>
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	db1f      	blt.n	8004ce0 <_strtol_l.isra.0+0xc4>
 8004ca0:	4581      	cmp	r9, r0
 8004ca2:	d31d      	bcc.n	8004ce0 <_strtol_l.isra.0+0xc4>
 8004ca4:	d101      	bne.n	8004caa <_strtol_l.isra.0+0x8e>
 8004ca6:	45a2      	cmp	sl, r4
 8004ca8:	db1a      	blt.n	8004ce0 <_strtol_l.isra.0+0xc4>
 8004caa:	2501      	movs	r5, #1
 8004cac:	fb00 4003 	mla	r0, r0, r3, r4
 8004cb0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004cb4:	e7eb      	b.n	8004c8e <_strtol_l.isra.0+0x72>
 8004cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8004cb8:	bf08      	it	eq
 8004cba:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004cbe:	46a8      	mov	r8, r5
 8004cc0:	bf08      	it	eq
 8004cc2:	f100 0c02 	addeq.w	ip, r0, #2
 8004cc6:	e7c8      	b.n	8004c5a <_strtol_l.isra.0+0x3e>
 8004cc8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004ccc:	2e19      	cmp	r6, #25
 8004cce:	d801      	bhi.n	8004cd4 <_strtol_l.isra.0+0xb8>
 8004cd0:	3c37      	subs	r4, #55	; 0x37
 8004cd2:	e7e1      	b.n	8004c98 <_strtol_l.isra.0+0x7c>
 8004cd4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004cd8:	2e19      	cmp	r6, #25
 8004cda:	d804      	bhi.n	8004ce6 <_strtol_l.isra.0+0xca>
 8004cdc:	3c57      	subs	r4, #87	; 0x57
 8004cde:	e7db      	b.n	8004c98 <_strtol_l.isra.0+0x7c>
 8004ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ce4:	e7e4      	b.n	8004cb0 <_strtol_l.isra.0+0x94>
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	da08      	bge.n	8004cfc <_strtol_l.isra.0+0xe0>
 8004cea:	2322      	movs	r3, #34	; 0x22
 8004cec:	4638      	mov	r0, r7
 8004cee:	f8ce 3000 	str.w	r3, [lr]
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d09e      	beq.n	8004c34 <_strtol_l.isra.0+0x18>
 8004cf6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004cfa:	e007      	b.n	8004d0c <_strtol_l.isra.0+0xf0>
 8004cfc:	f1b8 0f00 	cmp.w	r8, #0
 8004d00:	d000      	beq.n	8004d04 <_strtol_l.isra.0+0xe8>
 8004d02:	4240      	negs	r0, r0
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	d095      	beq.n	8004c34 <_strtol_l.isra.0+0x18>
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	d1f4      	bne.n	8004cf6 <_strtol_l.isra.0+0xda>
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	e791      	b.n	8004c34 <_strtol_l.isra.0+0x18>
 8004d10:	2430      	movs	r4, #48	; 0x30
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1b2      	bne.n	8004c7c <_strtol_l.isra.0+0x60>
 8004d16:	2308      	movs	r3, #8
 8004d18:	e7b0      	b.n	8004c7c <_strtol_l.isra.0+0x60>
 8004d1a:	2c30      	cmp	r4, #48	; 0x30
 8004d1c:	d0a3      	beq.n	8004c66 <_strtol_l.isra.0+0x4a>
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e7ac      	b.n	8004c7c <_strtol_l.isra.0+0x60>
 8004d22:	bf00      	nop
 8004d24:	080070bd 	.word	0x080070bd

08004d28 <strtol>:
 8004d28:	4613      	mov	r3, r2
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4802      	ldr	r0, [pc, #8]	; (8004d38 <strtol+0x10>)
 8004d30:	6800      	ldr	r0, [r0, #0]
 8004d32:	f7ff bf73 	b.w	8004c1c <_strtol_l.isra.0>
 8004d36:	bf00      	nop
 8004d38:	2000000c 	.word	0x2000000c

08004d3c <__swbuf_r>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	460e      	mov	r6, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	4605      	mov	r5, r0
 8004d44:	b118      	cbz	r0, 8004d4e <__swbuf_r+0x12>
 8004d46:	6983      	ldr	r3, [r0, #24]
 8004d48:	b90b      	cbnz	r3, 8004d4e <__swbuf_r+0x12>
 8004d4a:	f001 f84d 	bl	8005de8 <__sinit>
 8004d4e:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <__swbuf_r+0x98>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	d12b      	bne.n	8004dac <__swbuf_r+0x70>
 8004d54:	686c      	ldr	r4, [r5, #4]
 8004d56:	69a3      	ldr	r3, [r4, #24]
 8004d58:	60a3      	str	r3, [r4, #8]
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	071a      	lsls	r2, r3, #28
 8004d5e:	d52f      	bpl.n	8004dc0 <__swbuf_r+0x84>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	b36b      	cbz	r3, 8004dc0 <__swbuf_r+0x84>
 8004d64:	6923      	ldr	r3, [r4, #16]
 8004d66:	6820      	ldr	r0, [r4, #0]
 8004d68:	b2f6      	uxtb	r6, r6
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	6963      	ldr	r3, [r4, #20]
 8004d6e:	4637      	mov	r7, r6
 8004d70:	4283      	cmp	r3, r0
 8004d72:	dc04      	bgt.n	8004d7e <__swbuf_r+0x42>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 ffa2 	bl	8005cc0 <_fflush_r>
 8004d7c:	bb30      	cbnz	r0, 8004dcc <__swbuf_r+0x90>
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	3001      	adds	r0, #1
 8004d82:	3b01      	subs	r3, #1
 8004d84:	60a3      	str	r3, [r4, #8]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	6022      	str	r2, [r4, #0]
 8004d8c:	701e      	strb	r6, [r3, #0]
 8004d8e:	6963      	ldr	r3, [r4, #20]
 8004d90:	4283      	cmp	r3, r0
 8004d92:	d004      	beq.n	8004d9e <__swbuf_r+0x62>
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	07db      	lsls	r3, r3, #31
 8004d98:	d506      	bpl.n	8004da8 <__swbuf_r+0x6c>
 8004d9a:	2e0a      	cmp	r6, #10
 8004d9c:	d104      	bne.n	8004da8 <__swbuf_r+0x6c>
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 ff8d 	bl	8005cc0 <_fflush_r>
 8004da6:	b988      	cbnz	r0, 8004dcc <__swbuf_r+0x90>
 8004da8:	4638      	mov	r0, r7
 8004daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <__swbuf_r+0x9c>)
 8004dae:	429c      	cmp	r4, r3
 8004db0:	d101      	bne.n	8004db6 <__swbuf_r+0x7a>
 8004db2:	68ac      	ldr	r4, [r5, #8]
 8004db4:	e7cf      	b.n	8004d56 <__swbuf_r+0x1a>
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <__swbuf_r+0xa0>)
 8004db8:	429c      	cmp	r4, r3
 8004dba:	bf08      	it	eq
 8004dbc:	68ec      	ldreq	r4, [r5, #12]
 8004dbe:	e7ca      	b.n	8004d56 <__swbuf_r+0x1a>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f80c 	bl	8004de0 <__swsetup_r>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d0cb      	beq.n	8004d64 <__swbuf_r+0x28>
 8004dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8004dd0:	e7ea      	b.n	8004da8 <__swbuf_r+0x6c>
 8004dd2:	bf00      	nop
 8004dd4:	08007274 	.word	0x08007274
 8004dd8:	08007294 	.word	0x08007294
 8004ddc:	08007254 	.word	0x08007254

08004de0 <__swsetup_r>:
 8004de0:	4b32      	ldr	r3, [pc, #200]	; (8004eac <__swsetup_r+0xcc>)
 8004de2:	b570      	push	{r4, r5, r6, lr}
 8004de4:	681d      	ldr	r5, [r3, #0]
 8004de6:	4606      	mov	r6, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	b125      	cbz	r5, 8004df6 <__swsetup_r+0x16>
 8004dec:	69ab      	ldr	r3, [r5, #24]
 8004dee:	b913      	cbnz	r3, 8004df6 <__swsetup_r+0x16>
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fff9 	bl	8005de8 <__sinit>
 8004df6:	4b2e      	ldr	r3, [pc, #184]	; (8004eb0 <__swsetup_r+0xd0>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	d10f      	bne.n	8004e1c <__swsetup_r+0x3c>
 8004dfc:	686c      	ldr	r4, [r5, #4]
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e04:	0719      	lsls	r1, r3, #28
 8004e06:	d42c      	bmi.n	8004e62 <__swsetup_r+0x82>
 8004e08:	06dd      	lsls	r5, r3, #27
 8004e0a:	d411      	bmi.n	8004e30 <__swsetup_r+0x50>
 8004e0c:	2309      	movs	r3, #9
 8004e0e:	6033      	str	r3, [r6, #0]
 8004e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	e03e      	b.n	8004e9a <__swsetup_r+0xba>
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <__swsetup_r+0xd4>)
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d101      	bne.n	8004e26 <__swsetup_r+0x46>
 8004e22:	68ac      	ldr	r4, [r5, #8]
 8004e24:	e7eb      	b.n	8004dfe <__swsetup_r+0x1e>
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <__swsetup_r+0xd8>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	bf08      	it	eq
 8004e2c:	68ec      	ldreq	r4, [r5, #12]
 8004e2e:	e7e6      	b.n	8004dfe <__swsetup_r+0x1e>
 8004e30:	0758      	lsls	r0, r3, #29
 8004e32:	d512      	bpl.n	8004e5a <__swsetup_r+0x7a>
 8004e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e36:	b141      	cbz	r1, 8004e4a <__swsetup_r+0x6a>
 8004e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	d002      	beq.n	8004e46 <__swsetup_r+0x66>
 8004e40:	4630      	mov	r0, r6
 8004e42:	f001 fc8f 	bl	8006764 <_free_r>
 8004e46:	2300      	movs	r3, #0
 8004e48:	6363      	str	r3, [r4, #52]	; 0x34
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e50:	81a3      	strh	r3, [r4, #12]
 8004e52:	2300      	movs	r3, #0
 8004e54:	6063      	str	r3, [r4, #4]
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0308 	orr.w	r3, r3, #8
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	b94b      	cbnz	r3, 8004e7a <__swsetup_r+0x9a>
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e70:	d003      	beq.n	8004e7a <__swsetup_r+0x9a>
 8004e72:	4621      	mov	r1, r4
 8004e74:	4630      	mov	r0, r6
 8004e76:	f001 f881 	bl	8005f7c <__smakebuf_r>
 8004e7a:	89a0      	ldrh	r0, [r4, #12]
 8004e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e80:	f010 0301 	ands.w	r3, r0, #1
 8004e84:	d00a      	beq.n	8004e9c <__swsetup_r+0xbc>
 8004e86:	2300      	movs	r3, #0
 8004e88:	60a3      	str	r3, [r4, #8]
 8004e8a:	6963      	ldr	r3, [r4, #20]
 8004e8c:	425b      	negs	r3, r3
 8004e8e:	61a3      	str	r3, [r4, #24]
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	b943      	cbnz	r3, 8004ea6 <__swsetup_r+0xc6>
 8004e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e98:	d1ba      	bne.n	8004e10 <__swsetup_r+0x30>
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	0781      	lsls	r1, r0, #30
 8004e9e:	bf58      	it	pl
 8004ea0:	6963      	ldrpl	r3, [r4, #20]
 8004ea2:	60a3      	str	r3, [r4, #8]
 8004ea4:	e7f4      	b.n	8004e90 <__swsetup_r+0xb0>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	e7f7      	b.n	8004e9a <__swsetup_r+0xba>
 8004eaa:	bf00      	nop
 8004eac:	2000000c 	.word	0x2000000c
 8004eb0:	08007274 	.word	0x08007274
 8004eb4:	08007294 	.word	0x08007294
 8004eb8:	08007254 	.word	0x08007254

08004ebc <quorem>:
 8004ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	6903      	ldr	r3, [r0, #16]
 8004ec2:	690c      	ldr	r4, [r1, #16]
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	f2c0 8083 	blt.w	8004fd2 <quorem+0x116>
 8004ecc:	3c01      	subs	r4, #1
 8004ece:	f100 0514 	add.w	r5, r0, #20
 8004ed2:	f101 0814 	add.w	r8, r1, #20
 8004ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ef4:	d332      	bcc.n	8004f5c <quorem+0xa0>
 8004ef6:	f04f 0e00 	mov.w	lr, #0
 8004efa:	4640      	mov	r0, r8
 8004efc:	46ac      	mov	ip, r5
 8004efe:	46f2      	mov	sl, lr
 8004f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f04:	b293      	uxth	r3, r2
 8004f06:	fb06 e303 	mla	r3, r6, r3, lr
 8004f0a:	0c12      	lsrs	r2, r2, #16
 8004f0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f10:	fb06 e202 	mla	r2, r6, r2, lr
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1a:	f8dc a000 	ldr.w	sl, [ip]
 8004f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f22:	fa1f fa8a 	uxth.w	sl, sl
 8004f26:	4453      	add	r3, sl
 8004f28:	fa1f fa82 	uxth.w	sl, r2
 8004f2c:	f8dc 2000 	ldr.w	r2, [ip]
 8004f30:	4581      	cmp	r9, r0
 8004f32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004f36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f44:	f84c 3b04 	str.w	r3, [ip], #4
 8004f48:	d2da      	bcs.n	8004f00 <quorem+0x44>
 8004f4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f4e:	b92b      	cbnz	r3, 8004f5c <quorem+0xa0>
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	3b04      	subs	r3, #4
 8004f54:	429d      	cmp	r5, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	d32f      	bcc.n	8004fba <quorem+0xfe>
 8004f5a:	613c      	str	r4, [r7, #16]
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f001 faeb 	bl	8006538 <__mcmp>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	db25      	blt.n	8004fb2 <quorem+0xf6>
 8004f66:	4628      	mov	r0, r5
 8004f68:	f04f 0c00 	mov.w	ip, #0
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f72:	f8d0 e000 	ldr.w	lr, [r0]
 8004f76:	b28b      	uxth	r3, r1
 8004f78:	ebac 0303 	sub.w	r3, ip, r3
 8004f7c:	fa1f f28e 	uxth.w	r2, lr
 8004f80:	4413      	add	r3, r2
 8004f82:	0c0a      	lsrs	r2, r1, #16
 8004f84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f92:	45c1      	cmp	r9, r8
 8004f94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f98:	f840 3b04 	str.w	r3, [r0], #4
 8004f9c:	d2e7      	bcs.n	8004f6e <quorem+0xb2>
 8004f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa6:	b922      	cbnz	r2, 8004fb2 <quorem+0xf6>
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	429d      	cmp	r5, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	d30a      	bcc.n	8004fc6 <quorem+0x10a>
 8004fb0:	613c      	str	r4, [r7, #16]
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	b003      	add	sp, #12
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d1cb      	bne.n	8004f5a <quorem+0x9e>
 8004fc2:	3c01      	subs	r4, #1
 8004fc4:	e7c6      	b.n	8004f54 <quorem+0x98>
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	3b04      	subs	r3, #4
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <quorem+0xf4>
 8004fce:	3c01      	subs	r4, #1
 8004fd0:	e7eb      	b.n	8004faa <quorem+0xee>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e7ee      	b.n	8004fb4 <quorem+0xf8>
	...

08004fd8 <_dtoa_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4616      	mov	r6, r2
 8004fde:	461f      	mov	r7, r3
 8004fe0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fe2:	b099      	sub	sp, #100	; 0x64
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004fee:	b974      	cbnz	r4, 800500e <_dtoa_r+0x36>
 8004ff0:	2010      	movs	r0, #16
 8004ff2:	f001 f803 	bl	8005ffc <malloc>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6268      	str	r0, [r5, #36]	; 0x24
 8004ffa:	b920      	cbnz	r0, 8005006 <_dtoa_r+0x2e>
 8004ffc:	21ea      	movs	r1, #234	; 0xea
 8004ffe:	4bae      	ldr	r3, [pc, #696]	; (80052b8 <_dtoa_r+0x2e0>)
 8005000:	48ae      	ldr	r0, [pc, #696]	; (80052bc <_dtoa_r+0x2e4>)
 8005002:	f001 fe13 	bl	8006c2c <__assert_func>
 8005006:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800500a:	6004      	str	r4, [r0, #0]
 800500c:	60c4      	str	r4, [r0, #12]
 800500e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	b151      	cbz	r1, 800502a <_dtoa_r+0x52>
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	2301      	movs	r3, #1
 8005018:	4093      	lsls	r3, r2
 800501a:	604a      	str	r2, [r1, #4]
 800501c:	608b      	str	r3, [r1, #8]
 800501e:	4628      	mov	r0, r5
 8005020:	f001 f850 	bl	80060c4 <_Bfree>
 8005024:	2200      	movs	r2, #0
 8005026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	1e3b      	subs	r3, r7, #0
 800502c:	bfaf      	iteee	ge
 800502e:	2300      	movge	r3, #0
 8005030:	2201      	movlt	r2, #1
 8005032:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005036:	9305      	strlt	r3, [sp, #20]
 8005038:	bfa8      	it	ge
 800503a:	f8c8 3000 	strge.w	r3, [r8]
 800503e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005042:	4b9f      	ldr	r3, [pc, #636]	; (80052c0 <_dtoa_r+0x2e8>)
 8005044:	bfb8      	it	lt
 8005046:	f8c8 2000 	strlt.w	r2, [r8]
 800504a:	ea33 0309 	bics.w	r3, r3, r9
 800504e:	d119      	bne.n	8005084 <_dtoa_r+0xac>
 8005050:	f242 730f 	movw	r3, #9999	; 0x270f
 8005054:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800505c:	4333      	orrs	r3, r6
 800505e:	f000 8580 	beq.w	8005b62 <_dtoa_r+0xb8a>
 8005062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005064:	b953      	cbnz	r3, 800507c <_dtoa_r+0xa4>
 8005066:	4b97      	ldr	r3, [pc, #604]	; (80052c4 <_dtoa_r+0x2ec>)
 8005068:	e022      	b.n	80050b0 <_dtoa_r+0xd8>
 800506a:	4b97      	ldr	r3, [pc, #604]	; (80052c8 <_dtoa_r+0x2f0>)
 800506c:	9308      	str	r3, [sp, #32]
 800506e:	3308      	adds	r3, #8
 8005070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	9808      	ldr	r0, [sp, #32]
 8005076:	b019      	add	sp, #100	; 0x64
 8005078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507c:	4b91      	ldr	r3, [pc, #580]	; (80052c4 <_dtoa_r+0x2ec>)
 800507e:	9308      	str	r3, [sp, #32]
 8005080:	3303      	adds	r3, #3
 8005082:	e7f5      	b.n	8005070 <_dtoa_r+0x98>
 8005084:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005088:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800508c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	f7fb fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8005098:	4680      	mov	r8, r0
 800509a:	b158      	cbz	r0, 80050b4 <_dtoa_r+0xdc>
 800509c:	2301      	movs	r3, #1
 800509e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8559 	beq.w	8005b5c <_dtoa_r+0xb84>
 80050aa:	4888      	ldr	r0, [pc, #544]	; (80052cc <_dtoa_r+0x2f4>)
 80050ac:	6018      	str	r0, [r3, #0]
 80050ae:	1e43      	subs	r3, r0, #1
 80050b0:	9308      	str	r3, [sp, #32]
 80050b2:	e7df      	b.n	8005074 <_dtoa_r+0x9c>
 80050b4:	ab16      	add	r3, sp, #88	; 0x58
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	ab17      	add	r3, sp, #92	; 0x5c
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	4628      	mov	r0, r5
 80050be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050c2:	f001 fae5 	bl	8006690 <__d2b>
 80050c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050ca:	4682      	mov	sl, r0
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d07e      	beq.n	80051ce <_dtoa_r+0x1f6>
 80050d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050ea:	2200      	movs	r2, #0
 80050ec:	4b78      	ldr	r3, [pc, #480]	; (80052d0 <_dtoa_r+0x2f8>)
 80050ee:	f7fb f83b 	bl	8000168 <__aeabi_dsub>
 80050f2:	a36b      	add	r3, pc, #428	; (adr r3, 80052a0 <_dtoa_r+0x2c8>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f9ee 	bl	80004d8 <__aeabi_dmul>
 80050fc:	a36a      	add	r3, pc, #424	; (adr r3, 80052a8 <_dtoa_r+0x2d0>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb f833 	bl	800016c <__adddf3>
 8005106:	4606      	mov	r6, r0
 8005108:	4620      	mov	r0, r4
 800510a:	460f      	mov	r7, r1
 800510c:	f7fb f97a 	bl	8000404 <__aeabi_i2d>
 8005110:	a367      	add	r3, pc, #412	; (adr r3, 80052b0 <_dtoa_r+0x2d8>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f9df 	bl	80004d8 <__aeabi_dmul>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4630      	mov	r0, r6
 8005120:	4639      	mov	r1, r7
 8005122:	f7fb f823 	bl	800016c <__adddf3>
 8005126:	4606      	mov	r6, r0
 8005128:	460f      	mov	r7, r1
 800512a:	f7fb fc85 	bl	8000a38 <__aeabi_d2iz>
 800512e:	2200      	movs	r2, #0
 8005130:	4681      	mov	r9, r0
 8005132:	2300      	movs	r3, #0
 8005134:	4630      	mov	r0, r6
 8005136:	4639      	mov	r1, r7
 8005138:	f7fb fc40 	bl	80009bc <__aeabi_dcmplt>
 800513c:	b148      	cbz	r0, 8005152 <_dtoa_r+0x17a>
 800513e:	4648      	mov	r0, r9
 8005140:	f7fb f960 	bl	8000404 <__aeabi_i2d>
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	f7fb fc2e 	bl	80009a8 <__aeabi_dcmpeq>
 800514c:	b908      	cbnz	r0, 8005152 <_dtoa_r+0x17a>
 800514e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005152:	f1b9 0f16 	cmp.w	r9, #22
 8005156:	d857      	bhi.n	8005208 <_dtoa_r+0x230>
 8005158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800515c:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <_dtoa_r+0x2fc>)
 800515e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fc29 	bl	80009bc <__aeabi_dcmplt>
 800516a:	2800      	cmp	r0, #0
 800516c:	d04e      	beq.n	800520c <_dtoa_r+0x234>
 800516e:	2300      	movs	r3, #0
 8005170:	f109 39ff 	add.w	r9, r9, #4294967295
 8005174:	930f      	str	r3, [sp, #60]	; 0x3c
 8005176:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005178:	1b1c      	subs	r4, r3, r4
 800517a:	1e63      	subs	r3, r4, #1
 800517c:	9309      	str	r3, [sp, #36]	; 0x24
 800517e:	bf49      	itett	mi
 8005180:	f1c4 0301 	rsbmi	r3, r4, #1
 8005184:	2300      	movpl	r3, #0
 8005186:	9306      	strmi	r3, [sp, #24]
 8005188:	2300      	movmi	r3, #0
 800518a:	bf54      	ite	pl
 800518c:	9306      	strpl	r3, [sp, #24]
 800518e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005190:	f1b9 0f00 	cmp.w	r9, #0
 8005194:	db3c      	blt.n	8005210 <_dtoa_r+0x238>
 8005196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005198:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800519c:	444b      	add	r3, r9
 800519e:	9309      	str	r3, [sp, #36]	; 0x24
 80051a0:	2300      	movs	r3, #0
 80051a2:	930a      	str	r3, [sp, #40]	; 0x28
 80051a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	d86c      	bhi.n	8005284 <_dtoa_r+0x2ac>
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	bfc4      	itt	gt
 80051ae:	3b04      	subgt	r3, #4
 80051b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b4:	bfc8      	it	gt
 80051b6:	2400      	movgt	r4, #0
 80051b8:	f1a3 0302 	sub.w	r3, r3, #2
 80051bc:	bfd8      	it	le
 80051be:	2401      	movle	r4, #1
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	f200 808b 	bhi.w	80052dc <_dtoa_r+0x304>
 80051c6:	e8df f003 	tbb	[pc, r3]
 80051ca:	4f2d      	.short	0x4f2d
 80051cc:	5b4d      	.short	0x5b4d
 80051ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80051d2:	441c      	add	r4, r3
 80051d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051d8:	2b20      	cmp	r3, #32
 80051da:	bfc3      	ittte	gt
 80051dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051e4:	fa09 f303 	lslgt.w	r3, r9, r3
 80051e8:	f1c3 0320 	rsble	r3, r3, #32
 80051ec:	bfc6      	itte	gt
 80051ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051f2:	4318      	orrgt	r0, r3
 80051f4:	fa06 f003 	lslle.w	r0, r6, r3
 80051f8:	f7fb f8f4 	bl	80003e4 <__aeabi_ui2d>
 80051fc:	2301      	movs	r3, #1
 80051fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005202:	3c01      	subs	r4, #1
 8005204:	9313      	str	r3, [sp, #76]	; 0x4c
 8005206:	e770      	b.n	80050ea <_dtoa_r+0x112>
 8005208:	2301      	movs	r3, #1
 800520a:	e7b3      	b.n	8005174 <_dtoa_r+0x19c>
 800520c:	900f      	str	r0, [sp, #60]	; 0x3c
 800520e:	e7b2      	b.n	8005176 <_dtoa_r+0x19e>
 8005210:	9b06      	ldr	r3, [sp, #24]
 8005212:	eba3 0309 	sub.w	r3, r3, r9
 8005216:	9306      	str	r3, [sp, #24]
 8005218:	f1c9 0300 	rsb	r3, r9, #0
 800521c:	930a      	str	r3, [sp, #40]	; 0x28
 800521e:	2300      	movs	r3, #0
 8005220:	930e      	str	r3, [sp, #56]	; 0x38
 8005222:	e7bf      	b.n	80051a4 <_dtoa_r+0x1cc>
 8005224:	2300      	movs	r3, #0
 8005226:	930b      	str	r3, [sp, #44]	; 0x2c
 8005228:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800522a:	2b00      	cmp	r3, #0
 800522c:	dc59      	bgt.n	80052e2 <_dtoa_r+0x30a>
 800522e:	f04f 0b01 	mov.w	fp, #1
 8005232:	465b      	mov	r3, fp
 8005234:	f8cd b008 	str.w	fp, [sp, #8]
 8005238:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800523c:	2200      	movs	r2, #0
 800523e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005240:	6042      	str	r2, [r0, #4]
 8005242:	2204      	movs	r2, #4
 8005244:	f102 0614 	add.w	r6, r2, #20
 8005248:	429e      	cmp	r6, r3
 800524a:	6841      	ldr	r1, [r0, #4]
 800524c:	d94f      	bls.n	80052ee <_dtoa_r+0x316>
 800524e:	4628      	mov	r0, r5
 8005250:	f000 fef8 	bl	8006044 <_Balloc>
 8005254:	9008      	str	r0, [sp, #32]
 8005256:	2800      	cmp	r0, #0
 8005258:	d14d      	bne.n	80052f6 <_dtoa_r+0x31e>
 800525a:	4602      	mov	r2, r0
 800525c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <_dtoa_r+0x300>)
 8005262:	e6cd      	b.n	8005000 <_dtoa_r+0x28>
 8005264:	2301      	movs	r3, #1
 8005266:	e7de      	b.n	8005226 <_dtoa_r+0x24e>
 8005268:	2300      	movs	r3, #0
 800526a:	930b      	str	r3, [sp, #44]	; 0x2c
 800526c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800526e:	eb09 0b03 	add.w	fp, r9, r3
 8005272:	f10b 0301 	add.w	r3, fp, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	9302      	str	r3, [sp, #8]
 800527a:	bfb8      	it	lt
 800527c:	2301      	movlt	r3, #1
 800527e:	e7dd      	b.n	800523c <_dtoa_r+0x264>
 8005280:	2301      	movs	r3, #1
 8005282:	e7f2      	b.n	800526a <_dtoa_r+0x292>
 8005284:	2401      	movs	r4, #1
 8005286:	2300      	movs	r3, #0
 8005288:	940b      	str	r4, [sp, #44]	; 0x2c
 800528a:	9322      	str	r3, [sp, #136]	; 0x88
 800528c:	f04f 3bff 	mov.w	fp, #4294967295
 8005290:	2200      	movs	r2, #0
 8005292:	2312      	movs	r3, #18
 8005294:	f8cd b008 	str.w	fp, [sp, #8]
 8005298:	9223      	str	r2, [sp, #140]	; 0x8c
 800529a:	e7cf      	b.n	800523c <_dtoa_r+0x264>
 800529c:	f3af 8000 	nop.w
 80052a0:	636f4361 	.word	0x636f4361
 80052a4:	3fd287a7 	.word	0x3fd287a7
 80052a8:	8b60c8b3 	.word	0x8b60c8b3
 80052ac:	3fc68a28 	.word	0x3fc68a28
 80052b0:	509f79fb 	.word	0x509f79fb
 80052b4:	3fd34413 	.word	0x3fd34413
 80052b8:	080071ca 	.word	0x080071ca
 80052bc:	080071e1 	.word	0x080071e1
 80052c0:	7ff00000 	.word	0x7ff00000
 80052c4:	080071c6 	.word	0x080071c6
 80052c8:	080071bd 	.word	0x080071bd
 80052cc:	08007099 	.word	0x08007099
 80052d0:	3ff80000 	.word	0x3ff80000
 80052d4:	08007340 	.word	0x08007340
 80052d8:	08007240 	.word	0x08007240
 80052dc:	2301      	movs	r3, #1
 80052de:	930b      	str	r3, [sp, #44]	; 0x2c
 80052e0:	e7d4      	b.n	800528c <_dtoa_r+0x2b4>
 80052e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80052e6:	465b      	mov	r3, fp
 80052e8:	f8cd b008 	str.w	fp, [sp, #8]
 80052ec:	e7a6      	b.n	800523c <_dtoa_r+0x264>
 80052ee:	3101      	adds	r1, #1
 80052f0:	6041      	str	r1, [r0, #4]
 80052f2:	0052      	lsls	r2, r2, #1
 80052f4:	e7a6      	b.n	8005244 <_dtoa_r+0x26c>
 80052f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052f8:	9a08      	ldr	r2, [sp, #32]
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	9b02      	ldr	r3, [sp, #8]
 80052fe:	2b0e      	cmp	r3, #14
 8005300:	f200 80a8 	bhi.w	8005454 <_dtoa_r+0x47c>
 8005304:	2c00      	cmp	r4, #0
 8005306:	f000 80a5 	beq.w	8005454 <_dtoa_r+0x47c>
 800530a:	f1b9 0f00 	cmp.w	r9, #0
 800530e:	dd34      	ble.n	800537a <_dtoa_r+0x3a2>
 8005310:	4a9a      	ldr	r2, [pc, #616]	; (800557c <_dtoa_r+0x5a4>)
 8005312:	f009 030f 	and.w	r3, r9, #15
 8005316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800531a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800531e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005326:	ea4f 1429 	mov.w	r4, r9, asr #4
 800532a:	d016      	beq.n	800535a <_dtoa_r+0x382>
 800532c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005330:	4b93      	ldr	r3, [pc, #588]	; (8005580 <_dtoa_r+0x5a8>)
 8005332:	2703      	movs	r7, #3
 8005334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005338:	f7fb f9f8 	bl	800072c <__aeabi_ddiv>
 800533c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005340:	f004 040f 	and.w	r4, r4, #15
 8005344:	4e8e      	ldr	r6, [pc, #568]	; (8005580 <_dtoa_r+0x5a8>)
 8005346:	b954      	cbnz	r4, 800535e <_dtoa_r+0x386>
 8005348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800534c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005350:	f7fb f9ec 	bl	800072c <__aeabi_ddiv>
 8005354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005358:	e029      	b.n	80053ae <_dtoa_r+0x3d6>
 800535a:	2702      	movs	r7, #2
 800535c:	e7f2      	b.n	8005344 <_dtoa_r+0x36c>
 800535e:	07e1      	lsls	r1, r4, #31
 8005360:	d508      	bpl.n	8005374 <_dtoa_r+0x39c>
 8005362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005372:	3701      	adds	r7, #1
 8005374:	1064      	asrs	r4, r4, #1
 8005376:	3608      	adds	r6, #8
 8005378:	e7e5      	b.n	8005346 <_dtoa_r+0x36e>
 800537a:	f000 80a5 	beq.w	80054c8 <_dtoa_r+0x4f0>
 800537e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005382:	f1c9 0400 	rsb	r4, r9, #0
 8005386:	4b7d      	ldr	r3, [pc, #500]	; (800557c <_dtoa_r+0x5a4>)
 8005388:	f004 020f 	and.w	r2, r4, #15
 800538c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb f8a0 	bl	80004d8 <__aeabi_dmul>
 8005398:	2702      	movs	r7, #2
 800539a:	2300      	movs	r3, #0
 800539c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053a0:	4e77      	ldr	r6, [pc, #476]	; (8005580 <_dtoa_r+0x5a8>)
 80053a2:	1124      	asrs	r4, r4, #4
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	f040 8084 	bne.w	80054b2 <_dtoa_r+0x4da>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d2      	bne.n	8005354 <_dtoa_r+0x37c>
 80053ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 808b 	beq.w	80054cc <_dtoa_r+0x4f4>
 80053b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053c2:	2200      	movs	r2, #0
 80053c4:	4b6f      	ldr	r3, [pc, #444]	; (8005584 <_dtoa_r+0x5ac>)
 80053c6:	f7fb faf9 	bl	80009bc <__aeabi_dcmplt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d07e      	beq.n	80054cc <_dtoa_r+0x4f4>
 80053ce:	9b02      	ldr	r3, [sp, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d07b      	beq.n	80054cc <_dtoa_r+0x4f4>
 80053d4:	f1bb 0f00 	cmp.w	fp, #0
 80053d8:	dd38      	ble.n	800544c <_dtoa_r+0x474>
 80053da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053de:	2200      	movs	r2, #0
 80053e0:	4b69      	ldr	r3, [pc, #420]	; (8005588 <_dtoa_r+0x5b0>)
 80053e2:	f7fb f879 	bl	80004d8 <__aeabi_dmul>
 80053e6:	465c      	mov	r4, fp
 80053e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80053f0:	3701      	adds	r7, #1
 80053f2:	4638      	mov	r0, r7
 80053f4:	f7fb f806 	bl	8000404 <__aeabi_i2d>
 80053f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fc:	f7fb f86c 	bl	80004d8 <__aeabi_dmul>
 8005400:	2200      	movs	r2, #0
 8005402:	4b62      	ldr	r3, [pc, #392]	; (800558c <_dtoa_r+0x5b4>)
 8005404:	f7fa feb2 	bl	800016c <__adddf3>
 8005408:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800540c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005410:	9611      	str	r6, [sp, #68]	; 0x44
 8005412:	2c00      	cmp	r4, #0
 8005414:	d15d      	bne.n	80054d2 <_dtoa_r+0x4fa>
 8005416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541a:	2200      	movs	r2, #0
 800541c:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <_dtoa_r+0x5b8>)
 800541e:	f7fa fea3 	bl	8000168 <__aeabi_dsub>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800542a:	4633      	mov	r3, r6
 800542c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800542e:	f7fb fae3 	bl	80009f8 <__aeabi_dcmpgt>
 8005432:	2800      	cmp	r0, #0
 8005434:	f040 829e 	bne.w	8005974 <_dtoa_r+0x99c>
 8005438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800543e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005442:	f7fb fabb 	bl	80009bc <__aeabi_dcmplt>
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8292 	bne.w	8005970 <_dtoa_r+0x998>
 800544c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005456:	2b00      	cmp	r3, #0
 8005458:	f2c0 8153 	blt.w	8005702 <_dtoa_r+0x72a>
 800545c:	f1b9 0f0e 	cmp.w	r9, #14
 8005460:	f300 814f 	bgt.w	8005702 <_dtoa_r+0x72a>
 8005464:	4b45      	ldr	r3, [pc, #276]	; (800557c <_dtoa_r+0x5a4>)
 8005466:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800546a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800546e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005472:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005474:	2b00      	cmp	r3, #0
 8005476:	f280 80db 	bge.w	8005630 <_dtoa_r+0x658>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f300 80d7 	bgt.w	8005630 <_dtoa_r+0x658>
 8005482:	f040 8274 	bne.w	800596e <_dtoa_r+0x996>
 8005486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800548a:	2200      	movs	r2, #0
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <_dtoa_r+0x5b8>)
 800548e:	f7fb f823 	bl	80004d8 <__aeabi_dmul>
 8005492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005496:	f7fb faa5 	bl	80009e4 <__aeabi_dcmpge>
 800549a:	9c02      	ldr	r4, [sp, #8]
 800549c:	4626      	mov	r6, r4
 800549e:	2800      	cmp	r0, #0
 80054a0:	f040 824a 	bne.w	8005938 <_dtoa_r+0x960>
 80054a4:	2331      	movs	r3, #49	; 0x31
 80054a6:	9f08      	ldr	r7, [sp, #32]
 80054a8:	f109 0901 	add.w	r9, r9, #1
 80054ac:	f807 3b01 	strb.w	r3, [r7], #1
 80054b0:	e246      	b.n	8005940 <_dtoa_r+0x968>
 80054b2:	07e2      	lsls	r2, r4, #31
 80054b4:	d505      	bpl.n	80054c2 <_dtoa_r+0x4ea>
 80054b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ba:	f7fb f80d 	bl	80004d8 <__aeabi_dmul>
 80054be:	2301      	movs	r3, #1
 80054c0:	3701      	adds	r7, #1
 80054c2:	1064      	asrs	r4, r4, #1
 80054c4:	3608      	adds	r6, #8
 80054c6:	e76d      	b.n	80053a4 <_dtoa_r+0x3cc>
 80054c8:	2702      	movs	r7, #2
 80054ca:	e770      	b.n	80053ae <_dtoa_r+0x3d6>
 80054cc:	46c8      	mov	r8, r9
 80054ce:	9c02      	ldr	r4, [sp, #8]
 80054d0:	e78f      	b.n	80053f2 <_dtoa_r+0x41a>
 80054d2:	9908      	ldr	r1, [sp, #32]
 80054d4:	4b29      	ldr	r3, [pc, #164]	; (800557c <_dtoa_r+0x5a4>)
 80054d6:	4421      	add	r1, r4
 80054d8:	9112      	str	r1, [sp, #72]	; 0x48
 80054da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d055      	beq.n	8005598 <_dtoa_r+0x5c0>
 80054ec:	2000      	movs	r0, #0
 80054ee:	4929      	ldr	r1, [pc, #164]	; (8005594 <_dtoa_r+0x5bc>)
 80054f0:	f7fb f91c 	bl	800072c <__aeabi_ddiv>
 80054f4:	463b      	mov	r3, r7
 80054f6:	4632      	mov	r2, r6
 80054f8:	f7fa fe36 	bl	8000168 <__aeabi_dsub>
 80054fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005500:	9f08      	ldr	r7, [sp, #32]
 8005502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005506:	f7fb fa97 	bl	8000a38 <__aeabi_d2iz>
 800550a:	4604      	mov	r4, r0
 800550c:	f7fa ff7a 	bl	8000404 <__aeabi_i2d>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005518:	f7fa fe26 	bl	8000168 <__aeabi_dsub>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	3430      	adds	r4, #48	; 0x30
 8005522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800552a:	f807 4b01 	strb.w	r4, [r7], #1
 800552e:	f7fb fa45 	bl	80009bc <__aeabi_dcmplt>
 8005532:	2800      	cmp	r0, #0
 8005534:	d174      	bne.n	8005620 <_dtoa_r+0x648>
 8005536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553a:	2000      	movs	r0, #0
 800553c:	4911      	ldr	r1, [pc, #68]	; (8005584 <_dtoa_r+0x5ac>)
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005546:	f7fb fa39 	bl	80009bc <__aeabi_dcmplt>
 800554a:	2800      	cmp	r0, #0
 800554c:	f040 80b6 	bne.w	80056bc <_dtoa_r+0x6e4>
 8005550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005552:	429f      	cmp	r7, r3
 8005554:	f43f af7a 	beq.w	800544c <_dtoa_r+0x474>
 8005558:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800555c:	2200      	movs	r2, #0
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <_dtoa_r+0x5b0>)
 8005560:	f7fa ffba 	bl	80004d8 <__aeabi_dmul>
 8005564:	2200      	movs	r2, #0
 8005566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_dtoa_r+0x5b0>)
 8005570:	f7fa ffb2 	bl	80004d8 <__aeabi_dmul>
 8005574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005578:	e7c3      	b.n	8005502 <_dtoa_r+0x52a>
 800557a:	bf00      	nop
 800557c:	08007340 	.word	0x08007340
 8005580:	08007318 	.word	0x08007318
 8005584:	3ff00000 	.word	0x3ff00000
 8005588:	40240000 	.word	0x40240000
 800558c:	401c0000 	.word	0x401c0000
 8005590:	40140000 	.word	0x40140000
 8005594:	3fe00000 	.word	0x3fe00000
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fa ff9c 	bl	80004d8 <__aeabi_dmul>
 80055a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a6:	9c08      	ldr	r4, [sp, #32]
 80055a8:	9314      	str	r3, [sp, #80]	; 0x50
 80055aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ae:	f7fb fa43 	bl	8000a38 <__aeabi_d2iz>
 80055b2:	9015      	str	r0, [sp, #84]	; 0x54
 80055b4:	f7fa ff26 	bl	8000404 <__aeabi_i2d>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055c0:	f7fa fdd2 	bl	8000168 <__aeabi_dsub>
 80055c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055c6:	4606      	mov	r6, r0
 80055c8:	3330      	adds	r3, #48	; 0x30
 80055ca:	f804 3b01 	strb.w	r3, [r4], #1
 80055ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055d0:	460f      	mov	r7, r1
 80055d2:	429c      	cmp	r4, r3
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	d124      	bne.n	8005624 <_dtoa_r+0x64c>
 80055da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055de:	4bb3      	ldr	r3, [pc, #716]	; (80058ac <_dtoa_r+0x8d4>)
 80055e0:	f7fa fdc4 	bl	800016c <__adddf3>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4630      	mov	r0, r6
 80055ea:	4639      	mov	r1, r7
 80055ec:	f7fb fa04 	bl	80009f8 <__aeabi_dcmpgt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d162      	bne.n	80056ba <_dtoa_r+0x6e2>
 80055f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055f8:	2000      	movs	r0, #0
 80055fa:	49ac      	ldr	r1, [pc, #688]	; (80058ac <_dtoa_r+0x8d4>)
 80055fc:	f7fa fdb4 	bl	8000168 <__aeabi_dsub>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4630      	mov	r0, r6
 8005606:	4639      	mov	r1, r7
 8005608:	f7fb f9d8 	bl	80009bc <__aeabi_dcmplt>
 800560c:	2800      	cmp	r0, #0
 800560e:	f43f af1d 	beq.w	800544c <_dtoa_r+0x474>
 8005612:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005614:	1e7b      	subs	r3, r7, #1
 8005616:	9314      	str	r3, [sp, #80]	; 0x50
 8005618:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800561c:	2b30      	cmp	r3, #48	; 0x30
 800561e:	d0f8      	beq.n	8005612 <_dtoa_r+0x63a>
 8005620:	46c1      	mov	r9, r8
 8005622:	e03a      	b.n	800569a <_dtoa_r+0x6c2>
 8005624:	4ba2      	ldr	r3, [pc, #648]	; (80058b0 <_dtoa_r+0x8d8>)
 8005626:	f7fa ff57 	bl	80004d8 <__aeabi_dmul>
 800562a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800562e:	e7bc      	b.n	80055aa <_dtoa_r+0x5d2>
 8005630:	9f08      	ldr	r7, [sp, #32]
 8005632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800563a:	f7fb f877 	bl	800072c <__aeabi_ddiv>
 800563e:	f7fb f9fb 	bl	8000a38 <__aeabi_d2iz>
 8005642:	4604      	mov	r4, r0
 8005644:	f7fa fede 	bl	8000404 <__aeabi_i2d>
 8005648:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800564c:	f7fa ff44 	bl	80004d8 <__aeabi_dmul>
 8005650:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005654:	460b      	mov	r3, r1
 8005656:	4602      	mov	r2, r0
 8005658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800565c:	f7fa fd84 	bl	8000168 <__aeabi_dsub>
 8005660:	f807 6b01 	strb.w	r6, [r7], #1
 8005664:	9e08      	ldr	r6, [sp, #32]
 8005666:	9b02      	ldr	r3, [sp, #8]
 8005668:	1bbe      	subs	r6, r7, r6
 800566a:	42b3      	cmp	r3, r6
 800566c:	d13a      	bne.n	80056e4 <_dtoa_r+0x70c>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	f7fa fd7b 	bl	800016c <__adddf3>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800567e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005682:	f7fb f9b9 	bl	80009f8 <__aeabi_dcmpgt>
 8005686:	bb58      	cbnz	r0, 80056e0 <_dtoa_r+0x708>
 8005688:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800568c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005690:	f7fb f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8005694:	b108      	cbz	r0, 800569a <_dtoa_r+0x6c2>
 8005696:	07e1      	lsls	r1, r4, #31
 8005698:	d422      	bmi.n	80056e0 <_dtoa_r+0x708>
 800569a:	4628      	mov	r0, r5
 800569c:	4651      	mov	r1, sl
 800569e:	f000 fd11 	bl	80060c4 <_Bfree>
 80056a2:	2300      	movs	r3, #0
 80056a4:	703b      	strb	r3, [r7, #0]
 80056a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056a8:	f109 0001 	add.w	r0, r9, #1
 80056ac:	6018      	str	r0, [r3, #0]
 80056ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f43f acdf 	beq.w	8005074 <_dtoa_r+0x9c>
 80056b6:	601f      	str	r7, [r3, #0]
 80056b8:	e4dc      	b.n	8005074 <_dtoa_r+0x9c>
 80056ba:	4627      	mov	r7, r4
 80056bc:	463b      	mov	r3, r7
 80056be:	461f      	mov	r7, r3
 80056c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056c4:	2a39      	cmp	r2, #57	; 0x39
 80056c6:	d107      	bne.n	80056d8 <_dtoa_r+0x700>
 80056c8:	9a08      	ldr	r2, [sp, #32]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d1f7      	bne.n	80056be <_dtoa_r+0x6e6>
 80056ce:	2230      	movs	r2, #48	; 0x30
 80056d0:	9908      	ldr	r1, [sp, #32]
 80056d2:	f108 0801 	add.w	r8, r8, #1
 80056d6:	700a      	strb	r2, [r1, #0]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	3201      	adds	r2, #1
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e79f      	b.n	8005620 <_dtoa_r+0x648>
 80056e0:	46c8      	mov	r8, r9
 80056e2:	e7eb      	b.n	80056bc <_dtoa_r+0x6e4>
 80056e4:	2200      	movs	r2, #0
 80056e6:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <_dtoa_r+0x8d8>)
 80056e8:	f7fa fef6 	bl	80004d8 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2300      	movs	r3, #0
 80056f8:	f7fb f956 	bl	80009a8 <__aeabi_dcmpeq>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d098      	beq.n	8005632 <_dtoa_r+0x65a>
 8005700:	e7cb      	b.n	800569a <_dtoa_r+0x6c2>
 8005702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005704:	2a00      	cmp	r2, #0
 8005706:	f000 80cd 	beq.w	80058a4 <_dtoa_r+0x8cc>
 800570a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800570c:	2a01      	cmp	r2, #1
 800570e:	f300 80af 	bgt.w	8005870 <_dtoa_r+0x898>
 8005712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005714:	2a00      	cmp	r2, #0
 8005716:	f000 80a7 	beq.w	8005868 <_dtoa_r+0x890>
 800571a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800571e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005720:	9f06      	ldr	r7, [sp, #24]
 8005722:	9a06      	ldr	r2, [sp, #24]
 8005724:	2101      	movs	r1, #1
 8005726:	441a      	add	r2, r3
 8005728:	9206      	str	r2, [sp, #24]
 800572a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572c:	4628      	mov	r0, r5
 800572e:	441a      	add	r2, r3
 8005730:	9209      	str	r2, [sp, #36]	; 0x24
 8005732:	f000 fd81 	bl	8006238 <__i2b>
 8005736:	4606      	mov	r6, r0
 8005738:	2f00      	cmp	r7, #0
 800573a:	dd0c      	ble.n	8005756 <_dtoa_r+0x77e>
 800573c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	dd09      	ble.n	8005756 <_dtoa_r+0x77e>
 8005742:	42bb      	cmp	r3, r7
 8005744:	bfa8      	it	ge
 8005746:	463b      	movge	r3, r7
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	1aff      	subs	r7, r7, r3
 800574c:	1ad2      	subs	r2, r2, r3
 800574e:	9206      	str	r2, [sp, #24]
 8005750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	9309      	str	r3, [sp, #36]	; 0x24
 8005756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005758:	b1f3      	cbz	r3, 8005798 <_dtoa_r+0x7c0>
 800575a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80a9 	beq.w	80058b4 <_dtoa_r+0x8dc>
 8005762:	2c00      	cmp	r4, #0
 8005764:	dd10      	ble.n	8005788 <_dtoa_r+0x7b0>
 8005766:	4631      	mov	r1, r6
 8005768:	4622      	mov	r2, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 fe1e 	bl	80063ac <__pow5mult>
 8005770:	4652      	mov	r2, sl
 8005772:	4601      	mov	r1, r0
 8005774:	4606      	mov	r6, r0
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fd74 	bl	8006264 <__multiply>
 800577c:	4680      	mov	r8, r0
 800577e:	4651      	mov	r1, sl
 8005780:	4628      	mov	r0, r5
 8005782:	f000 fc9f 	bl	80060c4 <_Bfree>
 8005786:	46c2      	mov	sl, r8
 8005788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578a:	1b1a      	subs	r2, r3, r4
 800578c:	d004      	beq.n	8005798 <_dtoa_r+0x7c0>
 800578e:	4651      	mov	r1, sl
 8005790:	4628      	mov	r0, r5
 8005792:	f000 fe0b 	bl	80063ac <__pow5mult>
 8005796:	4682      	mov	sl, r0
 8005798:	2101      	movs	r1, #1
 800579a:	4628      	mov	r0, r5
 800579c:	f000 fd4c 	bl	8006238 <__i2b>
 80057a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a2:	4604      	mov	r4, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f340 8087 	ble.w	80058b8 <_dtoa_r+0x8e0>
 80057aa:	461a      	mov	r2, r3
 80057ac:	4601      	mov	r1, r0
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 fdfc 	bl	80063ac <__pow5mult>
 80057b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057b6:	4604      	mov	r4, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	f340 8080 	ble.w	80058be <_dtoa_r+0x8e6>
 80057be:	f04f 0800 	mov.w	r8, #0
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c8:	6918      	ldr	r0, [r3, #16]
 80057ca:	f000 fce7 	bl	800619c <__hi0bits>
 80057ce:	f1c0 0020 	rsb	r0, r0, #32
 80057d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d4:	4418      	add	r0, r3
 80057d6:	f010 001f 	ands.w	r0, r0, #31
 80057da:	f000 8092 	beq.w	8005902 <_dtoa_r+0x92a>
 80057de:	f1c0 0320 	rsb	r3, r0, #32
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	f340 808a 	ble.w	80058fc <_dtoa_r+0x924>
 80057e8:	f1c0 001c 	rsb	r0, r0, #28
 80057ec:	9b06      	ldr	r3, [sp, #24]
 80057ee:	4407      	add	r7, r0
 80057f0:	4403      	add	r3, r0
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f6:	4403      	add	r3, r0
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dd05      	ble.n	800580c <_dtoa_r+0x834>
 8005800:	4651      	mov	r1, sl
 8005802:	461a      	mov	r2, r3
 8005804:	4628      	mov	r0, r5
 8005806:	f000 fe2b 	bl	8006460 <__lshift>
 800580a:	4682      	mov	sl, r0
 800580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	dd05      	ble.n	800581e <_dtoa_r+0x846>
 8005812:	4621      	mov	r1, r4
 8005814:	461a      	mov	r2, r3
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fe22 	bl	8006460 <__lshift>
 800581c:	4604      	mov	r4, r0
 800581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d070      	beq.n	8005906 <_dtoa_r+0x92e>
 8005824:	4621      	mov	r1, r4
 8005826:	4650      	mov	r0, sl
 8005828:	f000 fe86 	bl	8006538 <__mcmp>
 800582c:	2800      	cmp	r0, #0
 800582e:	da6a      	bge.n	8005906 <_dtoa_r+0x92e>
 8005830:	2300      	movs	r3, #0
 8005832:	4651      	mov	r1, sl
 8005834:	220a      	movs	r2, #10
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fc66 	bl	8006108 <__multadd>
 800583c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800583e:	4682      	mov	sl, r0
 8005840:	f109 39ff 	add.w	r9, r9, #4294967295
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8193 	beq.w	8005b70 <_dtoa_r+0xb98>
 800584a:	4631      	mov	r1, r6
 800584c:	2300      	movs	r3, #0
 800584e:	220a      	movs	r2, #10
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fc59 	bl	8006108 <__multadd>
 8005856:	f1bb 0f00 	cmp.w	fp, #0
 800585a:	4606      	mov	r6, r0
 800585c:	f300 8093 	bgt.w	8005986 <_dtoa_r+0x9ae>
 8005860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005862:	2b02      	cmp	r3, #2
 8005864:	dc57      	bgt.n	8005916 <_dtoa_r+0x93e>
 8005866:	e08e      	b.n	8005986 <_dtoa_r+0x9ae>
 8005868:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800586a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800586e:	e756      	b.n	800571e <_dtoa_r+0x746>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	1e5c      	subs	r4, r3, #1
 8005874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005876:	42a3      	cmp	r3, r4
 8005878:	bfb7      	itett	lt
 800587a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800587c:	1b1c      	subge	r4, r3, r4
 800587e:	1ae2      	sublt	r2, r4, r3
 8005880:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005882:	bfbe      	ittt	lt
 8005884:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005886:	189b      	addlt	r3, r3, r2
 8005888:	930e      	strlt	r3, [sp, #56]	; 0x38
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	bfb8      	it	lt
 800588e:	2400      	movlt	r4, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfbb      	ittet	lt
 8005894:	9b06      	ldrlt	r3, [sp, #24]
 8005896:	9a02      	ldrlt	r2, [sp, #8]
 8005898:	9f06      	ldrge	r7, [sp, #24]
 800589a:	1a9f      	sublt	r7, r3, r2
 800589c:	bfac      	ite	ge
 800589e:	9b02      	ldrge	r3, [sp, #8]
 80058a0:	2300      	movlt	r3, #0
 80058a2:	e73e      	b.n	8005722 <_dtoa_r+0x74a>
 80058a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058a6:	9f06      	ldr	r7, [sp, #24]
 80058a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058aa:	e745      	b.n	8005738 <_dtoa_r+0x760>
 80058ac:	3fe00000 	.word	0x3fe00000
 80058b0:	40240000 	.word	0x40240000
 80058b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b6:	e76a      	b.n	800578e <_dtoa_r+0x7b6>
 80058b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	dc19      	bgt.n	80058f2 <_dtoa_r+0x91a>
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	b9bb      	cbnz	r3, 80058f2 <_dtoa_r+0x91a>
 80058c2:	9b05      	ldr	r3, [sp, #20]
 80058c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c8:	b99b      	cbnz	r3, 80058f2 <_dtoa_r+0x91a>
 80058ca:	9b05      	ldr	r3, [sp, #20]
 80058cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058d0:	0d1b      	lsrs	r3, r3, #20
 80058d2:	051b      	lsls	r3, r3, #20
 80058d4:	b183      	cbz	r3, 80058f8 <_dtoa_r+0x920>
 80058d6:	f04f 0801 	mov.w	r8, #1
 80058da:	9b06      	ldr	r3, [sp, #24]
 80058dc:	3301      	adds	r3, #1
 80058de:	9306      	str	r3, [sp, #24]
 80058e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e2:	3301      	adds	r3, #1
 80058e4:	9309      	str	r3, [sp, #36]	; 0x24
 80058e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f47f af6a 	bne.w	80057c2 <_dtoa_r+0x7ea>
 80058ee:	2001      	movs	r0, #1
 80058f0:	e76f      	b.n	80057d2 <_dtoa_r+0x7fa>
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	e7f6      	b.n	80058e6 <_dtoa_r+0x90e>
 80058f8:	4698      	mov	r8, r3
 80058fa:	e7f4      	b.n	80058e6 <_dtoa_r+0x90e>
 80058fc:	f43f af7d 	beq.w	80057fa <_dtoa_r+0x822>
 8005900:	4618      	mov	r0, r3
 8005902:	301c      	adds	r0, #28
 8005904:	e772      	b.n	80057ec <_dtoa_r+0x814>
 8005906:	9b02      	ldr	r3, [sp, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	dc36      	bgt.n	800597a <_dtoa_r+0x9a2>
 800590c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800590e:	2b02      	cmp	r3, #2
 8005910:	dd33      	ble.n	800597a <_dtoa_r+0x9a2>
 8005912:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005916:	f1bb 0f00 	cmp.w	fp, #0
 800591a:	d10d      	bne.n	8005938 <_dtoa_r+0x960>
 800591c:	4621      	mov	r1, r4
 800591e:	465b      	mov	r3, fp
 8005920:	2205      	movs	r2, #5
 8005922:	4628      	mov	r0, r5
 8005924:	f000 fbf0 	bl	8006108 <__multadd>
 8005928:	4601      	mov	r1, r0
 800592a:	4604      	mov	r4, r0
 800592c:	4650      	mov	r0, sl
 800592e:	f000 fe03 	bl	8006538 <__mcmp>
 8005932:	2800      	cmp	r0, #0
 8005934:	f73f adb6 	bgt.w	80054a4 <_dtoa_r+0x4cc>
 8005938:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800593a:	9f08      	ldr	r7, [sp, #32]
 800593c:	ea6f 0903 	mvn.w	r9, r3
 8005940:	f04f 0800 	mov.w	r8, #0
 8005944:	4621      	mov	r1, r4
 8005946:	4628      	mov	r0, r5
 8005948:	f000 fbbc 	bl	80060c4 <_Bfree>
 800594c:	2e00      	cmp	r6, #0
 800594e:	f43f aea4 	beq.w	800569a <_dtoa_r+0x6c2>
 8005952:	f1b8 0f00 	cmp.w	r8, #0
 8005956:	d005      	beq.n	8005964 <_dtoa_r+0x98c>
 8005958:	45b0      	cmp	r8, r6
 800595a:	d003      	beq.n	8005964 <_dtoa_r+0x98c>
 800595c:	4641      	mov	r1, r8
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fbb0 	bl	80060c4 <_Bfree>
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fbac 	bl	80060c4 <_Bfree>
 800596c:	e695      	b.n	800569a <_dtoa_r+0x6c2>
 800596e:	2400      	movs	r4, #0
 8005970:	4626      	mov	r6, r4
 8005972:	e7e1      	b.n	8005938 <_dtoa_r+0x960>
 8005974:	46c1      	mov	r9, r8
 8005976:	4626      	mov	r6, r4
 8005978:	e594      	b.n	80054a4 <_dtoa_r+0x4cc>
 800597a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800597c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80fc 	beq.w	8005b7e <_dtoa_r+0xba6>
 8005986:	2f00      	cmp	r7, #0
 8005988:	dd05      	ble.n	8005996 <_dtoa_r+0x9be>
 800598a:	4631      	mov	r1, r6
 800598c:	463a      	mov	r2, r7
 800598e:	4628      	mov	r0, r5
 8005990:	f000 fd66 	bl	8006460 <__lshift>
 8005994:	4606      	mov	r6, r0
 8005996:	f1b8 0f00 	cmp.w	r8, #0
 800599a:	d05c      	beq.n	8005a56 <_dtoa_r+0xa7e>
 800599c:	4628      	mov	r0, r5
 800599e:	6871      	ldr	r1, [r6, #4]
 80059a0:	f000 fb50 	bl	8006044 <_Balloc>
 80059a4:	4607      	mov	r7, r0
 80059a6:	b928      	cbnz	r0, 80059b4 <_dtoa_r+0x9dc>
 80059a8:	4602      	mov	r2, r0
 80059aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059ae:	4b7e      	ldr	r3, [pc, #504]	; (8005ba8 <_dtoa_r+0xbd0>)
 80059b0:	f7ff bb26 	b.w	8005000 <_dtoa_r+0x28>
 80059b4:	6932      	ldr	r2, [r6, #16]
 80059b6:	f106 010c 	add.w	r1, r6, #12
 80059ba:	3202      	adds	r2, #2
 80059bc:	0092      	lsls	r2, r2, #2
 80059be:	300c      	adds	r0, #12
 80059c0:	f000 fb32 	bl	8006028 <memcpy>
 80059c4:	2201      	movs	r2, #1
 80059c6:	4639      	mov	r1, r7
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 fd49 	bl	8006460 <__lshift>
 80059ce:	46b0      	mov	r8, r6
 80059d0:	4606      	mov	r6, r0
 80059d2:	9b08      	ldr	r3, [sp, #32]
 80059d4:	3301      	adds	r3, #1
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	9b08      	ldr	r3, [sp, #32]
 80059da:	445b      	add	r3, fp
 80059dc:	930a      	str	r3, [sp, #40]	; 0x28
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	9b02      	ldr	r3, [sp, #8]
 80059e8:	4621      	mov	r1, r4
 80059ea:	4650      	mov	r0, sl
 80059ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80059f0:	f7ff fa64 	bl	8004ebc <quorem>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4641      	mov	r1, r8
 80059f8:	3330      	adds	r3, #48	; 0x30
 80059fa:	9004      	str	r0, [sp, #16]
 80059fc:	4650      	mov	r0, sl
 80059fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a00:	f000 fd9a 	bl	8006538 <__mcmp>
 8005a04:	4632      	mov	r2, r6
 8005a06:	9006      	str	r0, [sp, #24]
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 fdb0 	bl	8006570 <__mdiff>
 8005a10:	68c2      	ldr	r2, [r0, #12]
 8005a12:	4607      	mov	r7, r0
 8005a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a16:	bb02      	cbnz	r2, 8005a5a <_dtoa_r+0xa82>
 8005a18:	4601      	mov	r1, r0
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	f000 fd8c 	bl	8006538 <__mcmp>
 8005a20:	4602      	mov	r2, r0
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	4639      	mov	r1, r7
 8005a26:	4628      	mov	r0, r5
 8005a28:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a2c:	f000 fb4a 	bl	80060c4 <_Bfree>
 8005a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a34:	9f02      	ldr	r7, [sp, #8]
 8005a36:	ea43 0102 	orr.w	r1, r3, r2
 8005a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a40:	d10d      	bne.n	8005a5e <_dtoa_r+0xa86>
 8005a42:	2b39      	cmp	r3, #57	; 0x39
 8005a44:	d027      	beq.n	8005a96 <_dtoa_r+0xabe>
 8005a46:	9a06      	ldr	r2, [sp, #24]
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	dd01      	ble.n	8005a50 <_dtoa_r+0xa78>
 8005a4c:	9b04      	ldr	r3, [sp, #16]
 8005a4e:	3331      	adds	r3, #49	; 0x31
 8005a50:	f88b 3000 	strb.w	r3, [fp]
 8005a54:	e776      	b.n	8005944 <_dtoa_r+0x96c>
 8005a56:	4630      	mov	r0, r6
 8005a58:	e7b9      	b.n	80059ce <_dtoa_r+0x9f6>
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	e7e2      	b.n	8005a24 <_dtoa_r+0xa4c>
 8005a5e:	9906      	ldr	r1, [sp, #24]
 8005a60:	2900      	cmp	r1, #0
 8005a62:	db04      	blt.n	8005a6e <_dtoa_r+0xa96>
 8005a64:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005a66:	4301      	orrs	r1, r0
 8005a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6a:	4301      	orrs	r1, r0
 8005a6c:	d120      	bne.n	8005ab0 <_dtoa_r+0xad8>
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	ddee      	ble.n	8005a50 <_dtoa_r+0xa78>
 8005a72:	4651      	mov	r1, sl
 8005a74:	2201      	movs	r2, #1
 8005a76:	4628      	mov	r0, r5
 8005a78:	9302      	str	r3, [sp, #8]
 8005a7a:	f000 fcf1 	bl	8006460 <__lshift>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4682      	mov	sl, r0
 8005a82:	f000 fd59 	bl	8006538 <__mcmp>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	9b02      	ldr	r3, [sp, #8]
 8005a8a:	dc02      	bgt.n	8005a92 <_dtoa_r+0xaba>
 8005a8c:	d1e0      	bne.n	8005a50 <_dtoa_r+0xa78>
 8005a8e:	07da      	lsls	r2, r3, #31
 8005a90:	d5de      	bpl.n	8005a50 <_dtoa_r+0xa78>
 8005a92:	2b39      	cmp	r3, #57	; 0x39
 8005a94:	d1da      	bne.n	8005a4c <_dtoa_r+0xa74>
 8005a96:	2339      	movs	r3, #57	; 0x39
 8005a98:	f88b 3000 	strb.w	r3, [fp]
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	2a39      	cmp	r2, #57	; 0x39
 8005aa8:	d050      	beq.n	8005b4c <_dtoa_r+0xb74>
 8005aaa:	3201      	adds	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e749      	b.n	8005944 <_dtoa_r+0x96c>
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	dd03      	ble.n	8005abc <_dtoa_r+0xae4>
 8005ab4:	2b39      	cmp	r3, #57	; 0x39
 8005ab6:	d0ee      	beq.n	8005a96 <_dtoa_r+0xabe>
 8005ab8:	3301      	adds	r3, #1
 8005aba:	e7c9      	b.n	8005a50 <_dtoa_r+0xa78>
 8005abc:	9a02      	ldr	r2, [sp, #8]
 8005abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ac0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d02a      	beq.n	8005b1e <_dtoa_r+0xb46>
 8005ac8:	4651      	mov	r1, sl
 8005aca:	2300      	movs	r3, #0
 8005acc:	220a      	movs	r2, #10
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fb1a 	bl	8006108 <__multadd>
 8005ad4:	45b0      	cmp	r8, r6
 8005ad6:	4682      	mov	sl, r0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f04f 020a 	mov.w	r2, #10
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	d107      	bne.n	8005af6 <_dtoa_r+0xb1e>
 8005ae6:	f000 fb0f 	bl	8006108 <__multadd>
 8005aea:	4680      	mov	r8, r0
 8005aec:	4606      	mov	r6, r0
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	3301      	adds	r3, #1
 8005af2:	9302      	str	r3, [sp, #8]
 8005af4:	e777      	b.n	80059e6 <_dtoa_r+0xa0e>
 8005af6:	f000 fb07 	bl	8006108 <__multadd>
 8005afa:	4631      	mov	r1, r6
 8005afc:	4680      	mov	r8, r0
 8005afe:	2300      	movs	r3, #0
 8005b00:	220a      	movs	r2, #10
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fb00 	bl	8006108 <__multadd>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	e7f0      	b.n	8005aee <_dtoa_r+0xb16>
 8005b0c:	f1bb 0f00 	cmp.w	fp, #0
 8005b10:	bfcc      	ite	gt
 8005b12:	465f      	movgt	r7, fp
 8005b14:	2701      	movle	r7, #1
 8005b16:	f04f 0800 	mov.w	r8, #0
 8005b1a:	9a08      	ldr	r2, [sp, #32]
 8005b1c:	4417      	add	r7, r2
 8005b1e:	4651      	mov	r1, sl
 8005b20:	2201      	movs	r2, #1
 8005b22:	4628      	mov	r0, r5
 8005b24:	9302      	str	r3, [sp, #8]
 8005b26:	f000 fc9b 	bl	8006460 <__lshift>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	f000 fd03 	bl	8006538 <__mcmp>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	dcb2      	bgt.n	8005a9c <_dtoa_r+0xac4>
 8005b36:	d102      	bne.n	8005b3e <_dtoa_r+0xb66>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d4ae      	bmi.n	8005a9c <_dtoa_r+0xac4>
 8005b3e:	463b      	mov	r3, r7
 8005b40:	461f      	mov	r7, r3
 8005b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b46:	2a30      	cmp	r2, #48	; 0x30
 8005b48:	d0fa      	beq.n	8005b40 <_dtoa_r+0xb68>
 8005b4a:	e6fb      	b.n	8005944 <_dtoa_r+0x96c>
 8005b4c:	9a08      	ldr	r2, [sp, #32]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d1a5      	bne.n	8005a9e <_dtoa_r+0xac6>
 8005b52:	2331      	movs	r3, #49	; 0x31
 8005b54:	f109 0901 	add.w	r9, r9, #1
 8005b58:	7013      	strb	r3, [r2, #0]
 8005b5a:	e6f3      	b.n	8005944 <_dtoa_r+0x96c>
 8005b5c:	4b13      	ldr	r3, [pc, #76]	; (8005bac <_dtoa_r+0xbd4>)
 8005b5e:	f7ff baa7 	b.w	80050b0 <_dtoa_r+0xd8>
 8005b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f47f aa80 	bne.w	800506a <_dtoa_r+0x92>
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <_dtoa_r+0xbd8>)
 8005b6c:	f7ff baa0 	b.w	80050b0 <_dtoa_r+0xd8>
 8005b70:	f1bb 0f00 	cmp.w	fp, #0
 8005b74:	dc03      	bgt.n	8005b7e <_dtoa_r+0xba6>
 8005b76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	f73f aecc 	bgt.w	8005916 <_dtoa_r+0x93e>
 8005b7e:	9f08      	ldr	r7, [sp, #32]
 8005b80:	4621      	mov	r1, r4
 8005b82:	4650      	mov	r0, sl
 8005b84:	f7ff f99a 	bl	8004ebc <quorem>
 8005b88:	9a08      	ldr	r2, [sp, #32]
 8005b8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b8e:	f807 3b01 	strb.w	r3, [r7], #1
 8005b92:	1aba      	subs	r2, r7, r2
 8005b94:	4593      	cmp	fp, r2
 8005b96:	ddb9      	ble.n	8005b0c <_dtoa_r+0xb34>
 8005b98:	4651      	mov	r1, sl
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	220a      	movs	r2, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fab2 	bl	8006108 <__multadd>
 8005ba4:	4682      	mov	sl, r0
 8005ba6:	e7eb      	b.n	8005b80 <_dtoa_r+0xba8>
 8005ba8:	08007240 	.word	0x08007240
 8005bac:	08007098 	.word	0x08007098
 8005bb0:	080071bd 	.word	0x080071bd

08005bb4 <__sflush_r>:
 8005bb4:	898a      	ldrh	r2, [r1, #12]
 8005bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	0710      	lsls	r0, r2, #28
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	d458      	bmi.n	8005c74 <__sflush_r+0xc0>
 8005bc2:	684b      	ldr	r3, [r1, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dc05      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dc02      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d0f9      	beq.n	8005bce <__sflush_r+0x1a>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be0:	682f      	ldr	r7, [r5, #0]
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	d032      	beq.n	8005c4c <__sflush_r+0x98>
 8005be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	075a      	lsls	r2, r3, #29
 8005bec:	d505      	bpl.n	8005bfa <__sflush_r+0x46>
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	1ac0      	subs	r0, r0, r3
 8005bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf4:	b10b      	cbz	r3, 8005bfa <__sflush_r+0x46>
 8005bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bf8:	1ac0      	subs	r0, r0, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c00:	4628      	mov	r0, r5
 8005c02:	6a21      	ldr	r1, [r4, #32]
 8005c04:	47b0      	blx	r6
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	d106      	bne.n	8005c1a <__sflush_r+0x66>
 8005c0c:	6829      	ldr	r1, [r5, #0]
 8005c0e:	291d      	cmp	r1, #29
 8005c10:	d82c      	bhi.n	8005c6c <__sflush_r+0xb8>
 8005c12:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <__sflush_r+0x108>)
 8005c14:	40ca      	lsrs	r2, r1
 8005c16:	07d6      	lsls	r6, r2, #31
 8005c18:	d528      	bpl.n	8005c6c <__sflush_r+0xb8>
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	6062      	str	r2, [r4, #4]
 8005c1e:	6922      	ldr	r2, [r4, #16]
 8005c20:	04d9      	lsls	r1, r3, #19
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	d504      	bpl.n	8005c30 <__sflush_r+0x7c>
 8005c26:	1c42      	adds	r2, r0, #1
 8005c28:	d101      	bne.n	8005c2e <__sflush_r+0x7a>
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	b903      	cbnz	r3, 8005c30 <__sflush_r+0x7c>
 8005c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c32:	602f      	str	r7, [r5, #0]
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d0ca      	beq.n	8005bce <__sflush_r+0x1a>
 8005c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d002      	beq.n	8005c46 <__sflush_r+0x92>
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fd8f 	bl	8006764 <_free_r>
 8005c46:	2000      	movs	r0, #0
 8005c48:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4a:	e7c1      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c4c:	6a21      	ldr	r1, [r4, #32]
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	1c41      	adds	r1, r0, #1
 8005c56:	d1c7      	bne.n	8005be8 <__sflush_r+0x34>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c4      	beq.n	8005be8 <__sflush_r+0x34>
 8005c5e:	2b1d      	cmp	r3, #29
 8005c60:	d001      	beq.n	8005c66 <__sflush_r+0xb2>
 8005c62:	2b16      	cmp	r3, #22
 8005c64:	d101      	bne.n	8005c6a <__sflush_r+0xb6>
 8005c66:	602f      	str	r7, [r5, #0]
 8005c68:	e7b1      	b.n	8005bce <__sflush_r+0x1a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	e7ad      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c74:	690f      	ldr	r7, [r1, #16]
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d0a9      	beq.n	8005bce <__sflush_r+0x1a>
 8005c7a:	0793      	lsls	r3, r2, #30
 8005c7c:	bf18      	it	ne
 8005c7e:	2300      	movne	r3, #0
 8005c80:	680e      	ldr	r6, [r1, #0]
 8005c82:	bf08      	it	eq
 8005c84:	694b      	ldreq	r3, [r1, #20]
 8005c86:	eba6 0807 	sub.w	r8, r6, r7
 8005c8a:	600f      	str	r7, [r1, #0]
 8005c8c:	608b      	str	r3, [r1, #8]
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	dd9c      	ble.n	8005bce <__sflush_r+0x1a>
 8005c94:	4643      	mov	r3, r8
 8005c96:	463a      	mov	r2, r7
 8005c98:	4628      	mov	r0, r5
 8005c9a:	6a21      	ldr	r1, [r4, #32]
 8005c9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c9e:	47b0      	blx	r6
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	dc06      	bgt.n	8005cb2 <__sflush_r+0xfe>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	e78e      	b.n	8005bd0 <__sflush_r+0x1c>
 8005cb2:	4407      	add	r7, r0
 8005cb4:	eba8 0800 	sub.w	r8, r8, r0
 8005cb8:	e7e9      	b.n	8005c8e <__sflush_r+0xda>
 8005cba:	bf00      	nop
 8005cbc:	20400001 	.word	0x20400001

08005cc0 <_fflush_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b913      	cbnz	r3, 8005cd0 <_fflush_r+0x10>
 8005cca:	2500      	movs	r5, #0
 8005ccc:	4628      	mov	r0, r5
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	b118      	cbz	r0, 8005cda <_fflush_r+0x1a>
 8005cd2:	6983      	ldr	r3, [r0, #24]
 8005cd4:	b90b      	cbnz	r3, 8005cda <_fflush_r+0x1a>
 8005cd6:	f000 f887 	bl	8005de8 <__sinit>
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <_fflush_r+0x6c>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d11b      	bne.n	8005d18 <_fflush_r+0x58>
 8005ce0:	686c      	ldr	r4, [r5, #4]
 8005ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ef      	beq.n	8005cca <_fflush_r+0xa>
 8005cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cec:	07d0      	lsls	r0, r2, #31
 8005cee:	d404      	bmi.n	8005cfa <_fflush_r+0x3a>
 8005cf0:	0599      	lsls	r1, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_fflush_r+0x3a>
 8005cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cf6:	f000 f91a 	bl	8005f2e <__retarget_lock_acquire_recursive>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f7ff ff59 	bl	8005bb4 <__sflush_r>
 8005d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d04:	4605      	mov	r5, r0
 8005d06:	07da      	lsls	r2, r3, #31
 8005d08:	d4e0      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	059b      	lsls	r3, r3, #22
 8005d0e:	d4dd      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d12:	f000 f90d 	bl	8005f30 <__retarget_lock_release_recursive>
 8005d16:	e7d9      	b.n	8005ccc <_fflush_r+0xc>
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <_fflush_r+0x70>)
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	d101      	bne.n	8005d22 <_fflush_r+0x62>
 8005d1e:	68ac      	ldr	r4, [r5, #8]
 8005d20:	e7df      	b.n	8005ce2 <_fflush_r+0x22>
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <_fflush_r+0x74>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	bf08      	it	eq
 8005d28:	68ec      	ldreq	r4, [r5, #12]
 8005d2a:	e7da      	b.n	8005ce2 <_fflush_r+0x22>
 8005d2c:	08007274 	.word	0x08007274
 8005d30:	08007294 	.word	0x08007294
 8005d34:	08007254 	.word	0x08007254

08005d38 <std>:
 8005d38:	2300      	movs	r3, #0
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d46:	6083      	str	r3, [r0, #8]
 8005d48:	8181      	strh	r1, [r0, #12]
 8005d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d4c:	81c2      	strh	r2, [r0, #14]
 8005d4e:	6183      	str	r3, [r0, #24]
 8005d50:	4619      	mov	r1, r3
 8005d52:	2208      	movs	r2, #8
 8005d54:	305c      	adds	r0, #92	; 0x5c
 8005d56:	f7fe fa6b 	bl	8004230 <memset>
 8005d5a:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <std+0x38>)
 8005d5c:	6224      	str	r4, [r4, #32]
 8005d5e:	6263      	str	r3, [r4, #36]	; 0x24
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <std+0x3c>)
 8005d62:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <std+0x40>)
 8005d66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <std+0x44>)
 8005d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	bf00      	nop
 8005d70:	08006b81 	.word	0x08006b81
 8005d74:	08006ba3 	.word	0x08006ba3
 8005d78:	08006bdb 	.word	0x08006bdb
 8005d7c:	08006bff 	.word	0x08006bff

08005d80 <_cleanup_r>:
 8005d80:	4901      	ldr	r1, [pc, #4]	; (8005d88 <_cleanup_r+0x8>)
 8005d82:	f000 b8af 	b.w	8005ee4 <_fwalk_reent>
 8005d86:	bf00      	nop
 8005d88:	08005cc1 	.word	0x08005cc1

08005d8c <__sfmoreglue>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	2568      	movs	r5, #104	; 0x68
 8005d90:	1e4a      	subs	r2, r1, #1
 8005d92:	4355      	muls	r5, r2
 8005d94:	460e      	mov	r6, r1
 8005d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d9a:	f000 fd2f 	bl	80067fc <_malloc_r>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	b140      	cbz	r0, 8005db4 <__sfmoreglue+0x28>
 8005da2:	2100      	movs	r1, #0
 8005da4:	e9c0 1600 	strd	r1, r6, [r0]
 8005da8:	300c      	adds	r0, #12
 8005daa:	60a0      	str	r0, [r4, #8]
 8005dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db0:	f7fe fa3e 	bl	8004230 <memset>
 8005db4:	4620      	mov	r0, r4
 8005db6:	bd70      	pop	{r4, r5, r6, pc}

08005db8 <__sfp_lock_acquire>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__sfp_lock_acquire+0x8>)
 8005dba:	f000 b8b8 	b.w	8005f2e <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20000370 	.word	0x20000370

08005dc4 <__sfp_lock_release>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__sfp_lock_release+0x8>)
 8005dc6:	f000 b8b3 	b.w	8005f30 <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000370 	.word	0x20000370

08005dd0 <__sinit_lock_acquire>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__sinit_lock_acquire+0x8>)
 8005dd2:	f000 b8ac 	b.w	8005f2e <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	2000036b 	.word	0x2000036b

08005ddc <__sinit_lock_release>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__sinit_lock_release+0x8>)
 8005dde:	f000 b8a7 	b.w	8005f30 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	2000036b 	.word	0x2000036b

08005de8 <__sinit>:
 8005de8:	b510      	push	{r4, lr}
 8005dea:	4604      	mov	r4, r0
 8005dec:	f7ff fff0 	bl	8005dd0 <__sinit_lock_acquire>
 8005df0:	69a3      	ldr	r3, [r4, #24]
 8005df2:	b11b      	cbz	r3, 8005dfc <__sinit+0x14>
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f7ff bff0 	b.w	8005ddc <__sinit_lock_release>
 8005dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e00:	6523      	str	r3, [r4, #80]	; 0x50
 8005e02:	4b13      	ldr	r3, [pc, #76]	; (8005e50 <__sinit+0x68>)
 8005e04:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <__sinit+0x6c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	bf08      	it	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	4620      	mov	r0, r4
 8005e12:	bf08      	it	eq
 8005e14:	61a3      	streq	r3, [r4, #24]
 8005e16:	f000 f81f 	bl	8005e58 <__sfp>
 8005e1a:	6060      	str	r0, [r4, #4]
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 f81b 	bl	8005e58 <__sfp>
 8005e22:	60a0      	str	r0, [r4, #8]
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 f817 	bl	8005e58 <__sfp>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2104      	movs	r1, #4
 8005e2e:	60e0      	str	r0, [r4, #12]
 8005e30:	6860      	ldr	r0, [r4, #4]
 8005e32:	f7ff ff81 	bl	8005d38 <std>
 8005e36:	2201      	movs	r2, #1
 8005e38:	2109      	movs	r1, #9
 8005e3a:	68a0      	ldr	r0, [r4, #8]
 8005e3c:	f7ff ff7c 	bl	8005d38 <std>
 8005e40:	2202      	movs	r2, #2
 8005e42:	2112      	movs	r1, #18
 8005e44:	68e0      	ldr	r0, [r4, #12]
 8005e46:	f7ff ff77 	bl	8005d38 <std>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	61a3      	str	r3, [r4, #24]
 8005e4e:	e7d1      	b.n	8005df4 <__sinit+0xc>
 8005e50:	08007084 	.word	0x08007084
 8005e54:	08005d81 	.word	0x08005d81

08005e58 <__sfp>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	f7ff ffac 	bl	8005db8 <__sfp_lock_acquire>
 8005e60:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <__sfp+0x84>)
 8005e62:	681e      	ldr	r6, [r3, #0]
 8005e64:	69b3      	ldr	r3, [r6, #24]
 8005e66:	b913      	cbnz	r3, 8005e6e <__sfp+0x16>
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ffbd 	bl	8005de8 <__sinit>
 8005e6e:	3648      	adds	r6, #72	; 0x48
 8005e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	d503      	bpl.n	8005e80 <__sfp+0x28>
 8005e78:	6833      	ldr	r3, [r6, #0]
 8005e7a:	b30b      	cbz	r3, 8005ec0 <__sfp+0x68>
 8005e7c:	6836      	ldr	r6, [r6, #0]
 8005e7e:	e7f7      	b.n	8005e70 <__sfp+0x18>
 8005e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e84:	b9d5      	cbnz	r5, 8005ebc <__sfp+0x64>
 8005e86:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <__sfp+0x88>)
 8005e88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e8c:	60e3      	str	r3, [r4, #12]
 8005e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8005e90:	f000 f84c 	bl	8005f2c <__retarget_lock_init_recursive>
 8005e94:	f7ff ff96 	bl	8005dc4 <__sfp_lock_release>
 8005e98:	2208      	movs	r2, #8
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ea4:	6025      	str	r5, [r4, #0]
 8005ea6:	61a5      	str	r5, [r4, #24]
 8005ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eac:	f7fe f9c0 	bl	8004230 <memset>
 8005eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005eb8:	4620      	mov	r0, r4
 8005eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ebc:	3468      	adds	r4, #104	; 0x68
 8005ebe:	e7d9      	b.n	8005e74 <__sfp+0x1c>
 8005ec0:	2104      	movs	r1, #4
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff ff62 	bl	8005d8c <__sfmoreglue>
 8005ec8:	4604      	mov	r4, r0
 8005eca:	6030      	str	r0, [r6, #0]
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d1d5      	bne.n	8005e7c <__sfp+0x24>
 8005ed0:	f7ff ff78 	bl	8005dc4 <__sfp_lock_release>
 8005ed4:	230c      	movs	r3, #12
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	e7ee      	b.n	8005eb8 <__sfp+0x60>
 8005eda:	bf00      	nop
 8005edc:	08007084 	.word	0x08007084
 8005ee0:	ffff0001 	.word	0xffff0001

08005ee4 <_fwalk_reent>:
 8005ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee8:	4606      	mov	r6, r0
 8005eea:	4688      	mov	r8, r1
 8005eec:	2700      	movs	r7, #0
 8005eee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8005efa:	d505      	bpl.n	8005f08 <_fwalk_reent+0x24>
 8005efc:	6824      	ldr	r4, [r4, #0]
 8005efe:	2c00      	cmp	r4, #0
 8005f00:	d1f7      	bne.n	8005ef2 <_fwalk_reent+0xe>
 8005f02:	4638      	mov	r0, r7
 8005f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f08:	89ab      	ldrh	r3, [r5, #12]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d907      	bls.n	8005f1e <_fwalk_reent+0x3a>
 8005f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f12:	3301      	adds	r3, #1
 8005f14:	d003      	beq.n	8005f1e <_fwalk_reent+0x3a>
 8005f16:	4629      	mov	r1, r5
 8005f18:	4630      	mov	r0, r6
 8005f1a:	47c0      	blx	r8
 8005f1c:	4307      	orrs	r7, r0
 8005f1e:	3568      	adds	r5, #104	; 0x68
 8005f20:	e7e9      	b.n	8005ef6 <_fwalk_reent+0x12>
	...

08005f24 <_localeconv_r>:
 8005f24:	4800      	ldr	r0, [pc, #0]	; (8005f28 <_localeconv_r+0x4>)
 8005f26:	4770      	bx	lr
 8005f28:	20000160 	.word	0x20000160

08005f2c <__retarget_lock_init_recursive>:
 8005f2c:	4770      	bx	lr

08005f2e <__retarget_lock_acquire_recursive>:
 8005f2e:	4770      	bx	lr

08005f30 <__retarget_lock_release_recursive>:
 8005f30:	4770      	bx	lr

08005f32 <__swhatbuf_r>:
 8005f32:	b570      	push	{r4, r5, r6, lr}
 8005f34:	460e      	mov	r6, r1
 8005f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3a:	4614      	mov	r4, r2
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	461d      	mov	r5, r3
 8005f40:	b096      	sub	sp, #88	; 0x58
 8005f42:	da07      	bge.n	8005f54 <__swhatbuf_r+0x22>
 8005f44:	2300      	movs	r3, #0
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	89b3      	ldrh	r3, [r6, #12]
 8005f4a:	061a      	lsls	r2, r3, #24
 8005f4c:	d410      	bmi.n	8005f70 <__swhatbuf_r+0x3e>
 8005f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f52:	e00e      	b.n	8005f72 <__swhatbuf_r+0x40>
 8005f54:	466a      	mov	r2, sp
 8005f56:	f000 fea9 	bl	8006cac <_fstat_r>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	dbf2      	blt.n	8005f44 <__swhatbuf_r+0x12>
 8005f5e:	9a01      	ldr	r2, [sp, #4]
 8005f60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f68:	425a      	negs	r2, r3
 8005f6a:	415a      	adcs	r2, r3
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	e7ee      	b.n	8005f4e <__swhatbuf_r+0x1c>
 8005f70:	2340      	movs	r3, #64	; 0x40
 8005f72:	2000      	movs	r0, #0
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	b016      	add	sp, #88	; 0x58
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f7c <__smakebuf_r>:
 8005f7c:	898b      	ldrh	r3, [r1, #12]
 8005f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f80:	079d      	lsls	r5, r3, #30
 8005f82:	4606      	mov	r6, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	d507      	bpl.n	8005f98 <__smakebuf_r+0x1c>
 8005f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	2301      	movs	r3, #1
 8005f92:	6163      	str	r3, [r4, #20]
 8005f94:	b002      	add	sp, #8
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	466a      	mov	r2, sp
 8005f9a:	ab01      	add	r3, sp, #4
 8005f9c:	f7ff ffc9 	bl	8005f32 <__swhatbuf_r>
 8005fa0:	9900      	ldr	r1, [sp, #0]
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f000 fc29 	bl	80067fc <_malloc_r>
 8005faa:	b948      	cbnz	r0, 8005fc0 <__smakebuf_r+0x44>
 8005fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d4ef      	bmi.n	8005f94 <__smakebuf_r+0x18>
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	f043 0302 	orr.w	r3, r3, #2
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	e7e3      	b.n	8005f88 <__smakebuf_r+0xc>
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <__smakebuf_r+0x7c>)
 8005fc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	6020      	str	r0, [r4, #0]
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	6120      	str	r0, [r4, #16]
 8005fd2:	6163      	str	r3, [r4, #20]
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	b15b      	cbz	r3, 8005ff0 <__smakebuf_r+0x74>
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fde:	f000 fe77 	bl	8006cd0 <_isatty_r>
 8005fe2:	b128      	cbz	r0, 8005ff0 <__smakebuf_r+0x74>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	89a0      	ldrh	r0, [r4, #12]
 8005ff2:	4305      	orrs	r5, r0
 8005ff4:	81a5      	strh	r5, [r4, #12]
 8005ff6:	e7cd      	b.n	8005f94 <__smakebuf_r+0x18>
 8005ff8:	08005d81 	.word	0x08005d81

08005ffc <malloc>:
 8005ffc:	4b02      	ldr	r3, [pc, #8]	; (8006008 <malloc+0xc>)
 8005ffe:	4601      	mov	r1, r0
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f000 bbfb 	b.w	80067fc <_malloc_r>
 8006006:	bf00      	nop
 8006008:	2000000c 	.word	0x2000000c

0800600c <memchr>:
 800600c:	4603      	mov	r3, r0
 800600e:	b510      	push	{r4, lr}
 8006010:	b2c9      	uxtb	r1, r1
 8006012:	4402      	add	r2, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	4618      	mov	r0, r3
 8006018:	d101      	bne.n	800601e <memchr+0x12>
 800601a:	2000      	movs	r0, #0
 800601c:	e003      	b.n	8006026 <memchr+0x1a>
 800601e:	7804      	ldrb	r4, [r0, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	428c      	cmp	r4, r1
 8006024:	d1f6      	bne.n	8006014 <memchr+0x8>
 8006026:	bd10      	pop	{r4, pc}

08006028 <memcpy>:
 8006028:	440a      	add	r2, r1
 800602a:	4291      	cmp	r1, r2
 800602c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006030:	d100      	bne.n	8006034 <memcpy+0xc>
 8006032:	4770      	bx	lr
 8006034:	b510      	push	{r4, lr}
 8006036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800603a:	4291      	cmp	r1, r2
 800603c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006040:	d1f9      	bne.n	8006036 <memcpy+0xe>
 8006042:	bd10      	pop	{r4, pc}

08006044 <_Balloc>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006048:	4604      	mov	r4, r0
 800604a:	460d      	mov	r5, r1
 800604c:	b976      	cbnz	r6, 800606c <_Balloc+0x28>
 800604e:	2010      	movs	r0, #16
 8006050:	f7ff ffd4 	bl	8005ffc <malloc>
 8006054:	4602      	mov	r2, r0
 8006056:	6260      	str	r0, [r4, #36]	; 0x24
 8006058:	b920      	cbnz	r0, 8006064 <_Balloc+0x20>
 800605a:	2166      	movs	r1, #102	; 0x66
 800605c:	4b17      	ldr	r3, [pc, #92]	; (80060bc <_Balloc+0x78>)
 800605e:	4818      	ldr	r0, [pc, #96]	; (80060c0 <_Balloc+0x7c>)
 8006060:	f000 fde4 	bl	8006c2c <__assert_func>
 8006064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006068:	6006      	str	r6, [r0, #0]
 800606a:	60c6      	str	r6, [r0, #12]
 800606c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800606e:	68f3      	ldr	r3, [r6, #12]
 8006070:	b183      	cbz	r3, 8006094 <_Balloc+0x50>
 8006072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800607a:	b9b8      	cbnz	r0, 80060ac <_Balloc+0x68>
 800607c:	2101      	movs	r1, #1
 800607e:	fa01 f605 	lsl.w	r6, r1, r5
 8006082:	1d72      	adds	r2, r6, #5
 8006084:	4620      	mov	r0, r4
 8006086:	0092      	lsls	r2, r2, #2
 8006088:	f000 fb5e 	bl	8006748 <_calloc_r>
 800608c:	b160      	cbz	r0, 80060a8 <_Balloc+0x64>
 800608e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006092:	e00e      	b.n	80060b2 <_Balloc+0x6e>
 8006094:	2221      	movs	r2, #33	; 0x21
 8006096:	2104      	movs	r1, #4
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fb55 	bl	8006748 <_calloc_r>
 800609e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a0:	60f0      	str	r0, [r6, #12]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e4      	bne.n	8006072 <_Balloc+0x2e>
 80060a8:	2000      	movs	r0, #0
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	6802      	ldr	r2, [r0, #0]
 80060ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060b2:	2300      	movs	r3, #0
 80060b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060b8:	e7f7      	b.n	80060aa <_Balloc+0x66>
 80060ba:	bf00      	nop
 80060bc:	080071ca 	.word	0x080071ca
 80060c0:	080072b4 	.word	0x080072b4

080060c4 <_Bfree>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060c8:	4605      	mov	r5, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	b976      	cbnz	r6, 80060ec <_Bfree+0x28>
 80060ce:	2010      	movs	r0, #16
 80060d0:	f7ff ff94 	bl	8005ffc <malloc>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6268      	str	r0, [r5, #36]	; 0x24
 80060d8:	b920      	cbnz	r0, 80060e4 <_Bfree+0x20>
 80060da:	218a      	movs	r1, #138	; 0x8a
 80060dc:	4b08      	ldr	r3, [pc, #32]	; (8006100 <_Bfree+0x3c>)
 80060de:	4809      	ldr	r0, [pc, #36]	; (8006104 <_Bfree+0x40>)
 80060e0:	f000 fda4 	bl	8006c2c <__assert_func>
 80060e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060e8:	6006      	str	r6, [r0, #0]
 80060ea:	60c6      	str	r6, [r0, #12]
 80060ec:	b13c      	cbz	r4, 80060fe <_Bfree+0x3a>
 80060ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060f0:	6862      	ldr	r2, [r4, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060f8:	6021      	str	r1, [r4, #0]
 80060fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	080071ca 	.word	0x080071ca
 8006104:	080072b4 	.word	0x080072b4

08006108 <__multadd>:
 8006108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	4698      	mov	r8, r3
 800610e:	460c      	mov	r4, r1
 8006110:	2300      	movs	r3, #0
 8006112:	690e      	ldr	r6, [r1, #16]
 8006114:	4607      	mov	r7, r0
 8006116:	f101 0014 	add.w	r0, r1, #20
 800611a:	6805      	ldr	r5, [r0, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	b2a9      	uxth	r1, r5
 8006120:	fb02 8101 	mla	r1, r2, r1, r8
 8006124:	0c2d      	lsrs	r5, r5, #16
 8006126:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800612a:	fb02 c505 	mla	r5, r2, r5, ip
 800612e:	b289      	uxth	r1, r1
 8006130:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006134:	429e      	cmp	r6, r3
 8006136:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800613a:	f840 1b04 	str.w	r1, [r0], #4
 800613e:	dcec      	bgt.n	800611a <__multadd+0x12>
 8006140:	f1b8 0f00 	cmp.w	r8, #0
 8006144:	d022      	beq.n	800618c <__multadd+0x84>
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	42b3      	cmp	r3, r6
 800614a:	dc19      	bgt.n	8006180 <__multadd+0x78>
 800614c:	6861      	ldr	r1, [r4, #4]
 800614e:	4638      	mov	r0, r7
 8006150:	3101      	adds	r1, #1
 8006152:	f7ff ff77 	bl	8006044 <_Balloc>
 8006156:	4605      	mov	r5, r0
 8006158:	b928      	cbnz	r0, 8006166 <__multadd+0x5e>
 800615a:	4602      	mov	r2, r0
 800615c:	21b5      	movs	r1, #181	; 0xb5
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <__multadd+0x8c>)
 8006160:	480d      	ldr	r0, [pc, #52]	; (8006198 <__multadd+0x90>)
 8006162:	f000 fd63 	bl	8006c2c <__assert_func>
 8006166:	6922      	ldr	r2, [r4, #16]
 8006168:	f104 010c 	add.w	r1, r4, #12
 800616c:	3202      	adds	r2, #2
 800616e:	0092      	lsls	r2, r2, #2
 8006170:	300c      	adds	r0, #12
 8006172:	f7ff ff59 	bl	8006028 <memcpy>
 8006176:	4621      	mov	r1, r4
 8006178:	4638      	mov	r0, r7
 800617a:	f7ff ffa3 	bl	80060c4 <_Bfree>
 800617e:	462c      	mov	r4, r5
 8006180:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006184:	3601      	adds	r6, #1
 8006186:	f8c3 8014 	str.w	r8, [r3, #20]
 800618a:	6126      	str	r6, [r4, #16]
 800618c:	4620      	mov	r0, r4
 800618e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006192:	bf00      	nop
 8006194:	08007240 	.word	0x08007240
 8006198:	080072b4 	.word	0x080072b4

0800619c <__hi0bits>:
 800619c:	0c02      	lsrs	r2, r0, #16
 800619e:	0412      	lsls	r2, r2, #16
 80061a0:	4603      	mov	r3, r0
 80061a2:	b9ca      	cbnz	r2, 80061d8 <__hi0bits+0x3c>
 80061a4:	0403      	lsls	r3, r0, #16
 80061a6:	2010      	movs	r0, #16
 80061a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061ac:	bf04      	itt	eq
 80061ae:	021b      	lsleq	r3, r3, #8
 80061b0:	3008      	addeq	r0, #8
 80061b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061b6:	bf04      	itt	eq
 80061b8:	011b      	lsleq	r3, r3, #4
 80061ba:	3004      	addeq	r0, #4
 80061bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061c0:	bf04      	itt	eq
 80061c2:	009b      	lsleq	r3, r3, #2
 80061c4:	3002      	addeq	r0, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	db05      	blt.n	80061d6 <__hi0bits+0x3a>
 80061ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061ce:	f100 0001 	add.w	r0, r0, #1
 80061d2:	bf08      	it	eq
 80061d4:	2020      	moveq	r0, #32
 80061d6:	4770      	bx	lr
 80061d8:	2000      	movs	r0, #0
 80061da:	e7e5      	b.n	80061a8 <__hi0bits+0xc>

080061dc <__lo0bits>:
 80061dc:	6803      	ldr	r3, [r0, #0]
 80061de:	4602      	mov	r2, r0
 80061e0:	f013 0007 	ands.w	r0, r3, #7
 80061e4:	d00b      	beq.n	80061fe <__lo0bits+0x22>
 80061e6:	07d9      	lsls	r1, r3, #31
 80061e8:	d422      	bmi.n	8006230 <__lo0bits+0x54>
 80061ea:	0798      	lsls	r0, r3, #30
 80061ec:	bf49      	itett	mi
 80061ee:	085b      	lsrmi	r3, r3, #1
 80061f0:	089b      	lsrpl	r3, r3, #2
 80061f2:	2001      	movmi	r0, #1
 80061f4:	6013      	strmi	r3, [r2, #0]
 80061f6:	bf5c      	itt	pl
 80061f8:	2002      	movpl	r0, #2
 80061fa:	6013      	strpl	r3, [r2, #0]
 80061fc:	4770      	bx	lr
 80061fe:	b299      	uxth	r1, r3
 8006200:	b909      	cbnz	r1, 8006206 <__lo0bits+0x2a>
 8006202:	2010      	movs	r0, #16
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	f013 0fff 	tst.w	r3, #255	; 0xff
 800620a:	bf04      	itt	eq
 800620c:	0a1b      	lsreq	r3, r3, #8
 800620e:	3008      	addeq	r0, #8
 8006210:	0719      	lsls	r1, r3, #28
 8006212:	bf04      	itt	eq
 8006214:	091b      	lsreq	r3, r3, #4
 8006216:	3004      	addeq	r0, #4
 8006218:	0799      	lsls	r1, r3, #30
 800621a:	bf04      	itt	eq
 800621c:	089b      	lsreq	r3, r3, #2
 800621e:	3002      	addeq	r0, #2
 8006220:	07d9      	lsls	r1, r3, #31
 8006222:	d403      	bmi.n	800622c <__lo0bits+0x50>
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	f100 0001 	add.w	r0, r0, #1
 800622a:	d003      	beq.n	8006234 <__lo0bits+0x58>
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	4770      	bx	lr
 8006230:	2000      	movs	r0, #0
 8006232:	4770      	bx	lr
 8006234:	2020      	movs	r0, #32
 8006236:	4770      	bx	lr

08006238 <__i2b>:
 8006238:	b510      	push	{r4, lr}
 800623a:	460c      	mov	r4, r1
 800623c:	2101      	movs	r1, #1
 800623e:	f7ff ff01 	bl	8006044 <_Balloc>
 8006242:	4602      	mov	r2, r0
 8006244:	b928      	cbnz	r0, 8006252 <__i2b+0x1a>
 8006246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800624a:	4b04      	ldr	r3, [pc, #16]	; (800625c <__i2b+0x24>)
 800624c:	4804      	ldr	r0, [pc, #16]	; (8006260 <__i2b+0x28>)
 800624e:	f000 fced 	bl	8006c2c <__assert_func>
 8006252:	2301      	movs	r3, #1
 8006254:	6144      	str	r4, [r0, #20]
 8006256:	6103      	str	r3, [r0, #16]
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	08007240 	.word	0x08007240
 8006260:	080072b4 	.word	0x080072b4

08006264 <__multiply>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	4614      	mov	r4, r2
 800626a:	690a      	ldr	r2, [r1, #16]
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	460d      	mov	r5, r1
 8006270:	429a      	cmp	r2, r3
 8006272:	bfbe      	ittt	lt
 8006274:	460b      	movlt	r3, r1
 8006276:	4625      	movlt	r5, r4
 8006278:	461c      	movlt	r4, r3
 800627a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800627e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006282:	68ab      	ldr	r3, [r5, #8]
 8006284:	6869      	ldr	r1, [r5, #4]
 8006286:	eb0a 0709 	add.w	r7, sl, r9
 800628a:	42bb      	cmp	r3, r7
 800628c:	b085      	sub	sp, #20
 800628e:	bfb8      	it	lt
 8006290:	3101      	addlt	r1, #1
 8006292:	f7ff fed7 	bl	8006044 <_Balloc>
 8006296:	b930      	cbnz	r0, 80062a6 <__multiply+0x42>
 8006298:	4602      	mov	r2, r0
 800629a:	f240 115d 	movw	r1, #349	; 0x15d
 800629e:	4b41      	ldr	r3, [pc, #260]	; (80063a4 <__multiply+0x140>)
 80062a0:	4841      	ldr	r0, [pc, #260]	; (80063a8 <__multiply+0x144>)
 80062a2:	f000 fcc3 	bl	8006c2c <__assert_func>
 80062a6:	f100 0614 	add.w	r6, r0, #20
 80062aa:	4633      	mov	r3, r6
 80062ac:	2200      	movs	r2, #0
 80062ae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80062b2:	4543      	cmp	r3, r8
 80062b4:	d31e      	bcc.n	80062f4 <__multiply+0x90>
 80062b6:	f105 0c14 	add.w	ip, r5, #20
 80062ba:	f104 0314 	add.w	r3, r4, #20
 80062be:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80062c2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80062c6:	9202      	str	r2, [sp, #8]
 80062c8:	ebac 0205 	sub.w	r2, ip, r5
 80062cc:	3a15      	subs	r2, #21
 80062ce:	f022 0203 	bic.w	r2, r2, #3
 80062d2:	3204      	adds	r2, #4
 80062d4:	f105 0115 	add.w	r1, r5, #21
 80062d8:	458c      	cmp	ip, r1
 80062da:	bf38      	it	cc
 80062dc:	2204      	movcc	r2, #4
 80062de:	9201      	str	r2, [sp, #4]
 80062e0:	9a02      	ldr	r2, [sp, #8]
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d808      	bhi.n	80062fa <__multiply+0x96>
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	dc55      	bgt.n	8006398 <__multiply+0x134>
 80062ec:	6107      	str	r7, [r0, #16]
 80062ee:	b005      	add	sp, #20
 80062f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f4:	f843 2b04 	str.w	r2, [r3], #4
 80062f8:	e7db      	b.n	80062b2 <__multiply+0x4e>
 80062fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80062fe:	f1ba 0f00 	cmp.w	sl, #0
 8006302:	d020      	beq.n	8006346 <__multiply+0xe2>
 8006304:	46b1      	mov	r9, r6
 8006306:	2200      	movs	r2, #0
 8006308:	f105 0e14 	add.w	lr, r5, #20
 800630c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006310:	f8d9 b000 	ldr.w	fp, [r9]
 8006314:	b2a1      	uxth	r1, r4
 8006316:	fa1f fb8b 	uxth.w	fp, fp
 800631a:	fb0a b101 	mla	r1, sl, r1, fp
 800631e:	4411      	add	r1, r2
 8006320:	f8d9 2000 	ldr.w	r2, [r9]
 8006324:	0c24      	lsrs	r4, r4, #16
 8006326:	0c12      	lsrs	r2, r2, #16
 8006328:	fb0a 2404 	mla	r4, sl, r4, r2
 800632c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006330:	b289      	uxth	r1, r1
 8006332:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006336:	45f4      	cmp	ip, lr
 8006338:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800633c:	f849 1b04 	str.w	r1, [r9], #4
 8006340:	d8e4      	bhi.n	800630c <__multiply+0xa8>
 8006342:	9901      	ldr	r1, [sp, #4]
 8006344:	5072      	str	r2, [r6, r1]
 8006346:	9a03      	ldr	r2, [sp, #12]
 8006348:	3304      	adds	r3, #4
 800634a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800634e:	f1b9 0f00 	cmp.w	r9, #0
 8006352:	d01f      	beq.n	8006394 <__multiply+0x130>
 8006354:	46b6      	mov	lr, r6
 8006356:	f04f 0a00 	mov.w	sl, #0
 800635a:	6834      	ldr	r4, [r6, #0]
 800635c:	f105 0114 	add.w	r1, r5, #20
 8006360:	880a      	ldrh	r2, [r1, #0]
 8006362:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006366:	b2a4      	uxth	r4, r4
 8006368:	fb09 b202 	mla	r2, r9, r2, fp
 800636c:	4492      	add	sl, r2
 800636e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006372:	f84e 4b04 	str.w	r4, [lr], #4
 8006376:	f851 4b04 	ldr.w	r4, [r1], #4
 800637a:	f8be 2000 	ldrh.w	r2, [lr]
 800637e:	0c24      	lsrs	r4, r4, #16
 8006380:	fb09 2404 	mla	r4, r9, r4, r2
 8006384:	458c      	cmp	ip, r1
 8006386:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800638a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800638e:	d8e7      	bhi.n	8006360 <__multiply+0xfc>
 8006390:	9a01      	ldr	r2, [sp, #4]
 8006392:	50b4      	str	r4, [r6, r2]
 8006394:	3604      	adds	r6, #4
 8006396:	e7a3      	b.n	80062e0 <__multiply+0x7c>
 8006398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1a5      	bne.n	80062ec <__multiply+0x88>
 80063a0:	3f01      	subs	r7, #1
 80063a2:	e7a1      	b.n	80062e8 <__multiply+0x84>
 80063a4:	08007240 	.word	0x08007240
 80063a8:	080072b4 	.word	0x080072b4

080063ac <__pow5mult>:
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b0:	4615      	mov	r5, r2
 80063b2:	f012 0203 	ands.w	r2, r2, #3
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	d007      	beq.n	80063cc <__pow5mult+0x20>
 80063bc:	4c25      	ldr	r4, [pc, #148]	; (8006454 <__pow5mult+0xa8>)
 80063be:	3a01      	subs	r2, #1
 80063c0:	2300      	movs	r3, #0
 80063c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063c6:	f7ff fe9f 	bl	8006108 <__multadd>
 80063ca:	4607      	mov	r7, r0
 80063cc:	10ad      	asrs	r5, r5, #2
 80063ce:	d03d      	beq.n	800644c <__pow5mult+0xa0>
 80063d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063d2:	b97c      	cbnz	r4, 80063f4 <__pow5mult+0x48>
 80063d4:	2010      	movs	r0, #16
 80063d6:	f7ff fe11 	bl	8005ffc <malloc>
 80063da:	4602      	mov	r2, r0
 80063dc:	6270      	str	r0, [r6, #36]	; 0x24
 80063de:	b928      	cbnz	r0, 80063ec <__pow5mult+0x40>
 80063e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80063e4:	4b1c      	ldr	r3, [pc, #112]	; (8006458 <__pow5mult+0xac>)
 80063e6:	481d      	ldr	r0, [pc, #116]	; (800645c <__pow5mult+0xb0>)
 80063e8:	f000 fc20 	bl	8006c2c <__assert_func>
 80063ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063f0:	6004      	str	r4, [r0, #0]
 80063f2:	60c4      	str	r4, [r0, #12]
 80063f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063fc:	b94c      	cbnz	r4, 8006412 <__pow5mult+0x66>
 80063fe:	f240 2171 	movw	r1, #625	; 0x271
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ff18 	bl	8006238 <__i2b>
 8006408:	2300      	movs	r3, #0
 800640a:	4604      	mov	r4, r0
 800640c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	f04f 0900 	mov.w	r9, #0
 8006416:	07eb      	lsls	r3, r5, #31
 8006418:	d50a      	bpl.n	8006430 <__pow5mult+0x84>
 800641a:	4639      	mov	r1, r7
 800641c:	4622      	mov	r2, r4
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ff20 	bl	8006264 <__multiply>
 8006424:	4680      	mov	r8, r0
 8006426:	4639      	mov	r1, r7
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff fe4b 	bl	80060c4 <_Bfree>
 800642e:	4647      	mov	r7, r8
 8006430:	106d      	asrs	r5, r5, #1
 8006432:	d00b      	beq.n	800644c <__pow5mult+0xa0>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	b938      	cbnz	r0, 8006448 <__pow5mult+0x9c>
 8006438:	4622      	mov	r2, r4
 800643a:	4621      	mov	r1, r4
 800643c:	4630      	mov	r0, r6
 800643e:	f7ff ff11 	bl	8006264 <__multiply>
 8006442:	6020      	str	r0, [r4, #0]
 8006444:	f8c0 9000 	str.w	r9, [r0]
 8006448:	4604      	mov	r4, r0
 800644a:	e7e4      	b.n	8006416 <__pow5mult+0x6a>
 800644c:	4638      	mov	r0, r7
 800644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006452:	bf00      	nop
 8006454:	08007408 	.word	0x08007408
 8006458:	080071ca 	.word	0x080071ca
 800645c:	080072b4 	.word	0x080072b4

08006460 <__lshift>:
 8006460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	460c      	mov	r4, r1
 8006466:	4607      	mov	r7, r0
 8006468:	4691      	mov	r9, r2
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6849      	ldr	r1, [r1, #4]
 800646e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006478:	f108 0601 	add.w	r6, r8, #1
 800647c:	42b3      	cmp	r3, r6
 800647e:	db0b      	blt.n	8006498 <__lshift+0x38>
 8006480:	4638      	mov	r0, r7
 8006482:	f7ff fddf 	bl	8006044 <_Balloc>
 8006486:	4605      	mov	r5, r0
 8006488:	b948      	cbnz	r0, 800649e <__lshift+0x3e>
 800648a:	4602      	mov	r2, r0
 800648c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006490:	4b27      	ldr	r3, [pc, #156]	; (8006530 <__lshift+0xd0>)
 8006492:	4828      	ldr	r0, [pc, #160]	; (8006534 <__lshift+0xd4>)
 8006494:	f000 fbca 	bl	8006c2c <__assert_func>
 8006498:	3101      	adds	r1, #1
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	e7ee      	b.n	800647c <__lshift+0x1c>
 800649e:	2300      	movs	r3, #0
 80064a0:	f100 0114 	add.w	r1, r0, #20
 80064a4:	f100 0210 	add.w	r2, r0, #16
 80064a8:	4618      	mov	r0, r3
 80064aa:	4553      	cmp	r3, sl
 80064ac:	db33      	blt.n	8006516 <__lshift+0xb6>
 80064ae:	6920      	ldr	r0, [r4, #16]
 80064b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064b4:	f104 0314 	add.w	r3, r4, #20
 80064b8:	f019 091f 	ands.w	r9, r9, #31
 80064bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064c4:	d02b      	beq.n	800651e <__lshift+0xbe>
 80064c6:	468a      	mov	sl, r1
 80064c8:	2200      	movs	r2, #0
 80064ca:	f1c9 0e20 	rsb	lr, r9, #32
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	fa00 f009 	lsl.w	r0, r0, r9
 80064d4:	4302      	orrs	r2, r0
 80064d6:	f84a 2b04 	str.w	r2, [sl], #4
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	459c      	cmp	ip, r3
 80064e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80064e4:	d8f3      	bhi.n	80064ce <__lshift+0x6e>
 80064e6:	ebac 0304 	sub.w	r3, ip, r4
 80064ea:	3b15      	subs	r3, #21
 80064ec:	f023 0303 	bic.w	r3, r3, #3
 80064f0:	3304      	adds	r3, #4
 80064f2:	f104 0015 	add.w	r0, r4, #21
 80064f6:	4584      	cmp	ip, r0
 80064f8:	bf38      	it	cc
 80064fa:	2304      	movcc	r3, #4
 80064fc:	50ca      	str	r2, [r1, r3]
 80064fe:	b10a      	cbz	r2, 8006504 <__lshift+0xa4>
 8006500:	f108 0602 	add.w	r6, r8, #2
 8006504:	3e01      	subs	r6, #1
 8006506:	4638      	mov	r0, r7
 8006508:	4621      	mov	r1, r4
 800650a:	612e      	str	r6, [r5, #16]
 800650c:	f7ff fdda 	bl	80060c4 <_Bfree>
 8006510:	4628      	mov	r0, r5
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006516:	f842 0f04 	str.w	r0, [r2, #4]!
 800651a:	3301      	adds	r3, #1
 800651c:	e7c5      	b.n	80064aa <__lshift+0x4a>
 800651e:	3904      	subs	r1, #4
 8006520:	f853 2b04 	ldr.w	r2, [r3], #4
 8006524:	459c      	cmp	ip, r3
 8006526:	f841 2f04 	str.w	r2, [r1, #4]!
 800652a:	d8f9      	bhi.n	8006520 <__lshift+0xc0>
 800652c:	e7ea      	b.n	8006504 <__lshift+0xa4>
 800652e:	bf00      	nop
 8006530:	08007240 	.word	0x08007240
 8006534:	080072b4 	.word	0x080072b4

08006538 <__mcmp>:
 8006538:	4603      	mov	r3, r0
 800653a:	690a      	ldr	r2, [r1, #16]
 800653c:	6900      	ldr	r0, [r0, #16]
 800653e:	b530      	push	{r4, r5, lr}
 8006540:	1a80      	subs	r0, r0, r2
 8006542:	d10d      	bne.n	8006560 <__mcmp+0x28>
 8006544:	3314      	adds	r3, #20
 8006546:	3114      	adds	r1, #20
 8006548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800654c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006558:	4295      	cmp	r5, r2
 800655a:	d002      	beq.n	8006562 <__mcmp+0x2a>
 800655c:	d304      	bcc.n	8006568 <__mcmp+0x30>
 800655e:	2001      	movs	r0, #1
 8006560:	bd30      	pop	{r4, r5, pc}
 8006562:	42a3      	cmp	r3, r4
 8006564:	d3f4      	bcc.n	8006550 <__mcmp+0x18>
 8006566:	e7fb      	b.n	8006560 <__mcmp+0x28>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e7f8      	b.n	8006560 <__mcmp+0x28>
	...

08006570 <__mdiff>:
 8006570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	460c      	mov	r4, r1
 8006576:	4606      	mov	r6, r0
 8006578:	4611      	mov	r1, r2
 800657a:	4620      	mov	r0, r4
 800657c:	4692      	mov	sl, r2
 800657e:	f7ff ffdb 	bl	8006538 <__mcmp>
 8006582:	1e05      	subs	r5, r0, #0
 8006584:	d111      	bne.n	80065aa <__mdiff+0x3a>
 8006586:	4629      	mov	r1, r5
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff fd5b 	bl	8006044 <_Balloc>
 800658e:	4602      	mov	r2, r0
 8006590:	b928      	cbnz	r0, 800659e <__mdiff+0x2e>
 8006592:	f240 2132 	movw	r1, #562	; 0x232
 8006596:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <__mdiff+0x118>)
 8006598:	483c      	ldr	r0, [pc, #240]	; (800668c <__mdiff+0x11c>)
 800659a:	f000 fb47 	bl	8006c2c <__assert_func>
 800659e:	2301      	movs	r3, #1
 80065a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065a4:	4610      	mov	r0, r2
 80065a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	bfa4      	itt	ge
 80065ac:	4653      	movge	r3, sl
 80065ae:	46a2      	movge	sl, r4
 80065b0:	4630      	mov	r0, r6
 80065b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80065b6:	bfa6      	itte	ge
 80065b8:	461c      	movge	r4, r3
 80065ba:	2500      	movge	r5, #0
 80065bc:	2501      	movlt	r5, #1
 80065be:	f7ff fd41 	bl	8006044 <_Balloc>
 80065c2:	4602      	mov	r2, r0
 80065c4:	b918      	cbnz	r0, 80065ce <__mdiff+0x5e>
 80065c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065ca:	4b2f      	ldr	r3, [pc, #188]	; (8006688 <__mdiff+0x118>)
 80065cc:	e7e4      	b.n	8006598 <__mdiff+0x28>
 80065ce:	f100 0814 	add.w	r8, r0, #20
 80065d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80065d6:	60c5      	str	r5, [r0, #12]
 80065d8:	f04f 0c00 	mov.w	ip, #0
 80065dc:	f10a 0514 	add.w	r5, sl, #20
 80065e0:	f10a 0010 	add.w	r0, sl, #16
 80065e4:	46c2      	mov	sl, r8
 80065e6:	6926      	ldr	r6, [r4, #16]
 80065e8:	f104 0914 	add.w	r9, r4, #20
 80065ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80065f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80065f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80065fc:	fa1f f18b 	uxth.w	r1, fp
 8006600:	4461      	add	r1, ip
 8006602:	fa1f fc83 	uxth.w	ip, r3
 8006606:	0c1b      	lsrs	r3, r3, #16
 8006608:	eba1 010c 	sub.w	r1, r1, ip
 800660c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006610:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006614:	b289      	uxth	r1, r1
 8006616:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800661a:	454e      	cmp	r6, r9
 800661c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006620:	f84a 3b04 	str.w	r3, [sl], #4
 8006624:	d8e6      	bhi.n	80065f4 <__mdiff+0x84>
 8006626:	1b33      	subs	r3, r6, r4
 8006628:	3b15      	subs	r3, #21
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	3415      	adds	r4, #21
 8006630:	3304      	adds	r3, #4
 8006632:	42a6      	cmp	r6, r4
 8006634:	bf38      	it	cc
 8006636:	2304      	movcc	r3, #4
 8006638:	441d      	add	r5, r3
 800663a:	4443      	add	r3, r8
 800663c:	461e      	mov	r6, r3
 800663e:	462c      	mov	r4, r5
 8006640:	4574      	cmp	r4, lr
 8006642:	d30e      	bcc.n	8006662 <__mdiff+0xf2>
 8006644:	f10e 0103 	add.w	r1, lr, #3
 8006648:	1b49      	subs	r1, r1, r5
 800664a:	f021 0103 	bic.w	r1, r1, #3
 800664e:	3d03      	subs	r5, #3
 8006650:	45ae      	cmp	lr, r5
 8006652:	bf38      	it	cc
 8006654:	2100      	movcc	r1, #0
 8006656:	4419      	add	r1, r3
 8006658:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800665c:	b18b      	cbz	r3, 8006682 <__mdiff+0x112>
 800665e:	6117      	str	r7, [r2, #16]
 8006660:	e7a0      	b.n	80065a4 <__mdiff+0x34>
 8006662:	f854 8b04 	ldr.w	r8, [r4], #4
 8006666:	fa1f f188 	uxth.w	r1, r8
 800666a:	4461      	add	r1, ip
 800666c:	1408      	asrs	r0, r1, #16
 800666e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006672:	b289      	uxth	r1, r1
 8006674:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800667c:	f846 1b04 	str.w	r1, [r6], #4
 8006680:	e7de      	b.n	8006640 <__mdiff+0xd0>
 8006682:	3f01      	subs	r7, #1
 8006684:	e7e8      	b.n	8006658 <__mdiff+0xe8>
 8006686:	bf00      	nop
 8006688:	08007240 	.word	0x08007240
 800668c:	080072b4 	.word	0x080072b4

08006690 <__d2b>:
 8006690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006694:	2101      	movs	r1, #1
 8006696:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800669a:	4690      	mov	r8, r2
 800669c:	461d      	mov	r5, r3
 800669e:	f7ff fcd1 	bl	8006044 <_Balloc>
 80066a2:	4604      	mov	r4, r0
 80066a4:	b930      	cbnz	r0, 80066b4 <__d2b+0x24>
 80066a6:	4602      	mov	r2, r0
 80066a8:	f240 310a 	movw	r1, #778	; 0x30a
 80066ac:	4b24      	ldr	r3, [pc, #144]	; (8006740 <__d2b+0xb0>)
 80066ae:	4825      	ldr	r0, [pc, #148]	; (8006744 <__d2b+0xb4>)
 80066b0:	f000 fabc 	bl	8006c2c <__assert_func>
 80066b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80066b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80066bc:	bb2d      	cbnz	r5, 800670a <__d2b+0x7a>
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	f1b8 0300 	subs.w	r3, r8, #0
 80066c4:	d026      	beq.n	8006714 <__d2b+0x84>
 80066c6:	4668      	mov	r0, sp
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	f7ff fd87 	bl	80061dc <__lo0bits>
 80066ce:	9900      	ldr	r1, [sp, #0]
 80066d0:	b1f0      	cbz	r0, 8006710 <__d2b+0x80>
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	f1c0 0320 	rsb	r3, r0, #32
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	430b      	orrs	r3, r1
 80066de:	40c2      	lsrs	r2, r0
 80066e0:	6163      	str	r3, [r4, #20]
 80066e2:	9201      	str	r2, [sp, #4]
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf14      	ite	ne
 80066ea:	2102      	movne	r1, #2
 80066ec:	2101      	moveq	r1, #1
 80066ee:	61a3      	str	r3, [r4, #24]
 80066f0:	6121      	str	r1, [r4, #16]
 80066f2:	b1c5      	cbz	r5, 8006726 <__d2b+0x96>
 80066f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066f8:	4405      	add	r5, r0
 80066fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066fe:	603d      	str	r5, [r7, #0]
 8006700:	6030      	str	r0, [r6, #0]
 8006702:	4620      	mov	r0, r4
 8006704:	b002      	add	sp, #8
 8006706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800670e:	e7d6      	b.n	80066be <__d2b+0x2e>
 8006710:	6161      	str	r1, [r4, #20]
 8006712:	e7e7      	b.n	80066e4 <__d2b+0x54>
 8006714:	a801      	add	r0, sp, #4
 8006716:	f7ff fd61 	bl	80061dc <__lo0bits>
 800671a:	2101      	movs	r1, #1
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	6121      	str	r1, [r4, #16]
 8006720:	6163      	str	r3, [r4, #20]
 8006722:	3020      	adds	r0, #32
 8006724:	e7e5      	b.n	80066f2 <__d2b+0x62>
 8006726:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800672a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800672e:	6038      	str	r0, [r7, #0]
 8006730:	6918      	ldr	r0, [r3, #16]
 8006732:	f7ff fd33 	bl	800619c <__hi0bits>
 8006736:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800673a:	6031      	str	r1, [r6, #0]
 800673c:	e7e1      	b.n	8006702 <__d2b+0x72>
 800673e:	bf00      	nop
 8006740:	08007240 	.word	0x08007240
 8006744:	080072b4 	.word	0x080072b4

08006748 <_calloc_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	fb02 f501 	mul.w	r5, r2, r1
 800674e:	4629      	mov	r1, r5
 8006750:	f000 f854 	bl	80067fc <_malloc_r>
 8006754:	4604      	mov	r4, r0
 8006756:	b118      	cbz	r0, 8006760 <_calloc_r+0x18>
 8006758:	462a      	mov	r2, r5
 800675a:	2100      	movs	r1, #0
 800675c:	f7fd fd68 	bl	8004230 <memset>
 8006760:	4620      	mov	r0, r4
 8006762:	bd38      	pop	{r3, r4, r5, pc}

08006764 <_free_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4605      	mov	r5, r0
 8006768:	2900      	cmp	r1, #0
 800676a:	d043      	beq.n	80067f4 <_free_r+0x90>
 800676c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006770:	1f0c      	subs	r4, r1, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	bfb8      	it	lt
 8006776:	18e4      	addlt	r4, r4, r3
 8006778:	f000 fade 	bl	8006d38 <__malloc_lock>
 800677c:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <_free_r+0x94>)
 800677e:	6813      	ldr	r3, [r2, #0]
 8006780:	4610      	mov	r0, r2
 8006782:	b933      	cbnz	r3, 8006792 <_free_r+0x2e>
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	6014      	str	r4, [r2, #0]
 8006788:	4628      	mov	r0, r5
 800678a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678e:	f000 bad9 	b.w	8006d44 <__malloc_unlock>
 8006792:	42a3      	cmp	r3, r4
 8006794:	d90a      	bls.n	80067ac <_free_r+0x48>
 8006796:	6821      	ldr	r1, [r4, #0]
 8006798:	1862      	adds	r2, r4, r1
 800679a:	4293      	cmp	r3, r2
 800679c:	bf01      	itttt	eq
 800679e:	681a      	ldreq	r2, [r3, #0]
 80067a0:	685b      	ldreq	r3, [r3, #4]
 80067a2:	1852      	addeq	r2, r2, r1
 80067a4:	6022      	streq	r2, [r4, #0]
 80067a6:	6063      	str	r3, [r4, #4]
 80067a8:	6004      	str	r4, [r0, #0]
 80067aa:	e7ed      	b.n	8006788 <_free_r+0x24>
 80067ac:	461a      	mov	r2, r3
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	b10b      	cbz	r3, 80067b6 <_free_r+0x52>
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	d9fa      	bls.n	80067ac <_free_r+0x48>
 80067b6:	6811      	ldr	r1, [r2, #0]
 80067b8:	1850      	adds	r0, r2, r1
 80067ba:	42a0      	cmp	r0, r4
 80067bc:	d10b      	bne.n	80067d6 <_free_r+0x72>
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	4401      	add	r1, r0
 80067c2:	1850      	adds	r0, r2, r1
 80067c4:	4283      	cmp	r3, r0
 80067c6:	6011      	str	r1, [r2, #0]
 80067c8:	d1de      	bne.n	8006788 <_free_r+0x24>
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4401      	add	r1, r0
 80067d0:	6011      	str	r1, [r2, #0]
 80067d2:	6053      	str	r3, [r2, #4]
 80067d4:	e7d8      	b.n	8006788 <_free_r+0x24>
 80067d6:	d902      	bls.n	80067de <_free_r+0x7a>
 80067d8:	230c      	movs	r3, #12
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	e7d4      	b.n	8006788 <_free_r+0x24>
 80067de:	6820      	ldr	r0, [r4, #0]
 80067e0:	1821      	adds	r1, r4, r0
 80067e2:	428b      	cmp	r3, r1
 80067e4:	bf01      	itttt	eq
 80067e6:	6819      	ldreq	r1, [r3, #0]
 80067e8:	685b      	ldreq	r3, [r3, #4]
 80067ea:	1809      	addeq	r1, r1, r0
 80067ec:	6021      	streq	r1, [r4, #0]
 80067ee:	6063      	str	r3, [r4, #4]
 80067f0:	6054      	str	r4, [r2, #4]
 80067f2:	e7c9      	b.n	8006788 <_free_r+0x24>
 80067f4:	bd38      	pop	{r3, r4, r5, pc}
 80067f6:	bf00      	nop
 80067f8:	2000020c 	.word	0x2000020c

080067fc <_malloc_r>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	1ccd      	adds	r5, r1, #3
 8006800:	f025 0503 	bic.w	r5, r5, #3
 8006804:	3508      	adds	r5, #8
 8006806:	2d0c      	cmp	r5, #12
 8006808:	bf38      	it	cc
 800680a:	250c      	movcc	r5, #12
 800680c:	2d00      	cmp	r5, #0
 800680e:	4606      	mov	r6, r0
 8006810:	db01      	blt.n	8006816 <_malloc_r+0x1a>
 8006812:	42a9      	cmp	r1, r5
 8006814:	d903      	bls.n	800681e <_malloc_r+0x22>
 8006816:	230c      	movs	r3, #12
 8006818:	6033      	str	r3, [r6, #0]
 800681a:	2000      	movs	r0, #0
 800681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681e:	f000 fa8b 	bl	8006d38 <__malloc_lock>
 8006822:	4921      	ldr	r1, [pc, #132]	; (80068a8 <_malloc_r+0xac>)
 8006824:	680a      	ldr	r2, [r1, #0]
 8006826:	4614      	mov	r4, r2
 8006828:	b99c      	cbnz	r4, 8006852 <_malloc_r+0x56>
 800682a:	4f20      	ldr	r7, [pc, #128]	; (80068ac <_malloc_r+0xb0>)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	b923      	cbnz	r3, 800683a <_malloc_r+0x3e>
 8006830:	4621      	mov	r1, r4
 8006832:	4630      	mov	r0, r6
 8006834:	f000 f994 	bl	8006b60 <_sbrk_r>
 8006838:	6038      	str	r0, [r7, #0]
 800683a:	4629      	mov	r1, r5
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f98f 	bl	8006b60 <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d123      	bne.n	800688e <_malloc_r+0x92>
 8006846:	230c      	movs	r3, #12
 8006848:	4630      	mov	r0, r6
 800684a:	6033      	str	r3, [r6, #0]
 800684c:	f000 fa7a 	bl	8006d44 <__malloc_unlock>
 8006850:	e7e3      	b.n	800681a <_malloc_r+0x1e>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	1b5b      	subs	r3, r3, r5
 8006856:	d417      	bmi.n	8006888 <_malloc_r+0x8c>
 8006858:	2b0b      	cmp	r3, #11
 800685a:	d903      	bls.n	8006864 <_malloc_r+0x68>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	441c      	add	r4, r3
 8006860:	6025      	str	r5, [r4, #0]
 8006862:	e004      	b.n	800686e <_malloc_r+0x72>
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	42a2      	cmp	r2, r4
 8006868:	bf0c      	ite	eq
 800686a:	600b      	streq	r3, [r1, #0]
 800686c:	6053      	strne	r3, [r2, #4]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 fa68 	bl	8006d44 <__malloc_unlock>
 8006874:	f104 000b 	add.w	r0, r4, #11
 8006878:	1d23      	adds	r3, r4, #4
 800687a:	f020 0007 	bic.w	r0, r0, #7
 800687e:	1ac2      	subs	r2, r0, r3
 8006880:	d0cc      	beq.n	800681c <_malloc_r+0x20>
 8006882:	1a1b      	subs	r3, r3, r0
 8006884:	50a3      	str	r3, [r4, r2]
 8006886:	e7c9      	b.n	800681c <_malloc_r+0x20>
 8006888:	4622      	mov	r2, r4
 800688a:	6864      	ldr	r4, [r4, #4]
 800688c:	e7cc      	b.n	8006828 <_malloc_r+0x2c>
 800688e:	1cc4      	adds	r4, r0, #3
 8006890:	f024 0403 	bic.w	r4, r4, #3
 8006894:	42a0      	cmp	r0, r4
 8006896:	d0e3      	beq.n	8006860 <_malloc_r+0x64>
 8006898:	1a21      	subs	r1, r4, r0
 800689a:	4630      	mov	r0, r6
 800689c:	f000 f960 	bl	8006b60 <_sbrk_r>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d1dd      	bne.n	8006860 <_malloc_r+0x64>
 80068a4:	e7cf      	b.n	8006846 <_malloc_r+0x4a>
 80068a6:	bf00      	nop
 80068a8:	2000020c 	.word	0x2000020c
 80068ac:	20000210 	.word	0x20000210

080068b0 <__sfputc_r>:
 80068b0:	6893      	ldr	r3, [r2, #8]
 80068b2:	b410      	push	{r4}
 80068b4:	3b01      	subs	r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	6093      	str	r3, [r2, #8]
 80068ba:	da07      	bge.n	80068cc <__sfputc_r+0x1c>
 80068bc:	6994      	ldr	r4, [r2, #24]
 80068be:	42a3      	cmp	r3, r4
 80068c0:	db01      	blt.n	80068c6 <__sfputc_r+0x16>
 80068c2:	290a      	cmp	r1, #10
 80068c4:	d102      	bne.n	80068cc <__sfputc_r+0x1c>
 80068c6:	bc10      	pop	{r4}
 80068c8:	f7fe ba38 	b.w	8004d3c <__swbuf_r>
 80068cc:	6813      	ldr	r3, [r2, #0]
 80068ce:	1c58      	adds	r0, r3, #1
 80068d0:	6010      	str	r0, [r2, #0]
 80068d2:	7019      	strb	r1, [r3, #0]
 80068d4:	4608      	mov	r0, r1
 80068d6:	bc10      	pop	{r4}
 80068d8:	4770      	bx	lr

080068da <__sfputs_r>:
 80068da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068dc:	4606      	mov	r6, r0
 80068de:	460f      	mov	r7, r1
 80068e0:	4614      	mov	r4, r2
 80068e2:	18d5      	adds	r5, r2, r3
 80068e4:	42ac      	cmp	r4, r5
 80068e6:	d101      	bne.n	80068ec <__sfputs_r+0x12>
 80068e8:	2000      	movs	r0, #0
 80068ea:	e007      	b.n	80068fc <__sfputs_r+0x22>
 80068ec:	463a      	mov	r2, r7
 80068ee:	4630      	mov	r0, r6
 80068f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f4:	f7ff ffdc 	bl	80068b0 <__sfputc_r>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d1f3      	bne.n	80068e4 <__sfputs_r+0xa>
 80068fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006900 <_vfiprintf_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	460d      	mov	r5, r1
 8006906:	4614      	mov	r4, r2
 8006908:	4698      	mov	r8, r3
 800690a:	4606      	mov	r6, r0
 800690c:	b09d      	sub	sp, #116	; 0x74
 800690e:	b118      	cbz	r0, 8006918 <_vfiprintf_r+0x18>
 8006910:	6983      	ldr	r3, [r0, #24]
 8006912:	b90b      	cbnz	r3, 8006918 <_vfiprintf_r+0x18>
 8006914:	f7ff fa68 	bl	8005de8 <__sinit>
 8006918:	4b89      	ldr	r3, [pc, #548]	; (8006b40 <_vfiprintf_r+0x240>)
 800691a:	429d      	cmp	r5, r3
 800691c:	d11b      	bne.n	8006956 <_vfiprintf_r+0x56>
 800691e:	6875      	ldr	r5, [r6, #4]
 8006920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006922:	07d9      	lsls	r1, r3, #31
 8006924:	d405      	bmi.n	8006932 <_vfiprintf_r+0x32>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	059a      	lsls	r2, r3, #22
 800692a:	d402      	bmi.n	8006932 <_vfiprintf_r+0x32>
 800692c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800692e:	f7ff fafe 	bl	8005f2e <__retarget_lock_acquire_recursive>
 8006932:	89ab      	ldrh	r3, [r5, #12]
 8006934:	071b      	lsls	r3, r3, #28
 8006936:	d501      	bpl.n	800693c <_vfiprintf_r+0x3c>
 8006938:	692b      	ldr	r3, [r5, #16]
 800693a:	b9eb      	cbnz	r3, 8006978 <_vfiprintf_r+0x78>
 800693c:	4629      	mov	r1, r5
 800693e:	4630      	mov	r0, r6
 8006940:	f7fe fa4e 	bl	8004de0 <__swsetup_r>
 8006944:	b1c0      	cbz	r0, 8006978 <_vfiprintf_r+0x78>
 8006946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006948:	07dc      	lsls	r4, r3, #31
 800694a:	d50e      	bpl.n	800696a <_vfiprintf_r+0x6a>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	b01d      	add	sp, #116	; 0x74
 8006952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006956:	4b7b      	ldr	r3, [pc, #492]	; (8006b44 <_vfiprintf_r+0x244>)
 8006958:	429d      	cmp	r5, r3
 800695a:	d101      	bne.n	8006960 <_vfiprintf_r+0x60>
 800695c:	68b5      	ldr	r5, [r6, #8]
 800695e:	e7df      	b.n	8006920 <_vfiprintf_r+0x20>
 8006960:	4b79      	ldr	r3, [pc, #484]	; (8006b48 <_vfiprintf_r+0x248>)
 8006962:	429d      	cmp	r5, r3
 8006964:	bf08      	it	eq
 8006966:	68f5      	ldreq	r5, [r6, #12]
 8006968:	e7da      	b.n	8006920 <_vfiprintf_r+0x20>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	0598      	lsls	r0, r3, #22
 800696e:	d4ed      	bmi.n	800694c <_vfiprintf_r+0x4c>
 8006970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006972:	f7ff fadd 	bl	8005f30 <__retarget_lock_release_recursive>
 8006976:	e7e9      	b.n	800694c <_vfiprintf_r+0x4c>
 8006978:	2300      	movs	r3, #0
 800697a:	9309      	str	r3, [sp, #36]	; 0x24
 800697c:	2320      	movs	r3, #32
 800697e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006982:	2330      	movs	r3, #48	; 0x30
 8006984:	f04f 0901 	mov.w	r9, #1
 8006988:	f8cd 800c 	str.w	r8, [sp, #12]
 800698c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b4c <_vfiprintf_r+0x24c>
 8006990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006994:	4623      	mov	r3, r4
 8006996:	469a      	mov	sl, r3
 8006998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800699c:	b10a      	cbz	r2, 80069a2 <_vfiprintf_r+0xa2>
 800699e:	2a25      	cmp	r2, #37	; 0x25
 80069a0:	d1f9      	bne.n	8006996 <_vfiprintf_r+0x96>
 80069a2:	ebba 0b04 	subs.w	fp, sl, r4
 80069a6:	d00b      	beq.n	80069c0 <_vfiprintf_r+0xc0>
 80069a8:	465b      	mov	r3, fp
 80069aa:	4622      	mov	r2, r4
 80069ac:	4629      	mov	r1, r5
 80069ae:	4630      	mov	r0, r6
 80069b0:	f7ff ff93 	bl	80068da <__sfputs_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	f000 80aa 	beq.w	8006b0e <_vfiprintf_r+0x20e>
 80069ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069bc:	445a      	add	r2, fp
 80069be:	9209      	str	r2, [sp, #36]	; 0x24
 80069c0:	f89a 3000 	ldrb.w	r3, [sl]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80a2 	beq.w	8006b0e <_vfiprintf_r+0x20e>
 80069ca:	2300      	movs	r3, #0
 80069cc:	f04f 32ff 	mov.w	r2, #4294967295
 80069d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069d4:	f10a 0a01 	add.w	sl, sl, #1
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	9307      	str	r3, [sp, #28]
 80069dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069e0:	931a      	str	r3, [sp, #104]	; 0x68
 80069e2:	4654      	mov	r4, sl
 80069e4:	2205      	movs	r2, #5
 80069e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ea:	4858      	ldr	r0, [pc, #352]	; (8006b4c <_vfiprintf_r+0x24c>)
 80069ec:	f7ff fb0e 	bl	800600c <memchr>
 80069f0:	9a04      	ldr	r2, [sp, #16]
 80069f2:	b9d8      	cbnz	r0, 8006a2c <_vfiprintf_r+0x12c>
 80069f4:	06d1      	lsls	r1, r2, #27
 80069f6:	bf44      	itt	mi
 80069f8:	2320      	movmi	r3, #32
 80069fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fe:	0713      	lsls	r3, r2, #28
 8006a00:	bf44      	itt	mi
 8006a02:	232b      	movmi	r3, #43	; 0x2b
 8006a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a08:	f89a 3000 	ldrb.w	r3, [sl]
 8006a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0e:	d015      	beq.n	8006a3c <_vfiprintf_r+0x13c>
 8006a10:	4654      	mov	r4, sl
 8006a12:	2000      	movs	r0, #0
 8006a14:	f04f 0c0a 	mov.w	ip, #10
 8006a18:	9a07      	ldr	r2, [sp, #28]
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a20:	3b30      	subs	r3, #48	; 0x30
 8006a22:	2b09      	cmp	r3, #9
 8006a24:	d94e      	bls.n	8006ac4 <_vfiprintf_r+0x1c4>
 8006a26:	b1b0      	cbz	r0, 8006a56 <_vfiprintf_r+0x156>
 8006a28:	9207      	str	r2, [sp, #28]
 8006a2a:	e014      	b.n	8006a56 <_vfiprintf_r+0x156>
 8006a2c:	eba0 0308 	sub.w	r3, r0, r8
 8006a30:	fa09 f303 	lsl.w	r3, r9, r3
 8006a34:	4313      	orrs	r3, r2
 8006a36:	46a2      	mov	sl, r4
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	e7d2      	b.n	80069e2 <_vfiprintf_r+0xe2>
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	1d19      	adds	r1, r3, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	9103      	str	r1, [sp, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bfbb      	ittet	lt
 8006a48:	425b      	neglt	r3, r3
 8006a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a4e:	9307      	strge	r3, [sp, #28]
 8006a50:	9307      	strlt	r3, [sp, #28]
 8006a52:	bfb8      	it	lt
 8006a54:	9204      	strlt	r2, [sp, #16]
 8006a56:	7823      	ldrb	r3, [r4, #0]
 8006a58:	2b2e      	cmp	r3, #46	; 0x2e
 8006a5a:	d10c      	bne.n	8006a76 <_vfiprintf_r+0x176>
 8006a5c:	7863      	ldrb	r3, [r4, #1]
 8006a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a60:	d135      	bne.n	8006ace <_vfiprintf_r+0x1ce>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	3402      	adds	r4, #2
 8006a66:	1d1a      	adds	r2, r3, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	9203      	str	r2, [sp, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bfb8      	it	lt
 8006a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b5c <_vfiprintf_r+0x25c>
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	7821      	ldrb	r1, [r4, #0]
 8006a80:	f7ff fac4 	bl	800600c <memchr>
 8006a84:	b140      	cbz	r0, 8006a98 <_vfiprintf_r+0x198>
 8006a86:	2340      	movs	r3, #64	; 0x40
 8006a88:	eba0 000a 	sub.w	r0, r0, sl
 8006a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8006a90:	9b04      	ldr	r3, [sp, #16]
 8006a92:	3401      	adds	r4, #1
 8006a94:	4303      	orrs	r3, r0
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a9c:	2206      	movs	r2, #6
 8006a9e:	482c      	ldr	r0, [pc, #176]	; (8006b50 <_vfiprintf_r+0x250>)
 8006aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006aa4:	f7ff fab2 	bl	800600c <memchr>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d03f      	beq.n	8006b2c <_vfiprintf_r+0x22c>
 8006aac:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <_vfiprintf_r+0x254>)
 8006aae:	bb1b      	cbnz	r3, 8006af8 <_vfiprintf_r+0x1f8>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	3307      	adds	r3, #7
 8006ab4:	f023 0307 	bic.w	r3, r3, #7
 8006ab8:	3308      	adds	r3, #8
 8006aba:	9303      	str	r3, [sp, #12]
 8006abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abe:	443b      	add	r3, r7
 8006ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac2:	e767      	b.n	8006994 <_vfiprintf_r+0x94>
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006acc:	e7a5      	b.n	8006a1a <_vfiprintf_r+0x11a>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f04f 0c0a 	mov.w	ip, #10
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	3401      	adds	r4, #1
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	4620      	mov	r0, r4
 8006adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ae0:	3a30      	subs	r2, #48	; 0x30
 8006ae2:	2a09      	cmp	r2, #9
 8006ae4:	d903      	bls.n	8006aee <_vfiprintf_r+0x1ee>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0c5      	beq.n	8006a76 <_vfiprintf_r+0x176>
 8006aea:	9105      	str	r1, [sp, #20]
 8006aec:	e7c3      	b.n	8006a76 <_vfiprintf_r+0x176>
 8006aee:	4604      	mov	r4, r0
 8006af0:	2301      	movs	r3, #1
 8006af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006af6:	e7f0      	b.n	8006ada <_vfiprintf_r+0x1da>
 8006af8:	ab03      	add	r3, sp, #12
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	462a      	mov	r2, r5
 8006afe:	4630      	mov	r0, r6
 8006b00:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <_vfiprintf_r+0x258>)
 8006b02:	a904      	add	r1, sp, #16
 8006b04:	f7fd fc3a 	bl	800437c <_printf_float>
 8006b08:	4607      	mov	r7, r0
 8006b0a:	1c78      	adds	r0, r7, #1
 8006b0c:	d1d6      	bne.n	8006abc <_vfiprintf_r+0x1bc>
 8006b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b10:	07d9      	lsls	r1, r3, #31
 8006b12:	d405      	bmi.n	8006b20 <_vfiprintf_r+0x220>
 8006b14:	89ab      	ldrh	r3, [r5, #12]
 8006b16:	059a      	lsls	r2, r3, #22
 8006b18:	d402      	bmi.n	8006b20 <_vfiprintf_r+0x220>
 8006b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b1c:	f7ff fa08 	bl	8005f30 <__retarget_lock_release_recursive>
 8006b20:	89ab      	ldrh	r3, [r5, #12]
 8006b22:	065b      	lsls	r3, r3, #25
 8006b24:	f53f af12 	bmi.w	800694c <_vfiprintf_r+0x4c>
 8006b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b2a:	e711      	b.n	8006950 <_vfiprintf_r+0x50>
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <_vfiprintf_r+0x258>)
 8006b36:	a904      	add	r1, sp, #16
 8006b38:	f7fd febc 	bl	80048b4 <_printf_i>
 8006b3c:	e7e4      	b.n	8006b08 <_vfiprintf_r+0x208>
 8006b3e:	bf00      	nop
 8006b40:	08007274 	.word	0x08007274
 8006b44:	08007294 	.word	0x08007294
 8006b48:	08007254 	.word	0x08007254
 8006b4c:	08007414 	.word	0x08007414
 8006b50:	0800741e 	.word	0x0800741e
 8006b54:	0800437d 	.word	0x0800437d
 8006b58:	080068db 	.word	0x080068db
 8006b5c:	0800741a 	.word	0x0800741a

08006b60 <_sbrk_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	2300      	movs	r3, #0
 8006b64:	4d05      	ldr	r5, [pc, #20]	; (8006b7c <_sbrk_r+0x1c>)
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fb fa1c 	bl	8001fa8 <_sbrk>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_sbrk_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_sbrk_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	20000374 	.word	0x20000374

08006b80 <__sread>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	460c      	mov	r4, r1
 8006b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b88:	f000 f8e2 	bl	8006d50 <_read_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	bfab      	itete	ge
 8006b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b92:	89a3      	ldrhlt	r3, [r4, #12]
 8006b94:	181b      	addge	r3, r3, r0
 8006b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b9a:	bfac      	ite	ge
 8006b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b9e:	81a3      	strhlt	r3, [r4, #12]
 8006ba0:	bd10      	pop	{r4, pc}

08006ba2 <__swrite>:
 8006ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	898b      	ldrh	r3, [r1, #12]
 8006baa:	4605      	mov	r5, r0
 8006bac:	05db      	lsls	r3, r3, #23
 8006bae:	460c      	mov	r4, r1
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	d505      	bpl.n	8006bc0 <__swrite+0x1e>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	f000 f898 	bl	8006cf0 <_lseek_r>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	4632      	mov	r2, r6
 8006bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	4628      	mov	r0, r5
 8006bcc:	463b      	mov	r3, r7
 8006bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	f000 b817 	b.w	8006c08 <_write_r>

08006bda <__sseek>:
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	460c      	mov	r4, r1
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 f885 	bl	8006cf0 <_lseek_r>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	bf15      	itete	ne
 8006bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bf6:	81a3      	strheq	r3, [r4, #12]
 8006bf8:	bf18      	it	ne
 8006bfa:	81a3      	strhne	r3, [r4, #12]
 8006bfc:	bd10      	pop	{r4, pc}

08006bfe <__sclose>:
 8006bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c02:	f000 b831 	b.w	8006c68 <_close_r>
	...

08006c08 <_write_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	2200      	movs	r2, #0
 8006c12:	4d05      	ldr	r5, [pc, #20]	; (8006c28 <_write_r+0x20>)
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f7fb f979 	bl	8001f0e <_write>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_write_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_write_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20000374 	.word	0x20000374

08006c2c <__assert_func>:
 8006c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c2e:	4614      	mov	r4, r2
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <__assert_func+0x2c>)
 8006c34:	4605      	mov	r5, r0
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68d8      	ldr	r0, [r3, #12]
 8006c3a:	b14c      	cbz	r4, 8006c50 <__assert_func+0x24>
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <__assert_func+0x30>)
 8006c3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c42:	9100      	str	r1, [sp, #0]
 8006c44:	462b      	mov	r3, r5
 8006c46:	4906      	ldr	r1, [pc, #24]	; (8006c60 <__assert_func+0x34>)
 8006c48:	f000 f81e 	bl	8006c88 <fiprintf>
 8006c4c:	f000 f89f 	bl	8006d8e <abort>
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <__assert_func+0x38>)
 8006c52:	461c      	mov	r4, r3
 8006c54:	e7f3      	b.n	8006c3e <__assert_func+0x12>
 8006c56:	bf00      	nop
 8006c58:	2000000c 	.word	0x2000000c
 8006c5c:	08007425 	.word	0x08007425
 8006c60:	08007432 	.word	0x08007432
 8006c64:	08007460 	.word	0x08007460

08006c68 <_close_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4d05      	ldr	r5, [pc, #20]	; (8006c84 <_close_r+0x1c>)
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fb f967 	bl	8001f46 <_close>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_close_r+0x1a>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_close_r+0x1a>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	20000374 	.word	0x20000374

08006c88 <fiprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b503      	push	{r0, r1, lr}
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <fiprintf+0x20>)
 8006c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f7ff fe31 	bl	8006900 <_vfiprintf_r>
 8006c9e:	b002      	add	sp, #8
 8006ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca4:	b003      	add	sp, #12
 8006ca6:	4770      	bx	lr
 8006ca8:	2000000c 	.word	0x2000000c

08006cac <_fstat_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_fstat_r+0x20>)
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	f7fb f94f 	bl	8001f5c <_fstat>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d102      	bne.n	8006cc8 <_fstat_r+0x1c>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	b103      	cbz	r3, 8006cc8 <_fstat_r+0x1c>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000374 	.word	0x20000374

08006cd0 <_isatty_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4d05      	ldr	r5, [pc, #20]	; (8006cec <_isatty_r+0x1c>)
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	f7fb f94d 	bl	8001f7a <_isatty>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_isatty_r+0x1a>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_isatty_r+0x1a>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20000374 	.word	0x20000374

08006cf0 <_lseek_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4d05      	ldr	r5, [pc, #20]	; (8006d10 <_lseek_r+0x20>)
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7fb f945 	bl	8001f8e <_lseek>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_lseek_r+0x1e>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_lseek_r+0x1e>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000374 	.word	0x20000374

08006d14 <__ascii_mbtowc>:
 8006d14:	b082      	sub	sp, #8
 8006d16:	b901      	cbnz	r1, 8006d1a <__ascii_mbtowc+0x6>
 8006d18:	a901      	add	r1, sp, #4
 8006d1a:	b142      	cbz	r2, 8006d2e <__ascii_mbtowc+0x1a>
 8006d1c:	b14b      	cbz	r3, 8006d32 <__ascii_mbtowc+0x1e>
 8006d1e:	7813      	ldrb	r3, [r2, #0]
 8006d20:	600b      	str	r3, [r1, #0]
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	1e10      	subs	r0, r2, #0
 8006d26:	bf18      	it	ne
 8006d28:	2001      	movne	r0, #1
 8006d2a:	b002      	add	sp, #8
 8006d2c:	4770      	bx	lr
 8006d2e:	4610      	mov	r0, r2
 8006d30:	e7fb      	b.n	8006d2a <__ascii_mbtowc+0x16>
 8006d32:	f06f 0001 	mvn.w	r0, #1
 8006d36:	e7f8      	b.n	8006d2a <__ascii_mbtowc+0x16>

08006d38 <__malloc_lock>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__malloc_lock+0x8>)
 8006d3a:	f7ff b8f8 	b.w	8005f2e <__retarget_lock_acquire_recursive>
 8006d3e:	bf00      	nop
 8006d40:	2000036c 	.word	0x2000036c

08006d44 <__malloc_unlock>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__malloc_unlock+0x8>)
 8006d46:	f7ff b8f3 	b.w	8005f30 <__retarget_lock_release_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	2000036c 	.word	0x2000036c

08006d50 <_read_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4d05      	ldr	r5, [pc, #20]	; (8006d70 <_read_r+0x20>)
 8006d5c:	602a      	str	r2, [r5, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f7fb f8b8 	bl	8001ed4 <_read>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_read_r+0x1e>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_read_r+0x1e>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000374 	.word	0x20000374

08006d74 <__ascii_wctomb>:
 8006d74:	4603      	mov	r3, r0
 8006d76:	4608      	mov	r0, r1
 8006d78:	b141      	cbz	r1, 8006d8c <__ascii_wctomb+0x18>
 8006d7a:	2aff      	cmp	r2, #255	; 0xff
 8006d7c:	d904      	bls.n	8006d88 <__ascii_wctomb+0x14>
 8006d7e:	228a      	movs	r2, #138	; 0x8a
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	4770      	bx	lr
 8006d88:	2001      	movs	r0, #1
 8006d8a:	700a      	strb	r2, [r1, #0]
 8006d8c:	4770      	bx	lr

08006d8e <abort>:
 8006d8e:	2006      	movs	r0, #6
 8006d90:	b508      	push	{r3, lr}
 8006d92:	f000 f82b 	bl	8006dec <raise>
 8006d96:	2001      	movs	r0, #1
 8006d98:	f7fb f892 	bl	8001ec0 <_exit>

08006d9c <_raise_r>:
 8006d9c:	291f      	cmp	r1, #31
 8006d9e:	b538      	push	{r3, r4, r5, lr}
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	d904      	bls.n	8006db0 <_raise_r+0x14>
 8006da6:	2316      	movs	r3, #22
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006db2:	b112      	cbz	r2, 8006dba <_raise_r+0x1e>
 8006db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006db8:	b94b      	cbnz	r3, 8006dce <_raise_r+0x32>
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 f830 	bl	8006e20 <_getpid_r>
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dca:	f000 b817 	b.w	8006dfc <_kill_r>
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d00a      	beq.n	8006de8 <_raise_r+0x4c>
 8006dd2:	1c59      	adds	r1, r3, #1
 8006dd4:	d103      	bne.n	8006dde <_raise_r+0x42>
 8006dd6:	2316      	movs	r3, #22
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	2001      	movs	r0, #1
 8006ddc:	e7e7      	b.n	8006dae <_raise_r+0x12>
 8006dde:	2400      	movs	r4, #0
 8006de0:	4628      	mov	r0, r5
 8006de2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006de6:	4798      	blx	r3
 8006de8:	2000      	movs	r0, #0
 8006dea:	e7e0      	b.n	8006dae <_raise_r+0x12>

08006dec <raise>:
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <raise+0xc>)
 8006dee:	4601      	mov	r1, r0
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f7ff bfd3 	b.w	8006d9c <_raise_r>
 8006df6:	bf00      	nop
 8006df8:	2000000c 	.word	0x2000000c

08006dfc <_kill_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4d06      	ldr	r5, [pc, #24]	; (8006e1c <_kill_r+0x20>)
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	f7fb f849 	bl	8001ea0 <_kill>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_kill_r+0x1c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_kill_r+0x1c>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000374 	.word	0x20000374

08006e20 <_getpid_r>:
 8006e20:	f7fb b837 	b.w	8001e92 <_getpid>

08006e24 <_init>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr

08006e30 <_fini>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	bf00      	nop
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr
